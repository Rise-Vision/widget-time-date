var WIDGET_COMMON_CONFIG={AUTH_PATH_URL:"v1/widget/auth",LOGGER_CLIENT_ID:"1088527147109-6q1o2vtihn34292pjt4ckhmhck0rk0o7.apps.googleusercontent.com",LOGGER_CLIENT_SECRET:"nlZyrcPLg6oEwO9f9Wfn29Wh",LOGGER_REFRESH_TOKEN:"1/xzt4kwzE1H7W9VnKB8cAaCx6zb4Es4nKEoqaYHdTD15IgOrJDtdun6zK6XiATCKT",STORAGE_ENV:"prod",STORE_URL:"https://store-dot-rvaserver2.appspot.com/"},RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.LoggerUtils=function(){"use strict";function t(t,e){var i=null;t.event?(i=t,i.file_url&&(i.file_format=n(i.file_url)),i.company_id=a,i.display_id=o,e(i)):e(i)}function e(){var t=new Date,e=t.getUTCFullYear(),n=t.getUTCMonth()+1,i=t.getUTCDate();return 10>n&&(n="0"+n),10>i&&(i="0"+i),e+n+i}function n(t){var e,n=/[?#&]/;return t&&"string"==typeof t?(e=t.substr(t.lastIndexOf(".")+1),n.test(e)&&(e=e.substr(0,-1!==e.indexOf("?")?e.indexOf("?"):e.length),e=e.substr(0,-1!==e.indexOf("#")?e.indexOf("#"):e.length),e=e.substr(0,-1!==e.indexOf("&")?e.indexOf("&"):e.length)),e.toLowerCase()):null}function i(t){var n={kind:"bigquery#tableDataInsertAllRequest",skipInvalidRows:!1,ignoreUnknownValues:!1,templateSuffix:e(),rows:[{insertId:""}]},i=JSON.parse(JSON.stringify(n));return i.rows[0].insertId=Math.random().toString(36).substr(2).toUpperCase(),i.rows[0].json=JSON.parse(JSON.stringify(t)),i.rows[0].json.ts=(new Date).toISOString(),i}function s(e,n){t(n,function(t){null!==t&&RiseVision.Common.Logger.log(e,t)})}function r(t,e){a=t,o=e}var o="",a="";return{getInsertData:i,getFileFormat:n,logEvent:s,setIds:r}}(),RiseVision.Common.Logger=function(t){"use strict";function e(t){var e=new XMLHttpRequest;return new Date-l<358e4?t({}):(e.open("POST",s,!0),e.onloadend=function(){var n=JSON.parse(e.response);t({token:n.access_token,refreshedAt:new Date})},e.send(),void 0)}function n(t){return o&&u===t}function i(i,s){function c(e){var n,o,a=new XMLHttpRequest;o=r.replace("TABLE_ID",i),l=e.refreshedAt||l,d=e.token||d,n=t.getInsertData(s),a.open("POST",o,!0),a.setRequestHeader("Content-Type","application/json"),a.setRequestHeader("Authorization","Bearer "+d),s.cb&&"function"==typeof s.cb&&(a.onloadend=function(){s.cb(a.response)}),a.send(JSON.stringify(n))}if(!(!i||!s||s.hasOwnProperty("event")&&!s.event||s.hasOwnProperty("event")&&n(s.event)))return o=!0,u=s.event,setTimeout(function(){o=!1},a),e(c)}var s="https://www.googleapis.com/oauth2/v3/token?client_id="+WIDGET_COMMON_CONFIG.LOGGER_CLIENT_ID+"&client_secret="+WIDGET_COMMON_CONFIG.LOGGER_CLIENT_SECRET+"&refresh_token="+WIDGET_COMMON_CONFIG.LOGGER_REFRESH_TOKEN+"&grant_type=refresh_token",r="https://www.googleapis.com/bigquery/v2/projects/client-side-events/datasets/Widget_Events/tables/TABLE_ID/insertAll",o=!1,a=1e3,u="",l=0,d="";return{log:i}}(RiseVision.Common.LoggerUtils);var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.RiseCache=function(){"use strict";function t(t){var e=new XMLHttpRequest;t&&"function"==typeof t&&(e.open("GET",n+"ping?callback=_",!0),e.onreadystatechange=function(){try{4===e.readyState&&(i=!0,200===e.status?(s=!0,t(!0,e.responseText)):(console.debug("Rise Cache is not running"),s=!1,t(!1,null)))}catch(n){console.debug("Caught exception: ",n.description)}},e.send())}function e(t,e,r){function o(e){var i,s,o;e?i=r?n+"?url="+encodeURIComponent(t):n+"cb="+(new Date).getTime()+"?url="+encodeURIComponent(t):r?i=t:(s=t.split("?"),o=1===s.length?"?":"&",i=t+o+"cb="+(new Date).getTime()),a("HEAD",i)}function a(t,n){var i=new XMLHttpRequest,r={xhr:i,url:n};i.open(t,n,!0),i.addEventListener("loadend",function(){var o=i.status||0;o>=200&&300>o?e(r):"HEAD"===t?a("GET",n):s?e(r,new Error("The request failed with status code: "+o)):e(r)}),i.send()}if(t&&e&&"function"==typeof e)return i?o(s):this.ping(o)}var n="http://localhost:9494/",i=!1,s=!1;return{getFile:e,ping:t}}();var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.Utilities=function(){function t(t,e){var n="font-family:"+e.font.family+"; ",i="color: "+(e.color?e.color:e.forecolor)+"; ",s="font-size: "+(-1===e.size.indexOf("px")?e.size+"px; ":e.size+"; "),r="font-weight: "+(e.bold?"bold":"normal")+"; ",o="font-style: "+(e.italic?"italic":"normal")+"; ",a="text-decoration: "+(e.underline?"underline":"none")+"; ",u="background-color: "+(e.highlightColor?e.highlightColor:e.backcolor)+"; ";return"."+t+" {"+n+i+s+r+o+a+u+"}"}function e(t){for(var e=document.createElement("style"),n=0,i=t.length;i>n;n++)e.appendChild(document.createTextNode(t[n]));document.head.appendChild(e)}function n(n,r){n.forEach(function(n){n.class&&n.fontSetting&&e([t(n.class,n.fontSetting)]),n.fontSetting.font.type&&("custom"===n.fontSetting.font.type&&n.fontSetting.font.family&&n.fontSetting.font.url?i(n.fontSetting.font.family,n.fontSetting.font.url,r):"google"===n.fontSetting.font.type&&n.fontSetting.font.family&&s(n.fontSetting.font.family,r))})}function i(t,e,n){var i=null,s="font-family: "+t+"; src: url('"+e+"');";n=n||document,i=n.styleSheets[0],null!==i&&i.addRule("@font-face",s)}function s(t,e){var n=document.createElement("link");e=e||document,n.setAttribute("rel","stylesheet"),n.setAttribute("type","text/css"),n.setAttribute("href","https://fonts.googleapis.com/css?family="+t.split(",")[0]),null!==n&&e.getElementsByTagName("head")[0].appendChild(n)}function r(t){for(var e=t.length,n=[],i=0;e>i;i++)n[i]=new Image,n[i].src=t[i]}function o(t){for(var e,n=window.location.search.substring(1),i=n.split("&"),s=0;s<i.length;s++)if(e=i[s].split("="),e[0]==t)return decodeURIComponent(e[1]);return""}return{getQueryParameter:o,getFontCssStyle:t,addCSSRules:e,loadFonts:n,loadCustomFont:i,loadGoogleFont:s,preloadImages:r}}(),function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):t.moment=e()}(this,function(){"use strict";function t(){return qi.apply(null,arguments)}function e(t){qi=t}function n(t){return"[object Array]"===Object.prototype.toString.call(t)}function i(t){return t instanceof Date||"[object Date]"===Object.prototype.toString.call(t)}function s(t,e){var n,i=[];for(n=0;n<t.length;++n)i.push(e(t[n],n));return i}function r(t,e){return Object.prototype.hasOwnProperty.call(t,e)}function o(t,e){for(var n in e)r(e,n)&&(t[n]=e[n]);return r(e,"toString")&&(t.toString=e.toString),r(e,"valueOf")&&(t.valueOf=e.valueOf),t}function a(t,e,n,i){return Ce(t,e,n,i,!0).utc()}function u(){return{empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1}}function l(t){return null==t._pf&&(t._pf=u()),t._pf}function d(t){if(null==t._isValid){var e=l(t);t._isValid=!(isNaN(t._d.getTime())||!(e.overflow<0)||e.empty||e.invalidMonth||e.invalidWeekday||e.nullInput||e.invalidFormat||e.userInvalidated),t._strict&&(t._isValid=t._isValid&&0===e.charsLeftOver&&0===e.unusedTokens.length&&void 0===e.bigHour)}return t._isValid}function c(t){var e=a(0/0);return null!=t?o(l(e),t):l(e).userInvalidated=!0,e}function h(t){return void 0===t}function f(t,e){var n,i,s;if(h(e._isAMomentObject)||(t._isAMomentObject=e._isAMomentObject),h(e._i)||(t._i=e._i),h(e._f)||(t._f=e._f),h(e._l)||(t._l=e._l),h(e._strict)||(t._strict=e._strict),h(e._tzm)||(t._tzm=e._tzm),h(e._isUTC)||(t._isUTC=e._isUTC),h(e._offset)||(t._offset=e._offset),h(e._pf)||(t._pf=l(e)),h(e._locale)||(t._locale=e._locale),Bi.length>0)for(n in Bi)i=Bi[n],s=e[i],h(s)||(t[i]=s);return t}function m(e){f(this,e),this._d=new Date(null!=e._d?e._d.getTime():0/0),Xi===!1&&(Xi=!0,t.updateOffset(this),Xi=!1)}function _(t){return t instanceof m||null!=t&&null!=t._isAMomentObject}function g(t){return 0>t?Math.ceil(t):Math.floor(t)}function y(t){var e=+t,n=0;return 0!==e&&isFinite(e)&&(n=g(e)),n}function p(t,e,n){var i,s=Math.min(t.length,e.length),r=Math.abs(t.length-e.length),o=0;for(i=0;s>i;i++)(n&&t[i]!==e[i]||!n&&y(t[i])!==y(e[i]))&&o++;return o+r}function v(){}function D(t){return t?t.toLowerCase().replace("_","-"):t}function S(t){for(var e,n,i,s,r=0;r<t.length;){for(s=D(t[r]).split("-"),e=s.length,n=D(t[r+1]),n=n?n.split("-"):null;e>0;){if(i=w(s.slice(0,e).join("-")))return i;if(n&&n.length>=e&&p(s,n,!0)>=e-1)break;e--}r++}return null}function w(t){var e=null;if(!$i[t]&&"undefined"!=typeof module&&module&&module.exports)try{e=Ji._abbr,require("./locale/"+t),M(e)}catch(n){}return $i[t]}function M(t,e){var n;return t&&(n=h(e)?T(t):Y(t,e),n&&(Ji=n)),Ji._abbr}function Y(t,e){return null!==e?(e.abbr=t,$i[t]=$i[t]||new v,$i[t].set(e),M(t),$i[t]):(delete $i[t],null)}function T(t){var e;if(t&&t._locale&&t._locale._abbr&&(t=t._locale._abbr),!t)return Ji;if(!n(t)){if(e=w(t))return e;t=[t]}return S(t)}function k(t,e){var n=t.toLowerCase();Qi[n]=Qi[n+"s"]=Qi[e]=t}function O(t){return"string"==typeof t?Qi[t]||Qi[t.toLowerCase()]:void 0}function b(t){var e,n,i={};for(n in t)r(t,n)&&(e=O(n),e&&(i[e]=t[n]));return i}function C(t){return t instanceof Function||"[object Function]"===Object.prototype.toString.call(t)}function R(e,n){return function(i){return null!=i?(W(this,e,i),t.updateOffset(this,n),this):x(this,e)}}function x(t,e){return t.isValid()?t._d["get"+(t._isUTC?"UTC":"")+e]():0/0}function W(t,e,n){t.isValid()&&t._d["set"+(t._isUTC?"UTC":"")+e](n)}function V(t,e){var n;if("object"==typeof t)for(n in t)this.set(n,t[n]);else if(t=O(t),C(this[t]))return this[t](e);return this}function E(t,e,n){var i=""+Math.abs(t),s=e-i.length,r=t>=0;return(r?n?"+":"":"-")+Math.pow(10,Math.max(0,s)).toString().substr(1)+i}function G(t,e,n,i){var s=i;"string"==typeof i&&(s=function(){return this[i]()}),t&&(ns[t]=s),e&&(ns[e[0]]=function(){return E(s.apply(this,arguments),e[1],e[2])}),n&&(ns[n]=function(){return this.localeData().ordinal(s.apply(this,arguments),t)})}function U(t){return t.match(/\[[\s\S]/)?t.replace(/^\[|\]$/g,""):t.replace(/\\/g,"")}function I(t){var e,n,i=t.match(Ki);for(e=0,n=i.length;n>e;e++)i[e]=ns[i[e]]?ns[i[e]]:U(i[e]);return function(s){var r="";for(e=0;n>e;e++)r+=i[e]instanceof Function?i[e].call(s,t):i[e];return r}}function F(t,e){return t.isValid()?(e=H(e,t.localeData()),es[e]=es[e]||I(e),es[e](t)):t.localeData().invalidDate()}function H(t,e){function n(t){return e.longDateFormat(t)||t}var i=5;for(ts.lastIndex=0;i>=0&&ts.test(t);)t=t.replace(ts,n),ts.lastIndex=0,i-=1;return t}function P(t,e,n){Ds[t]=C(e)?e:function(t){return t&&n?n:e}}function L(t,e){return r(Ds,t)?Ds[t](e._strict,e._locale):new RegExp(A(t))}function A(t){return N(t.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(t,e,n,i,s){return e||n||i||s}))}function N(t){return t.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}function z(t,e){var n,i=e;for("string"==typeof t&&(t=[t]),"number"==typeof e&&(i=function(t,n){n[e]=y(t)}),n=0;n<t.length;n++)Ss[t[n]]=i}function j(t,e){z(t,function(t,n,i,s){i._w=i._w||{},e(t,i._w,i,s)})}function Z(t,e,n){null!=e&&r(Ss,t)&&Ss[t](e,n._a,n,t)}function q(t,e){return new Date(Date.UTC(t,e+1,0)).getUTCDate()}function J(t,e){return n(this._months)?this._months[t.month()]:this._months[xs.test(e)?"format":"standalone"][t.month()]}function B(t,e){return n(this._monthsShort)?this._monthsShort[t.month()]:this._monthsShort[xs.test(e)?"format":"standalone"][t.month()]}function X(t,e,n){var i,s,r;for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),i=0;12>i;i++){if(s=a([2e3,i]),n&&!this._longMonthsParse[i]&&(this._longMonthsParse[i]=new RegExp("^"+this.months(s,"").replace(".","")+"$","i"),this._shortMonthsParse[i]=new RegExp("^"+this.monthsShort(s,"").replace(".","")+"$","i")),n||this._monthsParse[i]||(r="^"+this.months(s,"")+"|^"+this.monthsShort(s,""),this._monthsParse[i]=new RegExp(r.replace(".",""),"i")),n&&"MMMM"===e&&this._longMonthsParse[i].test(t))return i;if(n&&"MMM"===e&&this._shortMonthsParse[i].test(t))return i;if(!n&&this._monthsParse[i].test(t))return i}}function $(t,e){var n;return t.isValid()?"string"==typeof e&&(e=t.localeData().monthsParse(e),"number"!=typeof e)?t:(n=Math.min(t.date(),q(t.year(),e)),t._d["set"+(t._isUTC?"UTC":"")+"Month"](e,n),t):t}function Q(e){return null!=e?($(this,e),t.updateOffset(this,!0),this):x(this,"Month")}function K(){return q(this.year(),this.month())}function te(t){return this._monthsParseExact?(r(this,"_monthsRegex")||ne.call(this),t?this._monthsShortStrictRegex:this._monthsShortRegex):this._monthsShortStrictRegex&&t?this._monthsShortStrictRegex:this._monthsShortRegex}function ee(t){return this._monthsParseExact?(r(this,"_monthsRegex")||ne.call(this),t?this._monthsStrictRegex:this._monthsRegex):this._monthsStrictRegex&&t?this._monthsStrictRegex:this._monthsRegex}function ne(){function t(t,e){return e.length-t.length}var e,n,i=[],s=[],r=[];for(e=0;12>e;e++)n=a([2e3,e]),i.push(this.monthsShort(n,"")),s.push(this.months(n,"")),r.push(this.months(n,"")),r.push(this.monthsShort(n,""));for(i.sort(t),s.sort(t),r.sort(t),e=0;12>e;e++)i[e]=N(i[e]),s[e]=N(s[e]),r[e]=N(r[e]);this._monthsRegex=new RegExp("^("+r.join("|")+")","i"),this._monthsShortRegex=this._monthsRegex,this._monthsStrictRegex=new RegExp("^("+s.join("|")+")$","i"),this._monthsShortStrictRegex=new RegExp("^("+i.join("|")+")$","i")}function ie(t){var e,n=t._a;return n&&-2===l(t).overflow&&(e=n[Ms]<0||n[Ms]>11?Ms:n[Ys]<1||n[Ys]>q(n[ws],n[Ms])?Ys:n[Ts]<0||n[Ts]>24||24===n[Ts]&&(0!==n[ks]||0!==n[Os]||0!==n[bs])?Ts:n[ks]<0||n[ks]>59?ks:n[Os]<0||n[Os]>59?Os:n[bs]<0||n[bs]>999?bs:-1,l(t)._overflowDayOfYear&&(ws>e||e>Ys)&&(e=Ys),l(t)._overflowWeeks&&-1===e&&(e=Cs),l(t)._overflowWeekday&&-1===e&&(e=Rs),l(t).overflow=e),t}function se(e){t.suppressDeprecationWarnings===!1&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+e)}function re(t,e){var n=!0;return o(function(){return n&&(se(t+"\nArguments: "+Array.prototype.slice.call(arguments).join(", ")+"\n"+(new Error).stack),n=!1),e.apply(this,arguments)},e)}function oe(t,e){Us[t]||(se(e),Us[t]=!0)}function ae(t){var e,n,i,s,r,o,a=t._i,u=Is.exec(a)||Fs.exec(a);if(u){for(l(t).iso=!0,e=0,n=Ps.length;n>e;e++)if(Ps[e][1].exec(u[1])){s=Ps[e][0],i=Ps[e][2]!==!1;break}if(null==s)return t._isValid=!1,void 0;if(u[3]){for(e=0,n=Ls.length;n>e;e++)if(Ls[e][1].exec(u[3])){r=(u[2]||" ")+Ls[e][0];break}if(null==r)return t._isValid=!1,void 0}if(!i&&null!=r)return t._isValid=!1,void 0;if(u[4]){if(!Hs.exec(u[4]))return t._isValid=!1,void 0;o="Z"}t._f=s+(r||"")+(o||""),we(t)}else t._isValid=!1}function ue(e){var n=As.exec(e._i);return null!==n?(e._d=new Date(+n[1]),void 0):(ae(e),e._isValid===!1&&(delete e._isValid,t.createFromInputFallback(e)),void 0)}function le(t,e,n,i,s,r,o){var a=new Date(t,e,n,i,s,r,o);return 100>t&&t>=0&&isFinite(a.getFullYear())&&a.setFullYear(t),a}function de(t){var e=new Date(Date.UTC.apply(null,arguments));return 100>t&&t>=0&&isFinite(e.getUTCFullYear())&&e.setUTCFullYear(t),e}function ce(t){return he(t)?366:365}function he(t){return t%4===0&&t%100!==0||t%400===0}function fe(){return he(this.year())}function me(t,e,n){var i=7+e-n,s=(7+de(t,0,i).getUTCDay()-e)%7;return-s+i-1}function _e(t,e,n,i,s){var r,o,a=(7+n-i)%7,u=me(t,i,s),l=1+7*(e-1)+a+u;return 0>=l?(r=t-1,o=ce(r)+l):l>ce(t)?(r=t+1,o=l-ce(t)):(r=t,o=l),{year:r,dayOfYear:o}}function ge(t,e,n){var i,s,r=me(t.year(),e,n),o=Math.floor((t.dayOfYear()-r-1)/7)+1;return 1>o?(s=t.year()-1,i=o+ye(s,e,n)):o>ye(t.year(),e,n)?(i=o-ye(t.year(),e,n),s=t.year()+1):(s=t.year(),i=o),{week:i,year:s}}function ye(t,e,n){var i=me(t,e,n),s=me(t+1,e,n);return(ce(t)-i+s)/7}function pe(t,e,n){return null!=t?t:null!=e?e:n}function ve(e){var n=new Date(t.now());return e._useUTC?[n.getUTCFullYear(),n.getUTCMonth(),n.getUTCDate()]:[n.getFullYear(),n.getMonth(),n.getDate()]}function De(t){var e,n,i,s,r=[];if(!t._d){for(i=ve(t),t._w&&null==t._a[Ys]&&null==t._a[Ms]&&Se(t),t._dayOfYear&&(s=pe(t._a[ws],i[ws]),t._dayOfYear>ce(s)&&(l(t)._overflowDayOfYear=!0),n=de(s,0,t._dayOfYear),t._a[Ms]=n.getUTCMonth(),t._a[Ys]=n.getUTCDate()),e=0;3>e&&null==t._a[e];++e)t._a[e]=r[e]=i[e];for(;7>e;e++)t._a[e]=r[e]=null==t._a[e]?2===e?1:0:t._a[e];24===t._a[Ts]&&0===t._a[ks]&&0===t._a[Os]&&0===t._a[bs]&&(t._nextDay=!0,t._a[Ts]=0),t._d=(t._useUTC?de:le).apply(null,r),null!=t._tzm&&t._d.setUTCMinutes(t._d.getUTCMinutes()-t._tzm),t._nextDay&&(t._a[Ts]=24)}}function Se(t){var e,n,i,s,r,o,a,u;e=t._w,null!=e.GG||null!=e.W||null!=e.E?(r=1,o=4,n=pe(e.GG,t._a[ws],ge(Re(),1,4).year),i=pe(e.W,1),s=pe(e.E,1),(1>s||s>7)&&(u=!0)):(r=t._locale._week.dow,o=t._locale._week.doy,n=pe(e.gg,t._a[ws],ge(Re(),r,o).year),i=pe(e.w,1),null!=e.d?(s=e.d,(0>s||s>6)&&(u=!0)):null!=e.e?(s=e.e+r,(e.e<0||e.e>6)&&(u=!0)):s=r),1>i||i>ye(n,r,o)?l(t)._overflowWeeks=!0:null!=u?l(t)._overflowWeekday=!0:(a=_e(n,i,s,r,o),t._a[ws]=a.year,t._dayOfYear=a.dayOfYear)}function we(e){if(e._f===t.ISO_8601)return ae(e),void 0;e._a=[],l(e).empty=!0;var n,i,s,r,o,a=""+e._i,u=a.length,d=0;for(s=H(e._f,e._locale).match(Ki)||[],n=0;n<s.length;n++)r=s[n],i=(a.match(L(r,e))||[])[0],i&&(o=a.substr(0,a.indexOf(i)),o.length>0&&l(e).unusedInput.push(o),a=a.slice(a.indexOf(i)+i.length),d+=i.length),ns[r]?(i?l(e).empty=!1:l(e).unusedTokens.push(r),Z(r,i,e)):e._strict&&!i&&l(e).unusedTokens.push(r);l(e).charsLeftOver=u-d,a.length>0&&l(e).unusedInput.push(a),l(e).bigHour===!0&&e._a[Ts]<=12&&e._a[Ts]>0&&(l(e).bigHour=void 0),e._a[Ts]=Me(e._locale,e._a[Ts],e._meridiem),De(e),ie(e)}function Me(t,e,n){var i;return null==n?e:null!=t.meridiemHour?t.meridiemHour(e,n):null!=t.isPM?(i=t.isPM(n),i&&12>e&&(e+=12),i||12!==e||(e=0),e):e}function Ye(t){var e,n,i,s,r;if(0===t._f.length)return l(t).invalidFormat=!0,t._d=new Date(0/0),void 0;for(s=0;s<t._f.length;s++)r=0,e=f({},t),null!=t._useUTC&&(e._useUTC=t._useUTC),e._f=t._f[s],we(e),d(e)&&(r+=l(e).charsLeftOver,r+=10*l(e).unusedTokens.length,l(e).score=r,(null==i||i>r)&&(i=r,n=e));o(t,n||e)}function Te(t){if(!t._d){var e=b(t._i);t._a=s([e.year,e.month,e.day||e.date,e.hour,e.minute,e.second,e.millisecond],function(t){return t&&parseInt(t,10)}),De(t)}}function ke(t){var e=new m(ie(Oe(t)));return e._nextDay&&(e.add(1,"d"),e._nextDay=void 0),e}function Oe(t){var e=t._i,s=t._f;return t._locale=t._locale||T(t._l),null===e||void 0===s&&""===e?c({nullInput:!0}):("string"==typeof e&&(t._i=e=t._locale.preparse(e)),_(e)?new m(ie(e)):(n(s)?Ye(t):s?we(t):i(e)?t._d=e:be(t),d(t)||(t._d=null),t))}function be(e){var r=e._i;void 0===r?e._d=new Date(t.now()):i(r)?e._d=new Date(+r):"string"==typeof r?ue(e):n(r)?(e._a=s(r.slice(0),function(t){return parseInt(t,10)}),De(e)):"object"==typeof r?Te(e):"number"==typeof r?e._d=new Date(r):t.createFromInputFallback(e)}function Ce(t,e,n,i,s){var r={};return"boolean"==typeof n&&(i=n,n=void 0),r._isAMomentObject=!0,r._useUTC=r._isUTC=s,r._l=n,r._i=t,r._f=e,r._strict=i,ke(r)}function Re(t,e,n,i){return Ce(t,e,n,i,!1)}function xe(t,e){var i,s;if(1===e.length&&n(e[0])&&(e=e[0]),!e.length)return Re();for(i=e[0],s=1;s<e.length;++s)(!e[s].isValid()||e[s][t](i))&&(i=e[s]);return i}function We(){var t=[].slice.call(arguments,0);return xe("isBefore",t)}function Ve(){var t=[].slice.call(arguments,0);return xe("isAfter",t)}function Ee(t){var e=b(t),n=e.year||0,i=e.quarter||0,s=e.month||0,r=e.week||0,o=e.day||0,a=e.hour||0,u=e.minute||0,l=e.second||0,d=e.millisecond||0;this._milliseconds=+d+1e3*l+6e4*u+36e5*a,this._days=+o+7*r,this._months=+s+3*i+12*n,this._data={},this._locale=T(),this._bubble()}function Ge(t){return t instanceof Ee}function Ue(t,e){G(t,0,0,function(){var t=this.utcOffset(),n="+";return 0>t&&(t=-t,n="-"),n+E(~~(t/60),2)+e+E(~~t%60,2)})}function Ie(t,e){var n=(e||"").match(t)||[],i=n[n.length-1]||[],s=(i+"").match(qs)||["-",0,0],r=+(60*s[1])+y(s[2]);return"+"===s[0]?r:-r}function Fe(e,n){var s,r;return n._isUTC?(s=n.clone(),r=(_(e)||i(e)?+e:+Re(e))-+s,s._d.setTime(+s._d+r),t.updateOffset(s,!1),s):Re(e).local()}function He(t){return 15*-Math.round(t._d.getTimezoneOffset()/15)}function Pe(e,n){var i,s=this._offset||0;return this.isValid()?null!=e?("string"==typeof e?e=Ie(ys,e):Math.abs(e)<16&&(e=60*e),!this._isUTC&&n&&(i=He(this)),this._offset=e,this._isUTC=!0,null!=i&&this.add(i,"m"),s!==e&&(!n||this._changeInProgress?nn(this,$e(e-s,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,t.updateOffset(this,!0),this._changeInProgress=null)),this):this._isUTC?s:He(this):null!=e?this:0/0}function Le(t,e){return null!=t?("string"!=typeof t&&(t=-t),this.utcOffset(t,e),this):-this.utcOffset()}function Ae(t){return this.utcOffset(0,t)}function Ne(t){return this._isUTC&&(this.utcOffset(0,t),this._isUTC=!1,t&&this.subtract(He(this),"m")),this}function ze(){return this._tzm?this.utcOffset(this._tzm):"string"==typeof this._i&&this.utcOffset(Ie(gs,this._i)),this}function je(t){return this.isValid()?(t=t?Re(t).utcOffset():0,(this.utcOffset()-t)%60===0):!1}function Ze(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()}function qe(){if(!h(this._isDSTShifted))return this._isDSTShifted;var t={};if(f(t,this),t=Oe(t),t._a){var e=t._isUTC?a(t._a):Re(t._a);this._isDSTShifted=this.isValid()&&p(t._a,e.toArray())>0}else this._isDSTShifted=!1;return this._isDSTShifted}function Je(){return this.isValid()?!this._isUTC:!1}function Be(){return this.isValid()?this._isUTC:!1}function Xe(){return this.isValid()?this._isUTC&&0===this._offset:!1}function $e(t,e){var n,i,s,o=t,a=null;return Ge(t)?o={ms:t._milliseconds,d:t._days,M:t._months}:"number"==typeof t?(o={},e?o[e]=t:o.milliseconds=t):(a=Js.exec(t))?(n="-"===a[1]?-1:1,o={y:0,d:y(a[Ys])*n,h:y(a[Ts])*n,m:y(a[ks])*n,s:y(a[Os])*n,ms:y(a[bs])*n}):(a=Bs.exec(t))?(n="-"===a[1]?-1:1,o={y:Qe(a[2],n),M:Qe(a[3],n),d:Qe(a[4],n),h:Qe(a[5],n),m:Qe(a[6],n),s:Qe(a[7],n),w:Qe(a[8],n)}):null==o?o={}:"object"==typeof o&&("from"in o||"to"in o)&&(s=tn(Re(o.from),Re(o.to)),o={},o.ms=s.milliseconds,o.M=s.months),i=new Ee(o),Ge(t)&&r(t,"_locale")&&(i._locale=t._locale),i}function Qe(t,e){var n=t&&parseFloat(t.replace(",","."));return(isNaN(n)?0:n)*e}function Ke(t,e){var n={milliseconds:0,months:0};return n.months=e.month()-t.month()+12*(e.year()-t.year()),t.clone().add(n.months,"M").isAfter(e)&&--n.months,n.milliseconds=+e-+t.clone().add(n.months,"M"),n}function tn(t,e){var n;return t.isValid()&&e.isValid()?(e=Fe(e,t),t.isBefore(e)?n=Ke(t,e):(n=Ke(e,t),n.milliseconds=-n.milliseconds,n.months=-n.months),n):{milliseconds:0,months:0}}function en(t,e){return function(n,i){var s,r;return null===i||isNaN(+i)||(oe(e,"moment()."+e+"(period, number) is deprecated. Please use moment()."+e+"(number, period)."),r=n,n=i,i=r),n="string"==typeof n?+n:n,s=$e(n,i),nn(this,s,t),this}}function nn(e,n,i,s){var r=n._milliseconds,o=n._days,a=n._months;e.isValid()&&(s=null==s?!0:s,r&&e._d.setTime(+e._d+r*i),o&&W(e,"Date",x(e,"Date")+o*i),a&&$(e,x(e,"Month")+a*i),s&&t.updateOffset(e,o||a))}function sn(t,e){var n=t||Re(),i=Fe(n,this).startOf("day"),s=this.diff(i,"days",!0),r=-6>s?"sameElse":-1>s?"lastWeek":0>s?"lastDay":1>s?"sameDay":2>s?"nextDay":7>s?"nextWeek":"sameElse",o=e&&(C(e[r])?e[r]():e[r]);return this.format(o||this.localeData().calendar(r,this,Re(n)))}function rn(){return new m(this)}function on(t,e){var n=_(t)?t:Re(t);return this.isValid()&&n.isValid()?(e=O(h(e)?"millisecond":e),"millisecond"===e?+this>+n:+n<+this.clone().startOf(e)):!1}function an(t,e){var n=_(t)?t:Re(t);return this.isValid()&&n.isValid()?(e=O(h(e)?"millisecond":e),"millisecond"===e?+n>+this:+this.clone().endOf(e)<+n):!1}function un(t,e,n){return this.isAfter(t,n)&&this.isBefore(e,n)}function ln(t,e){var n,i=_(t)?t:Re(t);return this.isValid()&&i.isValid()?(e=O(e||"millisecond"),"millisecond"===e?+this===+i:(n=+i,+this.clone().startOf(e)<=n&&n<=+this.clone().endOf(e))):!1}function dn(t,e){return this.isSame(t,e)||this.isAfter(t,e)}function cn(t,e){return this.isSame(t,e)||this.isBefore(t,e)}function hn(t,e,n){var i,s,r,o;return this.isValid()?(i=Fe(t,this),i.isValid()?(s=6e4*(i.utcOffset()-this.utcOffset()),e=O(e),"year"===e||"month"===e||"quarter"===e?(o=fn(this,i),"quarter"===e?o/=3:"year"===e&&(o/=12)):(r=this-i,o="second"===e?r/1e3:"minute"===e?r/6e4:"hour"===e?r/36e5:"day"===e?(r-s)/864e5:"week"===e?(r-s)/6048e5:r),n?o:g(o)):0/0):0/0}function fn(t,e){var n,i,s=12*(e.year()-t.year())+(e.month()-t.month()),r=t.clone().add(s,"months");return 0>e-r?(n=t.clone().add(s-1,"months"),i=(e-r)/(r-n)):(n=t.clone().add(s+1,"months"),i=(e-r)/(n-r)),-(s+i)}function mn(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")}function _n(){var t=this.clone().utc();return 0<t.year()&&t.year()<=9999?C(Date.prototype.toISOString)?this.toDate().toISOString():F(t,"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]"):F(t,"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]")}function gn(e){var n=F(this,e||t.defaultFormat);return this.localeData().postformat(n)}function yn(t,e){return this.isValid()&&(_(t)&&t.isValid()||Re(t).isValid())?$e({to:this,from:t}).locale(this.locale()).humanize(!e):this.localeData().invalidDate()}function pn(t){return this.from(Re(),t)}function vn(t,e){return this.isValid()&&(_(t)&&t.isValid()||Re(t).isValid())?$e({from:this,to:t}).locale(this.locale()).humanize(!e):this.localeData().invalidDate()}function Dn(t){return this.to(Re(),t)}function Sn(t){var e;return void 0===t?this._locale._abbr:(e=T(t),null!=e&&(this._locale=e),this)}function wn(){return this._locale}function Mn(t){switch(t=O(t)){case"year":this.month(0);case"quarter":case"month":this.date(1);case"week":case"isoWeek":case"day":this.hours(0);case"hour":this.minutes(0);case"minute":this.seconds(0);case"second":this.milliseconds(0)}return"week"===t&&this.weekday(0),"isoWeek"===t&&this.isoWeekday(1),"quarter"===t&&this.month(3*Math.floor(this.month()/3)),this}function Yn(t){return t=O(t),void 0===t||"millisecond"===t?this:this.startOf(t).add(1,"isoWeek"===t?"week":t).subtract(1,"ms")}function Tn(){return+this._d-6e4*(this._offset||0)}function kn(){return Math.floor(+this/1e3)}function On(){return this._offset?new Date(+this):this._d}function bn(){var t=this;return[t.year(),t.month(),t.date(),t.hour(),t.minute(),t.second(),t.millisecond()]}function Cn(){var t=this;return{years:t.year(),months:t.month(),date:t.date(),hours:t.hours(),minutes:t.minutes(),seconds:t.seconds(),milliseconds:t.milliseconds()}}function Rn(){return this.isValid()?this.toISOString():"null"}function xn(){return d(this)}function Wn(){return o({},l(this))}function Vn(){return l(this).overflow}function En(){return{input:this._i,format:this._f,locale:this._locale,isUTC:this._isUTC,strict:this._strict}}function Gn(t,e){G(0,[t,t.length],0,e)}function Un(t){return Pn.call(this,t,this.week(),this.weekday(),this.localeData()._week.dow,this.localeData()._week.doy)}function In(t){return Pn.call(this,t,this.isoWeek(),this.isoWeekday(),1,4)}function Fn(){return ye(this.year(),1,4)}function Hn(){var t=this.localeData()._week;return ye(this.year(),t.dow,t.doy)}function Pn(t,e,n,i,s){var r;return null==t?ge(this,i,s).year:(r=ye(t,i,s),e>r&&(e=r),Ln.call(this,t,e,n,i,s))}function Ln(t,e,n,i,s){var r=_e(t,e,n,i,s),o=de(r.year,0,r.dayOfYear);return this.year(o.getUTCFullYear()),this.month(o.getUTCMonth()),this.date(o.getUTCDate()),this}function An(t){return null==t?Math.ceil((this.month()+1)/3):this.month(3*(t-1)+this.month()%3)}function Nn(t){return ge(t,this._week.dow,this._week.doy).week}function zn(){return this._week.dow}function jn(){return this._week.doy}function Zn(t){var e=this.localeData().week(this);return null==t?e:this.add(7*(t-e),"d")}function qn(t){var e=ge(this,1,4).week;return null==t?e:this.add(7*(t-e),"d")}function Jn(t,e){return"string"!=typeof t?t:isNaN(t)?(t=e.weekdaysParse(t),"number"==typeof t?t:null):parseInt(t,10)}function Bn(t,e){return n(this._weekdays)?this._weekdays[t.day()]:this._weekdays[this._weekdays.isFormat.test(e)?"format":"standalone"][t.day()]}function Xn(t){return this._weekdaysShort[t.day()]}function $n(t){return this._weekdaysMin[t.day()]}function Qn(t,e,n){var i,s,r;for(this._weekdaysParse||(this._weekdaysParse=[],this._minWeekdaysParse=[],this._shortWeekdaysParse=[],this._fullWeekdaysParse=[]),i=0;7>i;i++){if(s=Re([2e3,1]).day(i),n&&!this._fullWeekdaysParse[i]&&(this._fullWeekdaysParse[i]=new RegExp("^"+this.weekdays(s,"").replace(".",".?")+"$","i"),this._shortWeekdaysParse[i]=new RegExp("^"+this.weekdaysShort(s,"").replace(".",".?")+"$","i"),this._minWeekdaysParse[i]=new RegExp("^"+this.weekdaysMin(s,"").replace(".",".?")+"$","i")),this._weekdaysParse[i]||(r="^"+this.weekdays(s,"")+"|^"+this.weekdaysShort(s,"")+"|^"+this.weekdaysMin(s,""),this._weekdaysParse[i]=new RegExp(r.replace(".",""),"i")),n&&"dddd"===e&&this._fullWeekdaysParse[i].test(t))return i;if(n&&"ddd"===e&&this._shortWeekdaysParse[i].test(t))return i;if(n&&"dd"===e&&this._minWeekdaysParse[i].test(t))return i;if(!n&&this._weekdaysParse[i].test(t))return i}}function Kn(t){if(!this.isValid())return null!=t?this:0/0;var e=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=t?(t=Jn(t,this.localeData()),this.add(t-e,"d")):e}function ti(t){if(!this.isValid())return null!=t?this:0/0;var e=(this.day()+7-this.localeData()._week.dow)%7;return null==t?e:this.add(t-e,"d")}function ei(t){return this.isValid()?null==t?this.day()||7:this.day(this.day()%7?t:t-7):null!=t?this:0/0}function ni(t){var e=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return null==t?e:this.add(t-e,"d")}function ii(){return this.hours()%12||12}function si(t,e){G(t,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),e)})}function ri(t,e){return e._meridiemParse}function oi(t){return"p"===(t+"").toLowerCase().charAt(0)}function ai(t,e,n){return t>11?n?"pm":"PM":n?"am":"AM"}function ui(t,e){e[bs]=y(1e3*("0."+t))}function li(){return this._isUTC?"UTC":""}function di(){return this._isUTC?"Coordinated Universal Time":""}function ci(t){return Re(1e3*t)}function hi(){return Re.apply(null,arguments).parseZone()}function fi(t,e,n){var i=this._calendar[t];return C(i)?i.call(e,n):i}function mi(t){var e=this._longDateFormat[t],n=this._longDateFormat[t.toUpperCase()];return e||!n?e:(this._longDateFormat[t]=n.replace(/MMMM|MM|DD|dddd/g,function(t){return t.slice(1)}),this._longDateFormat[t])}function _i(){return this._invalidDate}function gi(t){return this._ordinal.replace("%d",t)}function yi(t){return t}function pi(t,e,n,i){var s=this._relativeTime[n];return C(s)?s(t,e,n,i):s.replace(/%d/i,t)}function vi(t,e){var n=this._relativeTime[t>0?"future":"past"];return C(n)?n(e):n.replace(/%s/i,e)}function Di(t){var e,n;for(n in t)e=t[n],C(e)?this[n]=e:this["_"+n]=e;this._ordinalParseLenient=new RegExp(this._ordinalParse.source+"|"+/\d{1,2}/.source)}function Si(t,e,n,i){var s=T(),r=a().set(i,e);return s[n](r,t)}function wi(t,e,n,i,s){if("number"==typeof t&&(e=t,t=void 0),t=t||"",null!=e)return Si(t,e,n,s);var r,o=[];for(r=0;i>r;r++)o[r]=Si(t,r,n,s);return o}function Mi(t,e){return wi(t,e,"months",12,"month")}function Yi(t,e){return wi(t,e,"monthsShort",12,"month")}function Ti(t,e){return wi(t,e,"weekdays",7,"day")}function ki(t,e){return wi(t,e,"weekdaysShort",7,"day")}function Oi(t,e){return wi(t,e,"weekdaysMin",7,"day")}function bi(){var t=this._data;return this._milliseconds=vr(this._milliseconds),this._days=vr(this._days),this._months=vr(this._months),t.milliseconds=vr(t.milliseconds),t.seconds=vr(t.seconds),t.minutes=vr(t.minutes),t.hours=vr(t.hours),t.months=vr(t.months),t.years=vr(t.years),this}function Ci(t,e,n,i){var s=$e(e,n);return t._milliseconds+=i*s._milliseconds,t._days+=i*s._days,t._months+=i*s._months,t._bubble()}function Ri(t,e){return Ci(this,t,e,1)}function xi(t,e){return Ci(this,t,e,-1)}function Wi(t){return 0>t?Math.floor(t):Math.ceil(t)}function Vi(){var t,e,n,i,s,r=this._milliseconds,o=this._days,a=this._months,u=this._data;return r>=0&&o>=0&&a>=0||0>=r&&0>=o&&0>=a||(r+=864e5*Wi(Gi(a)+o),o=0,a=0),u.milliseconds=r%1e3,t=g(r/1e3),u.seconds=t%60,e=g(t/60),u.minutes=e%60,n=g(e/60),u.hours=n%24,o+=g(n/24),s=g(Ei(o)),a+=s,o-=Wi(Gi(s)),i=g(a/12),a%=12,u.days=o,u.months=a,u.years=i,this}function Ei(t){return 4800*t/146097}function Gi(t){return 146097*t/4800}function Ui(t){var e,n,i=this._milliseconds;
if(t=O(t),"month"===t||"year"===t)return e=this._days+i/864e5,n=this._months+Ei(e),"month"===t?n:n/12;switch(e=this._days+Math.round(Gi(this._months)),t){case"week":return e/7+i/6048e5;case"day":return e+i/864e5;case"hour":return 24*e+i/36e5;case"minute":return 1440*e+i/6e4;case"second":return 86400*e+i/1e3;case"millisecond":return Math.floor(864e5*e)+i;default:throw new Error("Unknown unit "+t)}}function Ii(){return this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*y(this._months/12)}function Fi(t){return function(){return this.as(t)}}function Hi(t){return t=O(t),this[t+"s"]()}function Pi(t){return function(){return this._data[t]}}function Li(){return g(this.days()/7)}function Ai(t,e,n,i,s){return s.relativeTime(e||1,!!n,t,i)}function Ni(t,e,n){var i=$e(t).abs(),s=Gr(i.as("s")),r=Gr(i.as("m")),o=Gr(i.as("h")),a=Gr(i.as("d")),u=Gr(i.as("M")),l=Gr(i.as("y")),d=s<Ur.s&&["s",s]||1>=r&&["m"]||r<Ur.m&&["mm",r]||1>=o&&["h"]||o<Ur.h&&["hh",o]||1>=a&&["d"]||a<Ur.d&&["dd",a]||1>=u&&["M"]||u<Ur.M&&["MM",u]||1>=l&&["y"]||["yy",l];return d[2]=e,d[3]=+t>0,d[4]=n,Ai.apply(null,d)}function zi(t,e){return void 0===Ur[t]?!1:void 0===e?Ur[t]:(Ur[t]=e,!0)}function ji(t){var e=this.localeData(),n=Ni(this,!t,e);return t&&(n=e.pastFuture(+this,n)),e.postformat(n)}function Zi(){var t,e,n,i=Ir(this._milliseconds)/1e3,s=Ir(this._days),r=Ir(this._months);t=g(i/60),e=g(t/60),i%=60,t%=60,n=g(r/12),r%=12;var o=n,a=r,u=s,l=e,d=t,c=i,h=this.asSeconds();return h?(0>h?"-":"")+"P"+(o?o+"Y":"")+(a?a+"M":"")+(u?u+"D":"")+(l||d||c?"T":"")+(l?l+"H":"")+(d?d+"M":"")+(c?c+"S":""):"P0D"}var qi,Ji,Bi=t.momentProperties=[],Xi=!1,$i={},Qi={},Ki=/(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,ts=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,es={},ns={},is=/\d/,ss=/\d\d/,rs=/\d{3}/,os=/\d{4}/,as=/[+-]?\d{6}/,us=/\d\d?/,ls=/\d\d\d\d?/,ds=/\d\d\d\d\d\d?/,cs=/\d{1,3}/,hs=/\d{1,4}/,fs=/[+-]?\d{1,6}/,ms=/\d+/,_s=/[+-]?\d+/,gs=/Z|[+-]\d\d:?\d\d/gi,ys=/Z|[+-]\d\d(?::?\d\d)?/gi,ps=/[+-]?\d+(\.\d{1,3})?/,vs=/[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i,Ds={},Ss={},ws=0,Ms=1,Ys=2,Ts=3,ks=4,Os=5,bs=6,Cs=7,Rs=8;G("M",["MM",2],"Mo",function(){return this.month()+1}),G("MMM",0,0,function(t){return this.localeData().monthsShort(this,t)}),G("MMMM",0,0,function(t){return this.localeData().months(this,t)}),k("month","M"),P("M",us),P("MM",us,ss),P("MMM",function(t,e){return e.monthsShortRegex(t)}),P("MMMM",function(t,e){return e.monthsRegex(t)}),z(["M","MM"],function(t,e){e[Ms]=y(t)-1}),z(["MMM","MMMM"],function(t,e,n,i){var s=n._locale.monthsParse(t,i,n._strict);null!=s?e[Ms]=s:l(n).invalidMonth=t});var xs=/D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/,Ws="January_February_March_April_May_June_July_August_September_October_November_December".split("_"),Vs="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),Es=vs,Gs=vs,Us={};t.suppressDeprecationWarnings=!1;var Is=/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/,Fs=/^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/,Hs=/Z|[+-]\d\d(?::?\d\d)?/,Ps=[["YYYYYY-MM-DD",/[+-]\d{6}-\d\d-\d\d/],["YYYY-MM-DD",/\d{4}-\d\d-\d\d/],["GGGG-[W]WW-E",/\d{4}-W\d\d-\d/],["GGGG-[W]WW",/\d{4}-W\d\d/,!1],["YYYY-DDD",/\d{4}-\d{3}/],["YYYY-MM",/\d{4}-\d\d/,!1],["YYYYYYMMDD",/[+-]\d{10}/],["YYYYMMDD",/\d{8}/],["GGGG[W]WWE",/\d{4}W\d{3}/],["GGGG[W]WW",/\d{4}W\d{2}/,!1],["YYYYDDD",/\d{7}/]],Ls=[["HH:mm:ss.SSSS",/\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss,SSSS",/\d\d:\d\d:\d\d,\d+/],["HH:mm:ss",/\d\d:\d\d:\d\d/],["HH:mm",/\d\d:\d\d/],["HHmmss.SSSS",/\d\d\d\d\d\d\.\d+/],["HHmmss,SSSS",/\d\d\d\d\d\d,\d+/],["HHmmss",/\d\d\d\d\d\d/],["HHmm",/\d\d\d\d/],["HH",/\d\d/]],As=/^\/?Date\((\-?\d+)/i;t.createFromInputFallback=re("moment construction falls back to js Date. This is discouraged and will be removed in upcoming major release. Please refer to https://github.com/moment/moment/issues/1407 for more info.",function(t){t._d=new Date(t._i+(t._useUTC?" UTC":""))}),G("Y",0,0,function(){var t=this.year();return 9999>=t?""+t:"+"+t}),G(0,["YY",2],0,function(){return this.year()%100}),G(0,["YYYY",4],0,"year"),G(0,["YYYYY",5],0,"year"),G(0,["YYYYYY",6,!0],0,"year"),k("year","y"),P("Y",_s),P("YY",us,ss),P("YYYY",hs,os),P("YYYYY",fs,as),P("YYYYYY",fs,as),z(["YYYYY","YYYYYY"],ws),z("YYYY",function(e,n){n[ws]=2===e.length?t.parseTwoDigitYear(e):y(e)}),z("YY",function(e,n){n[ws]=t.parseTwoDigitYear(e)}),z("Y",function(t,e){e[ws]=parseInt(t,10)}),t.parseTwoDigitYear=function(t){return y(t)+(y(t)>68?1900:2e3)};var Ns=R("FullYear",!1);t.ISO_8601=function(){};var zs=re("moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548",function(){var t=Re.apply(null,arguments);return this.isValid()&&t.isValid()?this>t?this:t:c()}),js=re("moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548",function(){var t=Re.apply(null,arguments);return this.isValid()&&t.isValid()?t>this?this:t:c()}),Zs=function(){return Date.now?Date.now():+new Date};Ue("Z",":"),Ue("ZZ",""),P("Z",ys),P("ZZ",ys),z(["Z","ZZ"],function(t,e,n){n._useUTC=!0,n._tzm=Ie(ys,t)});var qs=/([\+\-]|\d\d)/gi;t.updateOffset=function(){};var Js=/(\-)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/,Bs=/^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/;$e.fn=Ee.prototype;var Xs=en(1,"add"),$s=en(-1,"subtract");t.defaultFormat="YYYY-MM-DDTHH:mm:ssZ";var Qs=re("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",function(t){return void 0===t?this.localeData():this.locale(t)});G(0,["gg",2],0,function(){return this.weekYear()%100}),G(0,["GG",2],0,function(){return this.isoWeekYear()%100}),Gn("gggg","weekYear"),Gn("ggggg","weekYear"),Gn("GGGG","isoWeekYear"),Gn("GGGGG","isoWeekYear"),k("weekYear","gg"),k("isoWeekYear","GG"),P("G",_s),P("g",_s),P("GG",us,ss),P("gg",us,ss),P("GGGG",hs,os),P("gggg",hs,os),P("GGGGG",fs,as),P("ggggg",fs,as),j(["gggg","ggggg","GGGG","GGGGG"],function(t,e,n,i){e[i.substr(0,2)]=y(t)}),j(["gg","GG"],function(e,n,i,s){n[s]=t.parseTwoDigitYear(e)}),G("Q",0,"Qo","quarter"),k("quarter","Q"),P("Q",is),z("Q",function(t,e){e[Ms]=3*(y(t)-1)}),G("w",["ww",2],"wo","week"),G("W",["WW",2],"Wo","isoWeek"),k("week","w"),k("isoWeek","W"),P("w",us),P("ww",us,ss),P("W",us),P("WW",us,ss),j(["w","ww","W","WW"],function(t,e,n,i){e[i.substr(0,1)]=y(t)});var Ks={dow:0,doy:6};G("D",["DD",2],"Do","date"),k("date","D"),P("D",us),P("DD",us,ss),P("Do",function(t,e){return t?e._ordinalParse:e._ordinalParseLenient}),z(["D","DD"],Ys),z("Do",function(t,e){e[Ys]=y(t.match(us)[0],10)});var tr=R("Date",!0);G("d",0,"do","day"),G("dd",0,0,function(t){return this.localeData().weekdaysMin(this,t)}),G("ddd",0,0,function(t){return this.localeData().weekdaysShort(this,t)}),G("dddd",0,0,function(t){return this.localeData().weekdays(this,t)}),G("e",0,0,"weekday"),G("E",0,0,"isoWeekday"),k("day","d"),k("weekday","e"),k("isoWeekday","E"),P("d",us),P("e",us),P("E",us),P("dd",vs),P("ddd",vs),P("dddd",vs),j(["dd","ddd","dddd"],function(t,e,n,i){var s=n._locale.weekdaysParse(t,i,n._strict);null!=s?e.d=s:l(n).invalidWeekday=t}),j(["d","e","E"],function(t,e,n,i){e[i]=y(t)});var er="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),nr="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),ir="Su_Mo_Tu_We_Th_Fr_Sa".split("_");G("DDD",["DDDD",3],"DDDo","dayOfYear"),k("dayOfYear","DDD"),P("DDD",cs),P("DDDD",rs),z(["DDD","DDDD"],function(t,e,n){n._dayOfYear=y(t)}),G("H",["HH",2],0,"hour"),G("h",["hh",2],0,ii),G("hmm",0,0,function(){return""+ii.apply(this)+E(this.minutes(),2)}),G("hmmss",0,0,function(){return""+ii.apply(this)+E(this.minutes(),2)+E(this.seconds(),2)}),G("Hmm",0,0,function(){return""+this.hours()+E(this.minutes(),2)}),G("Hmmss",0,0,function(){return""+this.hours()+E(this.minutes(),2)+E(this.seconds(),2)}),si("a",!0),si("A",!1),k("hour","h"),P("a",ri),P("A",ri),P("H",us),P("h",us),P("HH",us,ss),P("hh",us,ss),P("hmm",ls),P("hmmss",ds),P("Hmm",ls),P("Hmmss",ds),z(["H","HH"],Ts),z(["a","A"],function(t,e,n){n._isPm=n._locale.isPM(t),n._meridiem=t}),z(["h","hh"],function(t,e,n){e[Ts]=y(t),l(n).bigHour=!0}),z("hmm",function(t,e,n){var i=t.length-2;e[Ts]=y(t.substr(0,i)),e[ks]=y(t.substr(i)),l(n).bigHour=!0}),z("hmmss",function(t,e,n){var i=t.length-4,s=t.length-2;e[Ts]=y(t.substr(0,i)),e[ks]=y(t.substr(i,2)),e[Os]=y(t.substr(s)),l(n).bigHour=!0}),z("Hmm",function(t,e){var n=t.length-2;e[Ts]=y(t.substr(0,n)),e[ks]=y(t.substr(n))}),z("Hmmss",function(t,e){var n=t.length-4,i=t.length-2;e[Ts]=y(t.substr(0,n)),e[ks]=y(t.substr(n,2)),e[Os]=y(t.substr(i))});var sr=/[ap]\.?m?\.?/i,rr=R("Hours",!0);G("m",["mm",2],0,"minute"),k("minute","m"),P("m",us),P("mm",us,ss),z(["m","mm"],ks);var or=R("Minutes",!1);G("s",["ss",2],0,"second"),k("second","s"),P("s",us),P("ss",us,ss),z(["s","ss"],Os);var ar=R("Seconds",!1);G("S",0,0,function(){return~~(this.millisecond()/100)}),G(0,["SS",2],0,function(){return~~(this.millisecond()/10)}),G(0,["SSS",3],0,"millisecond"),G(0,["SSSS",4],0,function(){return 10*this.millisecond()}),G(0,["SSSSS",5],0,function(){return 100*this.millisecond()}),G(0,["SSSSSS",6],0,function(){return 1e3*this.millisecond()}),G(0,["SSSSSSS",7],0,function(){return 1e4*this.millisecond()}),G(0,["SSSSSSSS",8],0,function(){return 1e5*this.millisecond()}),G(0,["SSSSSSSSS",9],0,function(){return 1e6*this.millisecond()}),k("millisecond","ms"),P("S",cs,is),P("SS",cs,ss),P("SSS",cs,rs);var ur;for(ur="SSSS";ur.length<=9;ur+="S")P(ur,ms);for(ur="S";ur.length<=9;ur+="S")z(ur,ui);var lr=R("Milliseconds",!1);G("z",0,0,"zoneAbbr"),G("zz",0,0,"zoneName");var dr=m.prototype;dr.add=Xs,dr.calendar=sn,dr.clone=rn,dr.diff=hn,dr.endOf=Yn,dr.format=gn,dr.from=yn,dr.fromNow=pn,dr.to=vn,dr.toNow=Dn,dr.get=V,dr.invalidAt=Vn,dr.isAfter=on,dr.isBefore=an,dr.isBetween=un,dr.isSame=ln,dr.isSameOrAfter=dn,dr.isSameOrBefore=cn,dr.isValid=xn,dr.lang=Qs,dr.locale=Sn,dr.localeData=wn,dr.max=js,dr.min=zs,dr.parsingFlags=Wn,dr.set=V,dr.startOf=Mn,dr.subtract=$s,dr.toArray=bn,dr.toObject=Cn,dr.toDate=On,dr.toISOString=_n,dr.toJSON=Rn,dr.toString=mn,dr.unix=kn,dr.valueOf=Tn,dr.creationData=En,dr.year=Ns,dr.isLeapYear=fe,dr.weekYear=Un,dr.isoWeekYear=In,dr.quarter=dr.quarters=An,dr.month=Q,dr.daysInMonth=K,dr.week=dr.weeks=Zn,dr.isoWeek=dr.isoWeeks=qn,dr.weeksInYear=Hn,dr.isoWeeksInYear=Fn,dr.date=tr,dr.day=dr.days=Kn,dr.weekday=ti,dr.isoWeekday=ei,dr.dayOfYear=ni,dr.hour=dr.hours=rr,dr.minute=dr.minutes=or,dr.second=dr.seconds=ar,dr.millisecond=dr.milliseconds=lr,dr.utcOffset=Pe,dr.utc=Ae,dr.local=Ne,dr.parseZone=ze,dr.hasAlignedHourOffset=je,dr.isDST=Ze,dr.isDSTShifted=qe,dr.isLocal=Je,dr.isUtcOffset=Be,dr.isUtc=Xe,dr.isUTC=Xe,dr.zoneAbbr=li,dr.zoneName=di,dr.dates=re("dates accessor is deprecated. Use date instead.",tr),dr.months=re("months accessor is deprecated. Use month instead",Q),dr.years=re("years accessor is deprecated. Use year instead",Ns),dr.zone=re("moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779",Le);var cr=dr,hr={sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},fr={LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},mr="Invalid date",_r="%d",gr=/\d{1,2}/,yr={future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},pr=v.prototype;pr._calendar=hr,pr.calendar=fi,pr._longDateFormat=fr,pr.longDateFormat=mi,pr._invalidDate=mr,pr.invalidDate=_i,pr._ordinal=_r,pr.ordinal=gi,pr._ordinalParse=gr,pr.preparse=yi,pr.postformat=yi,pr._relativeTime=yr,pr.relativeTime=pi,pr.pastFuture=vi,pr.set=Di,pr.months=J,pr._months=Ws,pr.monthsShort=B,pr._monthsShort=Vs,pr.monthsParse=X,pr._monthsRegex=Gs,pr.monthsRegex=ee,pr._monthsShortRegex=Es,pr.monthsShortRegex=te,pr.week=Nn,pr._week=Ks,pr.firstDayOfYear=jn,pr.firstDayOfWeek=zn,pr.weekdays=Bn,pr._weekdays=er,pr.weekdaysMin=$n,pr._weekdaysMin=ir,pr.weekdaysShort=Xn,pr._weekdaysShort=nr,pr.weekdaysParse=Qn,pr.isPM=oi,pr._meridiemParse=sr,pr.meridiem=ai,M("en",{ordinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(t){var e=t%10,n=1===y(t%100/10)?"th":1===e?"st":2===e?"nd":3===e?"rd":"th";return t+n}}),t.lang=re("moment.lang is deprecated. Use moment.locale instead.",M),t.langData=re("moment.langData is deprecated. Use moment.localeData instead.",T);var vr=Math.abs,Dr=Fi("ms"),Sr=Fi("s"),wr=Fi("m"),Mr=Fi("h"),Yr=Fi("d"),Tr=Fi("w"),kr=Fi("M"),Or=Fi("y"),br=Pi("milliseconds"),Cr=Pi("seconds"),Rr=Pi("minutes"),xr=Pi("hours"),Wr=Pi("days"),Vr=Pi("months"),Er=Pi("years"),Gr=Math.round,Ur={s:45,m:45,h:22,d:26,M:11},Ir=Math.abs,Fr=Ee.prototype;Fr.abs=bi,Fr.add=Ri,Fr.subtract=xi,Fr.as=Ui,Fr.asMilliseconds=Dr,Fr.asSeconds=Sr,Fr.asMinutes=wr,Fr.asHours=Mr,Fr.asDays=Yr,Fr.asWeeks=Tr,Fr.asMonths=kr,Fr.asYears=Or,Fr.valueOf=Ii,Fr._bubble=Vi,Fr.get=Hi,Fr.milliseconds=br,Fr.seconds=Cr,Fr.minutes=Rr,Fr.hours=xr,Fr.days=Wr,Fr.weeks=Li,Fr.months=Vr,Fr.years=Er,Fr.humanize=ji,Fr.toISOString=Zi,Fr.toString=Zi,Fr.toJSON=Zi,Fr.locale=Sn,Fr.localeData=wn,Fr.toIsoString=re("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",Zi),Fr.lang=Qs,G("X",0,0,"unix"),G("x",0,0,"valueOf"),P("x",_s),P("X",ps),z("X",function(t,e,n){n._d=new Date(1e3*parseFloat(t,10))}),z("x",function(t,e,n){n._d=new Date(y(t))}),t.version="2.11.1",e(Re),t.fn=cr,t.min=We,t.max=Ve,t.now=Zs,t.utc=a,t.unix=ci,t.months=Mi,t.isDate=i,t.locale=M,t.invalid=c,t.duration=$e,t.isMoment=_,t.weekdays=Ti,t.parseZone=hi,t.localeData=T,t.isDuration=Ge,t.monthsShort=Yi,t.weekdaysMin=Oi,t.defineLocale=Y,t.weekdaysShort=ki,t.normalizeUnits=O,t.relativeTimeThreshold=zi,t.prototype=cr;var Hr=t;return Hr}),"undefined"!=typeof angular&&angular.module("risevision.common.i18n.config",[]).constant("LOCALES_PREFIX","locales/translation_").constant("LOCALES_SUFIX",".json");var config={},RiseVision=RiseVision||{};RiseVision.TimeDate={},RiseVision.TimeDate=function(t){"use strict";function e(){var t=[{"class":"time-and-date",fontSetting:m.fontStyle}];RiseVision.Common.Utilities.loadFonts(t),h=m.showTime?m.timeFormat:"",h+=m.showTime&&m.showDate?" ":"",h+=m.showDate?m.dateFormat:"",c=document.createElement("p"),c.className="time-and-date",c.style.textAlign=m.fontStyle.align,document.getElementById("container").appendChild(c),n()}function n(){t.rpc.call("","rsevent_ready",null,f.getString("id"),!0,!0,!0,!0,!1)}function i(t){m=JSON.parse(JSON.stringify(t)),m.width=f.getInt("rsW"),m.height=f.getInt("rsH"),document.getElementById("container").style.width=m.width+"px",document.getElementById("container").style.height=m.height+"px",_=new RiseVision.Common.Message(document.getElementById("container"),document.getElementById("messageContainer")),e()}function s(){if(h){var t=new Date;c.innerHTML=moment(t).format(h),d=setTimeout(function(){s()},1e3)}}function r(){clearTimeout(d)}function o(){g||(l({event:"configuration",event_details:JSON.stringify(m)}),g=!0),s(),l({event:"play",event_details:h})}function a(){r()}function u(){return"time_date_events"}function l(t){RiseVision.Common.LoggerUtils.logEvent(u(),t)}var d,c,h,f=new t.Prefs,m=null,_=null,g=!1;return{pause:r,play:o,setAdditionalParams:i,stop:a,logEvent:l,getTableName:u}}(gadgets);var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.Message=function(t,e){"use strict";function n(){try{e.style.height=t.style.height}catch(n){console.warn("Can't initialize Message - ",n.message)}}function i(){if(r){for(;e.firstChild;)e.removeChild(e.firstChild);e.style.display="none",t.style.visibility="visible",r=!1}}function s(n){var i,s=document.createDocumentFragment();r?(i=e.querySelector(".message"),i.innerHTML=n):(t.style.visibility="hidden",e.style.display="block",i=document.createElement("p"),i.innerHTML=n,i.setAttribute("class","message"),s.appendChild(i),e.appendChild(s),r=!0)}var r=!1;return n(),{hide:i,show:s}},function(t,e,n){"use strict";function i(t,e){var n,i="",s="";Array.isArray(t)&&t.length>0&&Array.isArray(e)&&e.length>0&&("companyId"===t[0]&&(i=e[0]),"displayId"===t[1]&&(s=e[1]?e[1]:"preview"),RiseVision.Common.LoggerUtils.setIds(i,s),"additionalParams"===t[2]&&(n=JSON.parse(e[2]),RiseVision.TimeDate.setAdditionalParams(n)))}function s(){RiseVision.TimeDate.pause()}function r(){RiseVision.TimeDate.play()}function o(){RiseVision.TimeDate.stop()}var a=(new n.Prefs).getString("id");t.oncontextmenu=function(){return!1},e.body.onmousedown=function(){return!1},a&&""!==a&&(n.rpc.register("rscmd_play_"+a,r),n.rpc.register("rscmd_pause_"+a,s),n.rpc.register("rscmd_stop_"+a,o),n.rpc.register("rsparam_set_"+a,i),n.rpc.call("","rsparam_get",null,a,["companyId","displayId","additionalParams"]))}(window,document,gadgets);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpzL3dpZGdldC5taW4uanMiXSwibmFtZXMiOlsiV0lER0VUX0NPTU1PTl9DT05GSUciLCJBVVRIX1BBVEhfVVJMIiwiTE9HR0VSX0NMSUVOVF9JRCIsIkxPR0dFUl9DTElFTlRfU0VDUkVUIiwiTE9HR0VSX1JFRlJFU0hfVE9LRU4iLCJTVE9SQUdFX0VOViIsIlNUT1JFX1VSTCIsIlJpc2VWaXNpb24iLCJDb21tb24iLCJMb2dnZXJVdGlscyIsImdldEV2ZW50UGFyYW1zIiwicGFyYW1zIiwiY2IiLCJqc29uIiwiZXZlbnQiLCJmaWxlX3VybCIsImZpbGVfZm9ybWF0IiwiZ2V0RmlsZUZvcm1hdCIsImNvbXBhbnlfaWQiLCJjb21wYW55SWQiLCJkaXNwbGF5X2lkIiwiZGlzcGxheUlkIiwiZ2V0U3VmZml4IiwiZGF0ZSIsIkRhdGUiLCJ5ZWFyIiwiZ2V0VVRDRnVsbFllYXIiLCJtb250aCIsImdldFVUQ01vbnRoIiwiZGF5IiwiZ2V0VVRDRGF0ZSIsInVybCIsInN0ciIsImhhc1BhcmFtcyIsInN1YnN0ciIsImxhc3RJbmRleE9mIiwidGVzdCIsImluZGV4T2YiLCJsZW5ndGgiLCJ0b0xvd2VyQ2FzZSIsImdldEluc2VydERhdGEiLCJCQVNFX0lOU0VSVF9TQ0hFTUEiLCJraW5kIiwic2tpcEludmFsaWRSb3dzIiwiaWdub3JlVW5rbm93blZhbHVlcyIsInRlbXBsYXRlU3VmZml4Iiwicm93cyIsImluc2VydElkIiwiZGF0YSIsIkpTT04iLCJwYXJzZSIsInN0cmluZ2lmeSIsIk1hdGgiLCJyYW5kb20iLCJ0b1N0cmluZyIsInRvVXBwZXJDYXNlIiwidHMiLCJ0b0lTT1N0cmluZyIsImxvZ0V2ZW50IiwidGFibGUiLCJMb2dnZXIiLCJsb2ciLCJzZXRJZHMiLCJjb21wYW55IiwiZGlzcGxheSIsInV0aWxzIiwicmVmcmVzaFRva2VuIiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJyZWZyZXNoRGF0ZSIsIm9wZW4iLCJSRUZSRVNIX1VSTCIsIm9ubG9hZGVuZCIsInJlc3AiLCJyZXNwb25zZSIsInRva2VuIiwiYWNjZXNzX3Rva2VuIiwicmVmcmVzaGVkQXQiLCJzZW5kIiwiaXNUaHJvdHRsZWQiLCJ0aHJvdHRsZSIsImxhc3RFdmVudCIsInRhYmxlTmFtZSIsImluc2VydFdpdGhUb2tlbiIsInJlZnJlc2hEYXRhIiwiaW5zZXJ0RGF0YSIsInNlcnZpY2VVcmwiLCJyZXBsYWNlIiwic2V0UmVxdWVzdEhlYWRlciIsImhhc093blByb3BlcnR5Iiwic2V0VGltZW91dCIsInRocm90dGxlRGVsYXkiLCJSaXNlQ2FjaGUiLCJwaW5nIiwiY2FsbGJhY2siLCJyIiwiQkFTRV9DQUNIRV9VUkwiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwiX3BpbmdSZWNlaXZlZCIsInN0YXR1cyIsIl9pc0NhY2hlUnVubmluZyIsInJlc3BvbnNlVGV4dCIsImNvbnNvbGUiLCJkZWJ1ZyIsImUiLCJkZXNjcmlwdGlvbiIsImdldEZpbGUiLCJmaWxlVXJsIiwibm9jYWNoZWJ1c3RlciIsImZpbGVSZXF1ZXN0IiwiaXNDYWNoZVJ1bm5pbmciLCJzZXBhcmF0b3IiLCJlbmNvZGVVUklDb21wb25lbnQiLCJnZXRUaW1lIiwic3BsaXQiLCJtYWtlUmVxdWVzdCIsIm1ldGhvZCIsInJlcXVlc3QiLCJhZGRFdmVudExpc3RlbmVyIiwiRXJyb3IiLCJ0aGlzIiwiVXRpbGl0aWVzIiwiZ2V0Rm9udENzc1N0eWxlIiwiY2xhc3NOYW1lIiwiZm9udE9iaiIsImZhbWlseSIsImZvbnQiLCJjb2xvciIsImZvcmVjb2xvciIsInNpemUiLCJ3ZWlnaHQiLCJib2xkIiwiaXRhbGljIiwidW5kZXJsaW5lIiwiaGlnaGxpZ2h0IiwiaGlnaGxpZ2h0Q29sb3IiLCJiYWNrY29sb3IiLCJhZGRDU1NSdWxlcyIsInJ1bGVzIiwic3R5bGUiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJpIiwiYXBwZW5kQ2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsImhlYWQiLCJsb2FkRm9udHMiLCJzZXR0aW5ncyIsImNvbnRlbnREb2MiLCJmb3JFYWNoIiwiaXRlbSIsImNsYXNzIiwiZm9udFNldHRpbmciLCJ0eXBlIiwibG9hZEN1c3RvbUZvbnQiLCJsb2FkR29vZ2xlRm9udCIsInNoZWV0IiwicnVsZSIsInN0eWxlU2hlZXRzIiwiYWRkUnVsZSIsInN0eWxlc2hlZXQiLCJzZXRBdHRyaWJ1dGUiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInByZWxvYWRJbWFnZXMiLCJ1cmxzIiwiaW1hZ2VzIiwiSW1hZ2UiLCJzcmMiLCJnZXRRdWVyeVBhcmFtZXRlciIsInBhcmFtIiwicGFpciIsInF1ZXJ5Iiwid2luZG93IiwibG9jYXRpb24iLCJzZWFyY2giLCJzdWJzdHJpbmciLCJ2YXJzIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiZ2xvYmFsIiwiZmFjdG9yeSIsImV4cG9ydHMiLCJtb2R1bGUiLCJkZWZpbmUiLCJhbWQiLCJtb21lbnQiLCJ1dGlsc19ob29rc19faG9va3MiLCJob29rQ2FsbGJhY2siLCJhcHBseSIsImFyZ3VtZW50cyIsInNldEhvb2tDYWxsYmFjayIsImlzQXJyYXkiLCJpbnB1dCIsIk9iamVjdCIsInByb3RvdHlwZSIsImNhbGwiLCJpc0RhdGUiLCJtYXAiLCJhcnIiLCJmbiIsInJlcyIsInB1c2giLCJoYXNPd25Qcm9wIiwiYSIsImIiLCJleHRlbmQiLCJ2YWx1ZU9mIiwiY3JlYXRlX3V0Y19fY3JlYXRlVVRDIiwiZm9ybWF0IiwibG9jYWxlIiwic3RyaWN0IiwiY3JlYXRlTG9jYWxPclVUQyIsInV0YyIsImRlZmF1bHRQYXJzaW5nRmxhZ3MiLCJlbXB0eSIsInVudXNlZFRva2VucyIsInVudXNlZElucHV0Iiwib3ZlcmZsb3ciLCJjaGFyc0xlZnRPdmVyIiwibnVsbElucHV0IiwiaW52YWxpZE1vbnRoIiwiaW52YWxpZEZvcm1hdCIsInVzZXJJbnZhbGlkYXRlZCIsImlzbyIsImdldFBhcnNpbmdGbGFncyIsIm0iLCJfcGYiLCJ2YWxpZF9faXNWYWxpZCIsIl9pc1ZhbGlkIiwiZmxhZ3MiLCJpc05hTiIsIl9kIiwiaW52YWxpZFdlZWtkYXkiLCJfc3RyaWN0IiwidW5kZWZpbmVkIiwiYmlnSG91ciIsInZhbGlkX19jcmVhdGVJbnZhbGlkIiwiTmFOIiwiaXNVbmRlZmluZWQiLCJjb3B5Q29uZmlnIiwidG8iLCJmcm9tIiwicHJvcCIsInZhbCIsIl9pc0FNb21lbnRPYmplY3QiLCJfaSIsIl9mIiwiX2wiLCJfdHptIiwiX2lzVVRDIiwiX29mZnNldCIsIl9sb2NhbGUiLCJtb21lbnRQcm9wZXJ0aWVzIiwiTW9tZW50IiwiY29uZmlnIiwidXBkYXRlSW5Qcm9ncmVzcyIsInVwZGF0ZU9mZnNldCIsImlzTW9tZW50Iiwib2JqIiwiYWJzRmxvb3IiLCJudW1iZXIiLCJjZWlsIiwiZmxvb3IiLCJ0b0ludCIsImFyZ3VtZW50Rm9yQ29lcmNpb24iLCJjb2VyY2VkTnVtYmVyIiwidmFsdWUiLCJpc0Zpbml0ZSIsImNvbXBhcmVBcnJheXMiLCJhcnJheTEiLCJhcnJheTIiLCJkb250Q29udmVydCIsImxlbiIsIm1pbiIsImxlbmd0aERpZmYiLCJhYnMiLCJkaWZmcyIsIkxvY2FsZSIsIm5vcm1hbGl6ZUxvY2FsZSIsImtleSIsImNob29zZUxvY2FsZSIsIm5hbWVzIiwiaiIsIm5leHQiLCJsb2FkTG9jYWxlIiwic2xpY2UiLCJqb2luIiwibmFtZSIsIm9sZExvY2FsZSIsImxvY2FsZXMiLCJnbG9iYWxMb2NhbGUiLCJfYWJiciIsInJlcXVpcmUiLCJsb2NhbGVfbG9jYWxlc19fZ2V0U2V0R2xvYmFsTG9jYWxlIiwidmFsdWVzIiwibG9jYWxlX2xvY2FsZXNfX2dldExvY2FsZSIsImRlZmluZUxvY2FsZSIsImFiYnIiLCJzZXQiLCJhZGRVbml0QWxpYXMiLCJ1bml0Iiwic2hvcnRoYW5kIiwibG93ZXJDYXNlIiwiYWxpYXNlcyIsIm5vcm1hbGl6ZVVuaXRzIiwidW5pdHMiLCJub3JtYWxpemVPYmplY3RVbml0cyIsImlucHV0T2JqZWN0Iiwibm9ybWFsaXplZFByb3AiLCJub3JtYWxpemVkSW5wdXQiLCJpc0Z1bmN0aW9uIiwiRnVuY3Rpb24iLCJtYWtlR2V0U2V0Iiwia2VlcFRpbWUiLCJnZXRfc2V0X19zZXQiLCJnZXRfc2V0X19nZXQiLCJtb20iLCJpc1ZhbGlkIiwiZ2V0U2V0IiwiemVyb0ZpbGwiLCJ0YXJnZXRMZW5ndGgiLCJmb3JjZVNpZ24iLCJhYnNOdW1iZXIiLCJ6ZXJvc1RvRmlsbCIsInNpZ24iLCJwb3ciLCJtYXgiLCJhZGRGb3JtYXRUb2tlbiIsInBhZGRlZCIsIm9yZGluYWwiLCJmdW5jIiwiZm9ybWF0VG9rZW5GdW5jdGlvbnMiLCJsb2NhbGVEYXRhIiwicmVtb3ZlRm9ybWF0dGluZ1Rva2VucyIsIm1hdGNoIiwibWFrZUZvcm1hdEZ1bmN0aW9uIiwiYXJyYXkiLCJmb3JtYXR0aW5nVG9rZW5zIiwib3V0cHV0IiwiZm9ybWF0TW9tZW50IiwiZXhwYW5kRm9ybWF0IiwiZm9ybWF0RnVuY3Rpb25zIiwiaW52YWxpZERhdGUiLCJyZXBsYWNlTG9uZ0RhdGVGb3JtYXRUb2tlbnMiLCJsb25nRGF0ZUZvcm1hdCIsImxvY2FsRm9ybWF0dGluZ1Rva2VucyIsImxhc3RJbmRleCIsImFkZFJlZ2V4VG9rZW4iLCJyZWdleCIsInN0cmljdFJlZ2V4IiwicmVnZXhlcyIsImlzU3RyaWN0IiwiZ2V0UGFyc2VSZWdleEZvclRva2VuIiwiUmVnRXhwIiwidW5lc2NhcGVGb3JtYXQiLCJzIiwicmVnZXhFc2NhcGUiLCJtYXRjaGVkIiwicDEiLCJwMiIsInAzIiwicDQiLCJhZGRQYXJzZVRva2VuIiwidG9rZW5zIiwiYWRkV2Vla1BhcnNlVG9rZW4iLCJfdyIsImFkZFRpbWVUb0FycmF5RnJvbVRva2VuIiwiX2EiLCJkYXlzSW5Nb250aCIsIlVUQyIsImxvY2FsZU1vbnRocyIsIl9tb250aHMiLCJNT05USFNfSU5fRk9STUFUIiwibG9jYWxlTW9udGhzU2hvcnQiLCJfbW9udGhzU2hvcnQiLCJsb2NhbGVNb250aHNQYXJzZSIsIm1vbnRoTmFtZSIsIl9tb250aHNQYXJzZSIsIl9sb25nTW9udGhzUGFyc2UiLCJfc2hvcnRNb250aHNQYXJzZSIsIm1vbnRocyIsIm1vbnRoc1Nob3J0Iiwic2V0TW9udGgiLCJkYXlPZk1vbnRoIiwibW9udGhzUGFyc2UiLCJnZXRTZXRNb250aCIsImdldERheXNJbk1vbnRoIiwibW9udGhzU2hvcnRSZWdleCIsIl9tb250aHNQYXJzZUV4YWN0IiwiY29tcHV0ZU1vbnRoc1BhcnNlIiwiX21vbnRoc1Nob3J0U3RyaWN0UmVnZXgiLCJfbW9udGhzU2hvcnRSZWdleCIsIm1vbnRoc1JlZ2V4IiwiX21vbnRoc1N0cmljdFJlZ2V4IiwiX21vbnRoc1JlZ2V4IiwiY21wTGVuUmV2Iiwic2hvcnRQaWVjZXMiLCJsb25nUGllY2VzIiwibWl4ZWRQaWVjZXMiLCJzb3J0IiwiY2hlY2tPdmVyZmxvdyIsIk1PTlRIIiwiREFURSIsIllFQVIiLCJIT1VSIiwiTUlOVVRFIiwiU0VDT05EIiwiTUlMTElTRUNPTkQiLCJfb3ZlcmZsb3dEYXlPZlllYXIiLCJfb3ZlcmZsb3dXZWVrcyIsIldFRUsiLCJfb3ZlcmZsb3dXZWVrZGF5IiwiV0VFS0RBWSIsIndhcm4iLCJtc2ciLCJzdXBwcmVzc0RlcHJlY2F0aW9uV2FybmluZ3MiLCJkZXByZWNhdGUiLCJmaXJzdFRpbWUiLCJBcnJheSIsInN0YWNrIiwiZGVwcmVjYXRlU2ltcGxlIiwiZGVwcmVjYXRpb25zIiwiY29uZmlnRnJvbUlTTyIsImwiLCJhbGxvd1RpbWUiLCJkYXRlRm9ybWF0IiwidGltZUZvcm1hdCIsInR6Rm9ybWF0Iiwic3RyaW5nIiwiZXh0ZW5kZWRJc29SZWdleCIsImV4ZWMiLCJiYXNpY0lzb1JlZ2V4IiwiaXNvRGF0ZXMiLCJpc29UaW1lcyIsInR6UmVnZXgiLCJjb25maWdGcm9tU3RyaW5nQW5kRm9ybWF0IiwiY29uZmlnRnJvbVN0cmluZyIsImFzcE5ldEpzb25SZWdleCIsImNyZWF0ZUZyb21JbnB1dEZhbGxiYWNrIiwiY3JlYXRlRGF0ZSIsInkiLCJkIiwiaCIsIk0iLCJtcyIsImdldEZ1bGxZZWFyIiwic2V0RnVsbFllYXIiLCJjcmVhdGVVVENEYXRlIiwic2V0VVRDRnVsbFllYXIiLCJkYXlzSW5ZZWFyIiwiaXNMZWFwWWVhciIsImdldElzTGVhcFllYXIiLCJmaXJzdFdlZWtPZmZzZXQiLCJkb3ciLCJkb3kiLCJmd2QiLCJmd2RsdyIsImdldFVUQ0RheSIsImRheU9mWWVhckZyb21XZWVrcyIsIndlZWsiLCJ3ZWVrZGF5IiwicmVzWWVhciIsInJlc0RheU9mWWVhciIsImxvY2FsV2Vla2RheSIsIndlZWtPZmZzZXQiLCJkYXlPZlllYXIiLCJ3ZWVrT2ZZZWFyIiwicmVzV2VlayIsIndlZWtzSW5ZZWFyIiwid2Vla09mZnNldE5leHQiLCJkZWZhdWx0cyIsImMiLCJjdXJyZW50RGF0ZUFycmF5Iiwibm93VmFsdWUiLCJub3ciLCJfdXNlVVRDIiwiZ2V0TW9udGgiLCJnZXREYXRlIiwiY29uZmlnRnJvbUFycmF5IiwiY3VycmVudERhdGUiLCJ5ZWFyVG9Vc2UiLCJkYXlPZlllYXJGcm9tV2Vla0luZm8iLCJfZGF5T2ZZZWFyIiwiX25leHREYXkiLCJzZXRVVENNaW51dGVzIiwiZ2V0VVRDTWludXRlcyIsInciLCJ3ZWVrWWVhciIsInRlbXAiLCJ3ZWVrZGF5T3ZlcmZsb3ciLCJHRyIsIlciLCJFIiwibG9jYWxfX2NyZWF0ZUxvY2FsIiwiX3dlZWsiLCJnZyIsIklTT184NjAxIiwicGFyc2VkSW5wdXQiLCJza2lwcGVkIiwic3RyaW5nTGVuZ3RoIiwidG90YWxQYXJzZWRJbnB1dExlbmd0aCIsIm1lcmlkaWVtRml4V3JhcCIsIl9tZXJpZGllbSIsImhvdXIiLCJtZXJpZGllbSIsImlzUG0iLCJtZXJpZGllbUhvdXIiLCJpc1BNIiwiY29uZmlnRnJvbVN0cmluZ0FuZEFycmF5IiwidGVtcENvbmZpZyIsImJlc3RNb21lbnQiLCJzY29yZVRvQmVhdCIsImN1cnJlbnRTY29yZSIsInNjb3JlIiwiY29uZmlnRnJvbU9iamVjdCIsIm1pbnV0ZSIsInNlY29uZCIsIm1pbGxpc2Vjb25kIiwicGFyc2VJbnQiLCJjcmVhdGVGcm9tQ29uZmlnIiwicHJlcGFyZUNvbmZpZyIsImFkZCIsInByZXBhcnNlIiwiY29uZmlnRnJvbUlucHV0IiwiaXNVVEMiLCJwaWNrQnkiLCJtb21lbnRzIiwiYXJncyIsIkR1cmF0aW9uIiwiZHVyYXRpb24iLCJ5ZWFycyIsInF1YXJ0ZXJzIiwicXVhcnRlciIsIndlZWtzIiwiZGF5cyIsImhvdXJzIiwibWludXRlcyIsInNlY29uZHMiLCJtaWxsaXNlY29uZHMiLCJfbWlsbGlzZWNvbmRzIiwiX2RheXMiLCJfZGF0YSIsIl9idWJibGUiLCJpc0R1cmF0aW9uIiwib2Zmc2V0IiwidXRjT2Zmc2V0Iiwib2Zmc2V0RnJvbVN0cmluZyIsIm1hdGNoZXIiLCJtYXRjaGVzIiwiY2h1bmsiLCJwYXJ0cyIsImNodW5rT2Zmc2V0IiwiY2xvbmVXaXRoT2Zmc2V0IiwibW9kZWwiLCJkaWZmIiwiY2xvbmUiLCJzZXRUaW1lIiwibG9jYWwiLCJnZXREYXRlT2Zmc2V0Iiwicm91bmQiLCJnZXRUaW1lem9uZU9mZnNldCIsImdldFNldE9mZnNldCIsImtlZXBMb2NhbFRpbWUiLCJsb2NhbEFkanVzdCIsIm1hdGNoU2hvcnRPZmZzZXQiLCJfY2hhbmdlSW5Qcm9ncmVzcyIsImFkZF9zdWJ0cmFjdF9fYWRkU3VidHJhY3QiLCJjcmVhdGVfX2NyZWF0ZUR1cmF0aW9uIiwiZ2V0U2V0Wm9uZSIsInNldE9mZnNldFRvVVRDIiwic2V0T2Zmc2V0VG9Mb2NhbCIsInN1YnRyYWN0Iiwic2V0T2Zmc2V0VG9QYXJzZWRPZmZzZXQiLCJtYXRjaE9mZnNldCIsImhhc0FsaWduZWRIb3VyT2Zmc2V0IiwiaXNEYXlsaWdodFNhdmluZ1RpbWUiLCJpc0RheWxpZ2h0U2F2aW5nVGltZVNoaWZ0ZWQiLCJfaXNEU1RTaGlmdGVkIiwib3RoZXIiLCJ0b0FycmF5IiwiaXNMb2NhbCIsImlzVXRjT2Zmc2V0IiwiaXNVdGMiLCJyZXQiLCJkaWZmUmVzIiwiYXNwTmV0UmVnZXgiLCJpc29SZWdleCIsInBhcnNlSXNvIiwibW9tZW50c0RpZmZlcmVuY2UiLCJpbnAiLCJwYXJzZUZsb2F0IiwicG9zaXRpdmVNb21lbnRzRGlmZmVyZW5jZSIsImJhc2UiLCJpc0FmdGVyIiwiaXNCZWZvcmUiLCJjcmVhdGVBZGRlciIsImRpcmVjdGlvbiIsInBlcmlvZCIsImR1ciIsInRtcCIsImlzQWRkaW5nIiwibW9tZW50X2NhbGVuZGFyX19jYWxlbmRhciIsInRpbWUiLCJmb3JtYXRzIiwic29kIiwic3RhcnRPZiIsImNhbGVuZGFyIiwibG9jYWxJbnB1dCIsImVuZE9mIiwiaXNCZXR3ZWVuIiwiaXNTYW1lIiwiaW5wdXRNcyIsImlzU2FtZU9yQWZ0ZXIiLCJpc1NhbWVPckJlZm9yZSIsImFzRmxvYXQiLCJ0aGF0Iiwiem9uZURlbHRhIiwiZGVsdGEiLCJtb250aERpZmYiLCJhbmNob3IyIiwiYWRqdXN0Iiwid2hvbGVNb250aERpZmYiLCJhbmNob3IiLCJtb21lbnRfZm9ybWF0X190b0lTT1N0cmluZyIsInRvRGF0ZSIsImlucHV0U3RyaW5nIiwiZGVmYXVsdEZvcm1hdCIsInBvc3Rmb3JtYXQiLCJ3aXRob3V0U3VmZml4IiwiaHVtYW5pemUiLCJmcm9tTm93IiwidG9Ob3ciLCJuZXdMb2NhbGVEYXRhIiwiaXNvV2Vla2RheSIsInRvX3R5cGVfX3ZhbHVlT2YiLCJ1bml4IiwidG9PYmplY3QiLCJ0b0pTT04iLCJtb21lbnRfdmFsaWRfX2lzVmFsaWQiLCJwYXJzaW5nRmxhZ3MiLCJpbnZhbGlkQXQiLCJjcmVhdGlvbkRhdGEiLCJhZGRXZWVrWWVhckZvcm1hdFRva2VuIiwiZ2V0dGVyIiwiZ2V0U2V0V2Vla1llYXIiLCJnZXRTZXRXZWVrWWVhckhlbHBlciIsImdldFNldElTT1dlZWtZZWFyIiwiaXNvV2VlayIsImdldElTT1dlZWtzSW5ZZWFyIiwiZ2V0V2Vla3NJblllYXIiLCJ3ZWVrSW5mbyIsIndlZWtzVGFyZ2V0Iiwic2V0V2Vla0FsbCIsImRheU9mWWVhckRhdGEiLCJnZXRTZXRRdWFydGVyIiwibG9jYWxlV2VlayIsImxvY2FsZUZpcnN0RGF5T2ZXZWVrIiwibG9jYWxlRmlyc3REYXlPZlllYXIiLCJnZXRTZXRXZWVrIiwiZ2V0U2V0SVNPV2VlayIsInBhcnNlV2Vla2RheSIsIndlZWtkYXlzUGFyc2UiLCJsb2NhbGVXZWVrZGF5cyIsIl93ZWVrZGF5cyIsImlzRm9ybWF0IiwibG9jYWxlV2Vla2RheXNTaG9ydCIsIl93ZWVrZGF5c1Nob3J0IiwibG9jYWxlV2Vla2RheXNNaW4iLCJfd2Vla2RheXNNaW4iLCJsb2NhbGVXZWVrZGF5c1BhcnNlIiwid2Vla2RheU5hbWUiLCJfd2Vla2RheXNQYXJzZSIsIl9taW5XZWVrZGF5c1BhcnNlIiwiX3Nob3J0V2Vla2RheXNQYXJzZSIsIl9mdWxsV2Vla2RheXNQYXJzZSIsIndlZWtkYXlzIiwid2Vla2RheXNTaG9ydCIsIndlZWtkYXlzTWluIiwiZ2V0U2V0RGF5T2ZXZWVrIiwiZ2V0RGF5IiwiZ2V0U2V0TG9jYWxlRGF5T2ZXZWVrIiwiZ2V0U2V0SVNPRGF5T2ZXZWVrIiwiZ2V0U2V0RGF5T2ZZZWFyIiwiaEZvcm1hdCIsImxvd2VyY2FzZSIsIm1hdGNoTWVyaWRpZW0iLCJfbWVyaWRpZW1QYXJzZSIsImxvY2FsZUlzUE0iLCJjaGFyQXQiLCJsb2NhbGVNZXJpZGllbSIsImlzTG93ZXIiLCJwYXJzZU1zIiwiZ2V0Wm9uZUFiYnIiLCJnZXRab25lTmFtZSIsIm1vbWVudF9fY3JlYXRlVW5peCIsIm1vbWVudF9fY3JlYXRlSW5ab25lIiwicGFyc2Vab25lIiwibG9jYWxlX2NhbGVuZGFyX19jYWxlbmRhciIsIl9jYWxlbmRhciIsIl9sb25nRGF0ZUZvcm1hdCIsImZvcm1hdFVwcGVyIiwiX2ludmFsaWREYXRlIiwiX29yZGluYWwiLCJwcmVQYXJzZVBvc3RGb3JtYXQiLCJyZWxhdGl2ZV9fcmVsYXRpdmVUaW1lIiwiaXNGdXR1cmUiLCJfcmVsYXRpdmVUaW1lIiwicGFzdEZ1dHVyZSIsImxvY2FsZV9zZXRfX3NldCIsIl9vcmRpbmFsUGFyc2VMZW5pZW50IiwiX29yZGluYWxQYXJzZSIsInNvdXJjZSIsImxpc3RzX19nZXQiLCJpbmRleCIsImZpZWxkIiwic2V0dGVyIiwibGlzdCIsImNvdW50Iiwib3V0IiwibGlzdHNfX2xpc3RNb250aHMiLCJsaXN0c19fbGlzdE1vbnRoc1Nob3J0IiwibGlzdHNfX2xpc3RXZWVrZGF5cyIsImxpc3RzX19saXN0V2Vla2RheXNTaG9ydCIsImxpc3RzX19saXN0V2Vla2RheXNNaW4iLCJkdXJhdGlvbl9hYnNfX2FicyIsIm1hdGhBYnMiLCJkdXJhdGlvbl9hZGRfc3VidHJhY3RfX2FkZFN1YnRyYWN0IiwiZHVyYXRpb25fYWRkX3N1YnRyYWN0X19hZGQiLCJkdXJhdGlvbl9hZGRfc3VidHJhY3RfX3N1YnRyYWN0IiwiYWJzQ2VpbCIsImJ1YmJsZSIsIm1vbnRoc0Zyb21EYXlzIiwibW9udGhzVG9EYXlzIiwiZGF5c1RvTW9udGhzIiwiYXMiLCJkdXJhdGlvbl9hc19fdmFsdWVPZiIsIm1ha2VBcyIsImFsaWFzIiwiZHVyYXRpb25fZ2V0X19nZXQiLCJtYWtlR2V0dGVyIiwic3Vic3RpdHV0ZVRpbWVBZ28iLCJyZWxhdGl2ZVRpbWUiLCJkdXJhdGlvbl9odW1hbml6ZV9fcmVsYXRpdmVUaW1lIiwicG9zTmVnRHVyYXRpb24iLCJ0aHJlc2hvbGRzIiwiZHVyYXRpb25faHVtYW5pemVfX2dldFNldFJlbGF0aXZlVGltZVRocmVzaG9sZCIsInRocmVzaG9sZCIsImxpbWl0Iiwid2l0aFN1ZmZpeCIsImlzb19zdHJpbmdfX3RvSVNPU3RyaW5nIiwiaXNvX3N0cmluZ19fYWJzIiwiWSIsIkQiLCJ0b3RhbCIsImFzU2Vjb25kcyIsIm1hdGNoMSIsIm1hdGNoMiIsIm1hdGNoMyIsIm1hdGNoNCIsIm1hdGNoNiIsIm1hdGNoMXRvMiIsIm1hdGNoM3RvNCIsIm1hdGNoNXRvNiIsIm1hdGNoMXRvMyIsIm1hdGNoMXRvNCIsIm1hdGNoMXRvNiIsIm1hdGNoVW5zaWduZWQiLCJtYXRjaFNpZ25lZCIsIm1hdGNoVGltZXN0YW1wIiwibWF0Y2hXb3JkIiwiZGVmYXVsdExvY2FsZU1vbnRocyIsImRlZmF1bHRMb2NhbGVNb250aHNTaG9ydCIsImRlZmF1bHRNb250aHNTaG9ydFJlZ2V4IiwiZGVmYXVsdE1vbnRoc1JlZ2V4IiwicGFyc2VUd29EaWdpdFllYXIiLCJnZXRTZXRZZWFyIiwicHJvdG90eXBlTWluIiwicHJvdG90eXBlTWF4IiwiYWRkX3N1YnRyYWN0X19hZGQiLCJhZGRfc3VidHJhY3RfX3N1YnRyYWN0IiwibGFuZyIsImlzb1dlZWtZZWFyIiwiZGVmYXVsdExvY2FsZVdlZWsiLCJnZXRTZXREYXlPZk1vbnRoIiwiZGVmYXVsdExvY2FsZVdlZWtkYXlzIiwiZGVmYXVsdExvY2FsZVdlZWtkYXlzU2hvcnQiLCJkZWZhdWx0TG9jYWxlV2Vla2RheXNNaW4iLCJfaXNQbSIsInBvcyIsInBvczEiLCJwb3MyIiwiZGVmYXVsdExvY2FsZU1lcmlkaWVtUGFyc2UiLCJnZXRTZXRIb3VyIiwiZ2V0U2V0TWludXRlIiwiZ2V0U2V0U2Vjb25kIiwiZ2V0U2V0TWlsbGlzZWNvbmQiLCJtb21lbnRQcm90b3R5cGVfX3Byb3RvIiwiZ2V0IiwiaXNvV2Vla3MiLCJpc29XZWVrc0luWWVhciIsImlzRFNUIiwiaXNEU1RTaGlmdGVkIiwiem9uZUFiYnIiLCJ6b25lTmFtZSIsImRhdGVzIiwiem9uZSIsIm1vbWVudFByb3RvdHlwZSIsImRlZmF1bHRDYWxlbmRhciIsInNhbWVEYXkiLCJuZXh0RGF5IiwibmV4dFdlZWsiLCJsYXN0RGF5IiwibGFzdFdlZWsiLCJzYW1lRWxzZSIsImRlZmF1bHRMb25nRGF0ZUZvcm1hdCIsIkxUUyIsIkxUIiwiTCIsIkxMIiwiTExMIiwiTExMTCIsImRlZmF1bHRJbnZhbGlkRGF0ZSIsImRlZmF1bHRPcmRpbmFsIiwiZGVmYXVsdE9yZGluYWxQYXJzZSIsImRlZmF1bHRSZWxhdGl2ZVRpbWUiLCJmdXR1cmUiLCJwYXN0IiwibW0iLCJoaCIsImRkIiwiTU0iLCJ5eSIsInByb3RvdHlwZV9fcHJvdG8iLCJmaXJzdERheU9mWWVhciIsImZpcnN0RGF5T2ZXZWVrIiwib3JkaW5hbFBhcnNlIiwibGFuZ0RhdGEiLCJhc01pbGxpc2Vjb25kcyIsImFzTWludXRlcyIsImFzSG91cnMiLCJhc0RheXMiLCJhc1dlZWtzIiwiYXNNb250aHMiLCJhc1llYXJzIiwiZHVyYXRpb25fcHJvdG90eXBlX19wcm90byIsInRvSXNvU3RyaW5nIiwidmVyc2lvbiIsImludmFsaWQiLCJyZWxhdGl2ZVRpbWVUaHJlc2hvbGQiLCJfbW9tZW50IiwiYW5ndWxhciIsImNvbnN0YW50IiwiVGltZURhdGUiLCJnYWRnZXRzIiwiX2luaXQiLCJmb250U2V0dGluZ3MiLCJfYWRkaXRpb25hbFBhcmFtcyIsImZvbnRTdHlsZSIsIl9mb3JtYXQiLCJzaG93VGltZSIsInNob3dEYXRlIiwiX3RpbWVBbmREYXRlQ29udGFpbmVyIiwidGV4dEFsaWduIiwiYWxpZ24iLCJnZXRFbGVtZW50QnlJZCIsIl9yZWFkeSIsInJwYyIsIl9wcmVmcyIsImdldFN0cmluZyIsInNldEFkZGl0aW9uYWxQYXJhbXMiLCJhZGRpdGlvbmFsUGFyYW1zIiwid2lkdGgiLCJnZXRJbnQiLCJoZWlnaHQiLCJfbWVzc2FnZSIsIk1lc3NhZ2UiLCJfZHJhdyIsImlubmVySFRNTCIsIl90aW1lb3V0SWQiLCJwYXVzZSIsImNsZWFyVGltZW91dCIsInBsYXkiLCJfY29uZmlndXJhdGlvbkxvZ2dlZCIsImV2ZW50X2RldGFpbHMiLCJzdG9wIiwiZ2V0VGFibGVOYW1lIiwiUHJlZnMiLCJtYWluQ29udGFpbmVyIiwibWVzc2FnZUNvbnRhaW5lciIsIm1lc3NhZ2UiLCJoaWRlIiwiX2FjdGl2ZSIsImZpcnN0Q2hpbGQiLCJyZW1vdmVDaGlsZCIsInZpc2liaWxpdHkiLCJzaG93IiwicCIsImZyYWdtZW50IiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJjb25maWd1cmUiLCJpZCIsIm9uY29udGV4dG1lbnUiLCJib2R5Iiwib25tb3VzZWRvd24iLCJyZWdpc3RlciJdLCJtYXBwaW5ncyI6IkFBQUEsR0FBSUEsdUJBQ0ZDLGNBQWUs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b1AsRUFBTyxJQUVyQy9SLFdBQVc2MEIsU0FBU2lCLG9CQUFvQkMsS0FLOUMsUUFBU1MsS0FDUHgyQixXQUFXNjBCLFNBQVMyQixRQUd0QixRQUFTRSxLQUNQMTJCLFdBQVc2MEIsU0FBUzZCLE9BR3RCLFFBQVNHLEtBQ1A3MkIsV0FBVzYwQixTQUFTZ0MsT0FwRHRCLEdBQUlpQixJQUFLLEdBQUloRCxHQUFRaUMsT0FBUWxCLFVBQVUsS0FFdkN2ckIsR0FBT3l0QixjQUFnQixXQUNyQixPQUFPLEdBR1R6dkIsRUFBUzB2QixLQUFLQyxZQUFjLFdBQzFCLE9BQU8sR0FnRExILEdBQWEsS0FBUEEsSUFDUmhELEVBQVFhLElBQUl1QyxTQUFTLGNBQWdCSixFQUFJcEIsR0FDekM1QixFQUFRYSxJQUFJdUMsU0FBUyxlQUFpQkosRUFBSXRCLEdBQzFDMUIsRUFBUWEsSUFBSXVDLFNBQVMsY0FBZ0JKLEVBQUlqQixHQUN6Qy9CLEVBQVFhLElBQUl1QyxTQUFTLGVBQWlCSixFQUFJRCxHQUMxQy9DLEVBQVFhLElBQUkvcEIsS0FBSyxHQUFJLGNBQWUsS0FBTWtzQixHQUFLLFlBQWEsWUFBYSx1QkFHMUV4dEIsT0FBUWhDLFNBQVV3c0IiLCJmaWxlIjoianMvd2lkZ2V0Lm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBXSURHRVRfQ09NTU9OX0NPTkZJRyA9IHtcbiAgQVVUSF9QQVRIX1VSTDogXCJ2MS93aWRnZXQvYXV0aFwiLFxuICBMT0dHRVJfQ0xJRU5UX0lEOiBcIjEwODg1MjcxNDcxMDktNnExbzJ2dGlobjM0MjkycGp0NGNraG1oY2swcmswbzcuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb21cIixcbiAgTE9HR0VSX0NMSUVOVF9TRUNSRVQ6IFwibmxaeXJjUExnNm9Fd085ZjlXZm4yOVdoXCIsXG4gIExPR0dFUl9SRUZSRVNIX1RPS0VOOiBcIjEveHp0NGt3ekUxSDdXOVZuS0I4Y0FhQ3g2emI0RXM0bktFb3FhWUhkVEQxNUlnT3JKRHRkdW42eks2WGlBVENLVFwiLFxuICBTVE9SQUdFX0VOVjogXCJwcm9kXCIsXG4gIFNUT1JFX1VSTDogXCJodHRwczovL3N0b3JlLWRvdC1ydmFzZXJ2ZXIyLmFwcHNwb3QuY29tL1wiXG59O1xuLyogZ2xvYmFsIGdhZGdldHMgKi9cblxudmFyIFJpc2VWaXNpb24gPSBSaXNlVmlzaW9uIHx8IHt9O1xuUmlzZVZpc2lvbi5Db21tb24gPSBSaXNlVmlzaW9uLkNvbW1vbiB8fCB7fTtcblxuUmlzZVZpc2lvbi5Db21tb24uTG9nZ2VyVXRpbHMgPSAoZnVuY3Rpb24oKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gICB2YXIgZGlzcGxheUlkID0gXCJcIixcbiAgICBjb21wYW55SWQgPSBcIlwiO1xuXG4gIC8qXG4gICAqICBQcml2YXRlIE1ldGhvZHNcbiAgICovXG5cbiAgLyogUmV0cmlldmUgcGFyYW1ldGVycyB0byBwYXNzIHRvIHRoZSBldmVudCBsb2dnZXIuICovXG4gIGZ1bmN0aW9uIGdldEV2ZW50UGFyYW1zKHBhcmFtcywgY2IpIHtcbiAgICB2YXIganNvbiA9IG51bGw7XG5cbiAgICAvLyBldmVudCBpcyByZXF1aXJlZC5cbiAgICBpZiAocGFyYW1zLmV2ZW50KSB7XG4gICAgICBqc29uID0gcGFyYW1zO1xuXG4gICAgICBpZiAoanNvbi5maWxlX3VybCkge1xuICAgICAgICBqc29uLmZpbGVfZm9ybWF0ID0gZ2V0RmlsZUZvcm1hdChqc29uLmZpbGVfdXJsKTtcbiAgICAgIH1cblxuICAgICAganNvbi5jb21wYW55X2lkID0gY29tcGFueUlkO1xuICAgICAganNvbi5kaXNwbGF5X2lkID0gZGlzcGxheUlkO1xuXG4gICAgICBjYihqc29uKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBjYihqc29uKTtcbiAgICB9XG4gIH1cblxuICAvLyBHZXQgc3VmZml4IGZvciBCUSB0YWJsZSBuYW1lLlxuICBmdW5jdGlvbiBnZXRTdWZmaXgoKSB7XG4gICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSgpLFxuICAgICAgeWVhciA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKSxcbiAgICAgIG1vbnRoID0gZGF0ZS5nZXRVVENNb250aCgpICsgMSxcbiAgICAgIGRheSA9IGRhdGUuZ2V0VVRDRGF0ZSgpO1xuXG4gICAgaWYgKG1vbnRoIDwgMTApIHtcbiAgICAgIG1vbnRoID0gXCIwXCIgKyBtb250aDtcbiAgICB9XG5cbiAgICBpZiAoZGF5IDwgMTApIHtcbiAgICAgIGRheSA9IFwiMFwiICsgZGF5O1xuICAgIH1cblxuICAgIHJldHVybiB5ZWFyICsgbW9udGggKyBkYXk7XG4gIH1cblxuICAvKlxuICAgKiAgUHVibGljIE1ldGhvZHNcbiAgICovXG4gIGZ1bmN0aW9uIGdldEZpbGVGb3JtYXQodXJsKSB7XG4gICAgdmFyIGhhc1BhcmFtcyA9IC9bPyMmXS8sXG4gICAgICBzdHI7XG5cbiAgICBpZiAoIXVybCB8fCB0eXBlb2YgdXJsICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBzdHIgPSB1cmwuc3Vic3RyKHVybC5sYXN0SW5kZXhPZihcIi5cIikgKyAxKTtcblxuICAgIC8vIGRvbid0IGluY2x1ZGUgYW55IHBhcmFtcyBhZnRlciB0aGUgZmlsZW5hbWVcbiAgICBpZiAoaGFzUGFyYW1zLnRlc3Qoc3RyKSkge1xuICAgICAgc3RyID0gc3RyLnN1YnN0cigwICwoc3RyLmluZGV4T2YoXCI/XCIpICE9PSAtMSkgPyBzdHIuaW5kZXhPZihcIj9cIikgOiBzdHIubGVuZ3RoKTtcblxuICAgICAgc3RyID0gc3RyLnN1YnN0cigwLCAoc3RyLmluZGV4T2YoXCIjXCIpICE9PSAtMSkgPyBzdHIuaW5kZXhPZihcIiNcIikgOiBzdHIubGVuZ3RoKTtcblxuICAgICAgc3RyID0gc3RyLnN1YnN0cigwLCAoc3RyLmluZGV4T2YoXCImXCIpICE9PSAtMSkgPyBzdHIuaW5kZXhPZihcIiZcIikgOiBzdHIubGVuZ3RoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3RyLnRvTG93ZXJDYXNlKCk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRJbnNlcnREYXRhKHBhcmFtcykge1xuICAgIHZhciBCQVNFX0lOU0VSVF9TQ0hFTUEgPSB7XG4gICAgICBcImtpbmRcIjogXCJiaWdxdWVyeSN0YWJsZURhdGFJbnNlcnRBbGxSZXF1ZXN0XCIsXG4gICAgICBcInNraXBJbnZhbGlkUm93c1wiOiBmYWxzZSxcbiAgICAgIFwiaWdub3JlVW5rbm93blZhbHVlc1wiOiBmYWxzZSxcbiAgICAgIFwidGVtcGxhdGVTdWZmaXhcIjogZ2V0U3VmZml4KCksXG4gICAgICBcInJvd3NcIjogW3tcbiAgICAgICAgXCJpbnNlcnRJZFwiOiBcIlwiXG4gICAgICB9XVxuICAgIH0sXG4gICAgZGF0YSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoQkFTRV9JTlNFUlRfU0NIRU1BKSk7XG5cbiAgICBkYXRhLnJvd3NbMF0uaW5zZXJ0SWQgPSBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMikudG9VcHBlckNhc2UoKTtcbiAgICBkYXRhLnJvd3NbMF0uanNvbiA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkocGFyYW1zKSk7XG4gICAgZGF0YS5yb3dzWzBdLmpzb24udHMgPSBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCk7XG5cbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxvZ0V2ZW50KHRhYmxlLCBwYXJhbXMpIHtcbiAgICBnZXRFdmVudFBhcmFtcyhwYXJhbXMsIGZ1bmN0aW9uKGpzb24pIHtcbiAgICAgIGlmIChqc29uICE9PSBudWxsKSB7XG4gICAgICAgIFJpc2VWaXNpb24uQ29tbW9uLkxvZ2dlci5sb2codGFibGUsIGpzb24pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyogU2V0IHRoZSBDb21wYW55IGFuZCBEaXNwbGF5IElEcy4gKi9cbiAgZnVuY3Rpb24gc2V0SWRzKGNvbXBhbnksIGRpc3BsYXkpIHtcbiAgICBjb21wYW55SWQgPSBjb21wYW55O1xuICAgIGRpc3BsYXlJZCA9IGRpc3BsYXk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIFwiZ2V0SW5zZXJ0RGF0YVwiOiBnZXRJbnNlcnREYXRhLFxuICAgIFwiZ2V0RmlsZUZvcm1hdFwiOiBnZXRGaWxlRm9ybWF0LFxuICAgIFwibG9nRXZlbnRcIjogbG9nRXZlbnQsXG4gICAgXCJzZXRJZHNcIjogc2V0SWRzXG4gIH07XG59KSgpO1xuXG5SaXNlVmlzaW9uLkNvbW1vbi5Mb2dnZXIgPSAoZnVuY3Rpb24odXRpbHMpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIFJFRlJFU0hfVVJMID0gXCJodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9vYXV0aDIvdjMvdG9rZW4/Y2xpZW50X2lkPVwiICsgV0lER0VUX0NPTU1PTl9DT05GSUcuTE9HR0VSX0NMSUVOVF9JRCArXG4gICAgICBcIiZjbGllbnRfc2VjcmV0PVwiICsgV0lER0VUX0NPTU1PTl9DT05GSUcuTE9HR0VSX0NMSUVOVF9TRUNSRVQgK1xuICAgICAgXCImcmVmcmVzaF90b2tlbj1cIiArIFdJREdFVF9DT01NT05fQ09ORklHLkxPR0dFUl9SRUZSRVNIX1RPS0VOICtcbiAgICAgIFwiJmdyYW50X3R5cGU9cmVmcmVzaF90b2tlblwiO1xuXG4gIHZhciBzZXJ2aWNlVXJsID0gXCJodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9iaWdxdWVyeS92Mi9wcm9qZWN0cy9jbGllbnQtc2lkZS1ldmVudHMvZGF0YXNldHMvV2lkZ2V0X0V2ZW50cy90YWJsZXMvVEFCTEVfSUQvaW5zZXJ0QWxsXCIsXG4gICAgdGhyb3R0bGUgPSBmYWxzZSxcbiAgICB0aHJvdHRsZURlbGF5ID0gMTAwMCxcbiAgICBsYXN0RXZlbnQgPSBcIlwiLFxuICAgIHJlZnJlc2hEYXRlID0gMCxcbiAgICB0b2tlbiA9IFwiXCI7XG5cbiAgLypcbiAgICogIFByaXZhdGUgTWV0aG9kc1xuICAgKi9cbiAgZnVuY3Rpb24gcmVmcmVzaFRva2VuKGNiKSB7XG4gICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gICAgaWYgKG5ldyBEYXRlKCkgLSByZWZyZXNoRGF0ZSA8IDM1ODAwMDApIHtcbiAgICAgIHJldHVybiBjYih7fSk7XG4gICAgfVxuXG4gICAgeGhyLm9wZW4oXCJQT1NUXCIsIFJFRlJFU0hfVVJMLCB0cnVlKTtcbiAgICB4aHIub25sb2FkZW5kID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgcmVzcCA9IEpTT04ucGFyc2UoeGhyLnJlc3BvbnNlKTtcblxuICAgICAgY2IoeyB0b2tlbjogcmVzcC5hY2Nlc3NfdG9rZW4sIHJlZnJlc2hlZEF0OiBuZXcgRGF0ZSgpIH0pO1xuICAgIH07XG5cbiAgICB4aHIuc2VuZCgpO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNUaHJvdHRsZWQoZXZlbnQpIHtcbiAgICByZXR1cm4gdGhyb3R0bGUgJiYgKGxhc3RFdmVudCA9PT0gZXZlbnQpO1xuICB9XG5cbiAgLypcbiAgICogIFB1YmxpYyBNZXRob2RzXG4gICAqL1xuICBmdW5jdGlvbiBsb2codGFibGVOYW1lLCBwYXJhbXMpIHtcbiAgICBpZiAoIXRhYmxlTmFtZSB8fCAhcGFyYW1zIHx8IChwYXJhbXMuaGFzT3duUHJvcGVydHkoXCJldmVudFwiKSAmJiAhcGFyYW1zLmV2ZW50KSB8fFxuICAgICAgKHBhcmFtcy5oYXNPd25Qcm9wZXJ0eShcImV2ZW50XCIpICYmIGlzVGhyb3R0bGVkKHBhcmFtcy5ldmVudCkpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhyb3R0bGUgPSB0cnVlO1xuICAgIGxhc3RFdmVudCA9IHBhcmFtcy5ldmVudDtcblxuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgdGhyb3R0bGUgPSBmYWxzZTtcbiAgICB9LCB0aHJvdHRsZURlbGF5KTtcblxuICAgIGZ1bmN0aW9uIGluc2VydFdpdGhUb2tlbihyZWZyZXNoRGF0YSkge1xuICAgICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpLFxuICAgICAgICBpbnNlcnREYXRhLCB1cmw7XG5cbiAgICAgIHVybCA9IHNlcnZpY2VVcmwucmVwbGFjZShcIlRBQkxFX0lEXCIsIHRhYmxlTmFtZSk7XG4gICAgICByZWZyZXNoRGF0ZSA9IHJlZnJlc2hEYXRhLnJlZnJlc2hlZEF0IHx8IHJlZnJlc2hEYXRlO1xuICAgICAgdG9rZW4gPSByZWZyZXNoRGF0YS50b2tlbiB8fCB0b2tlbjtcbiAgICAgIGluc2VydERhdGEgPSB1dGlscy5nZXRJbnNlcnREYXRhKHBhcmFtcyk7XG5cbiAgICAgIC8vIEluc2VydCB0aGUgZGF0YS5cbiAgICAgIHhoci5vcGVuKFwiUE9TVFwiLCB1cmwsIHRydWUpO1xuICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoXCJDb250ZW50LVR5cGVcIiwgXCJhcHBsaWNhdGlvbi9qc29uXCIpO1xuICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoXCJBdXRob3JpemF0aW9uXCIsIFwiQmVhcmVyIFwiICsgdG9rZW4pO1xuXG4gICAgICBpZiAocGFyYW1zLmNiICYmIHR5cGVvZiBwYXJhbXMuY2IgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICB4aHIub25sb2FkZW5kID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcGFyYW1zLmNiKHhoci5yZXNwb25zZSk7XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHhoci5zZW5kKEpTT04uc3RyaW5naWZ5KGluc2VydERhdGEpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVmcmVzaFRva2VuKGluc2VydFdpdGhUb2tlbik7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIFwibG9nXCI6IGxvZ1xuICB9O1xufSkoUmlzZVZpc2lvbi5Db21tb24uTG9nZ2VyVXRpbHMpO1xudmFyIFJpc2VWaXNpb24gPSBSaXNlVmlzaW9uIHx8IHt9O1xuUmlzZVZpc2lvbi5Db21tb24gPSBSaXNlVmlzaW9uLkNvbW1vbiB8fCB7fTtcblxuUmlzZVZpc2lvbi5Db21tb24uUmlzZUNhY2hlID0gKGZ1bmN0aW9uICgpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIEJBU0VfQ0FDSEVfVVJMID0gXCJodHRwOi8vbG9jYWxob3N0Ojk0OTQvXCI7XG5cbiAgdmFyIF9waW5nUmVjZWl2ZWQgPSBmYWxzZSxcbiAgICBfaXNDYWNoZVJ1bm5pbmcgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBwaW5nKGNhbGxiYWNrKSB7XG4gICAgdmFyIHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICAgIGlmICghY2FsbGJhY2sgfHwgdHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICByLm9wZW4oXCJHRVRcIiwgQkFTRV9DQUNIRV9VUkwgKyBcInBpbmc/Y2FsbGJhY2s9X1wiLCB0cnVlKTtcbiAgICByLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChyLnJlYWR5U3RhdGUgPT09IDQgKSB7XG4gICAgICAgICAgLy8gc2F2ZSB0aGlzIHJlc3VsdCBmb3IgdXNlIGluIGdldEZpbGUoKVxuICAgICAgICAgIF9waW5nUmVjZWl2ZWQgPSB0cnVlO1xuXG4gICAgICAgICAgaWYoci5zdGF0dXMgPT09IDIwMCl7XG4gICAgICAgICAgICBfaXNDYWNoZVJ1bm5pbmcgPSB0cnVlO1xuXG4gICAgICAgICAgICBjYWxsYmFjayh0cnVlLCByLnJlc3BvbnNlVGV4dCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZGVidWcoXCJSaXNlIENhY2hlIGlzIG5vdCBydW5uaW5nXCIpO1xuICAgICAgICAgICAgX2lzQ2FjaGVSdW5uaW5nID0gZmFsc2U7XG5cbiAgICAgICAgICAgIGNhbGxiYWNrKGZhbHNlLCBudWxsKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnNvbGUuZGVidWcoXCJDYXVnaHQgZXhjZXB0aW9uOiBcIiwgZS5kZXNjcmlwdGlvbik7XG4gICAgICB9XG5cbiAgICB9O1xuICAgIHIuc2VuZCgpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0RmlsZShmaWxlVXJsLCBjYWxsYmFjaywgbm9jYWNoZWJ1c3Rlcikge1xuICAgIGlmICghZmlsZVVybCB8fCAhY2FsbGJhY2sgfHwgdHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmaWxlUmVxdWVzdChpc0NhY2hlUnVubmluZykge1xuICAgICAgdmFyIHVybCwgc3RyLCBzZXBhcmF0b3I7XG5cbiAgICAgIGlmIChpc0NhY2hlUnVubmluZykge1xuICAgICAgICAvLyBjb25maWd1cmUgdXJsIHdpdGggY2FjaGVidXN0ZXIgb3Igbm90XG4gICAgICAgIHVybCA9IChub2NhY2hlYnVzdGVyKSA/IEJBU0VfQ0FDSEVfVVJMICsgXCI/dXJsPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KGZpbGVVcmwpIDpcbiAgICAgICAgQkFTRV9DQUNIRV9VUkwgKyBcImNiPVwiICsgbmV3IERhdGUoKS5nZXRUaW1lKCkgKyBcIj91cmw9XCIgKyBlbmNvZGVVUklDb21wb25lbnQoZmlsZVVybCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAobm9jYWNoZWJ1c3Rlcikge1xuICAgICAgICAgIHVybCA9IGZpbGVVcmw7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3RyID0gZmlsZVVybC5zcGxpdChcIj9cIik7XG4gICAgICAgICAgc2VwYXJhdG9yID0gKHN0ci5sZW5ndGggPT09IDEpID8gXCI/XCIgOiBcIiZcIjtcbiAgICAgICAgICB1cmwgPSBmaWxlVXJsICsgc2VwYXJhdG9yICsgXCJjYj1cIiArIG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIG1ha2VSZXF1ZXN0KFwiSEVBRFwiLCB1cmwpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1ha2VSZXF1ZXN0KG1ldGhvZCwgdXJsKSB7XG4gICAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCksXG4gICAgICAgIHJlcXVlc3QgPSB7XG4gICAgICAgICAgeGhyOiB4aHIsXG4gICAgICAgICAgdXJsOiB1cmxcbiAgICAgICAgfTtcblxuICAgICAgeGhyLm9wZW4obWV0aG9kLCB1cmwsIHRydWUpO1xuXG4gICAgICB4aHIuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRlbmRcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc3RhdHVzID0geGhyLnN0YXR1cyB8fCAwO1xuXG4gICAgICAgIGlmIChzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMCkge1xuICAgICAgICAgIGNhbGxiYWNrKHJlcXVlc3QpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIFNlcnZlciBtYXkgbm90IHN1cHBvcnQgSEVBRCByZXF1ZXN0LiBGYWxsYmFjayB0byBhIEdFVCByZXF1ZXN0LlxuICAgICAgICAgIGlmIChtZXRob2QgPT09IFwiSEVBRFwiKSB7XG4gICAgICAgICAgICBtYWtlUmVxdWVzdChcIkdFVFwiLCB1cmwpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoX2lzQ2FjaGVSdW5uaW5nKSB7XG4gICAgICAgICAgICAgIGNhbGxiYWNrKHJlcXVlc3QsIG5ldyBFcnJvcihcIlRoZSByZXF1ZXN0IGZhaWxlZCB3aXRoIHN0YXR1cyBjb2RlOiBcIiArIHN0YXR1cykpO1xuICAgICAgICAgICAgfSBlbHNle1xuICAgICAgICAgICAgICAvLyBUaGlzIGlzIHRvIGF2b2lkIHRocm93aW5nIGFuIGVycm9yIHdoZW4gdGhlcmUgaXMgYSBjcm9zcyBkb21haW4gaXNzdWVcbiAgICAgICAgICAgICAgY2FsbGJhY2socmVxdWVzdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgeGhyLnNlbmQoKTtcbiAgICB9XG5cbiAgICBpZiAoIV9waW5nUmVjZWl2ZWQpIHtcbiAgICAgIC8qIGpzaGludCB2YWxpZHRoaXM6IHRydWUgKi9cbiAgICAgIHJldHVybiB0aGlzLnBpbmcoZmlsZVJlcXVlc3QpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmlsZVJlcXVlc3QoX2lzQ2FjaGVSdW5uaW5nKTtcbiAgICB9XG5cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZ2V0RmlsZTogZ2V0RmlsZSxcbiAgICBwaW5nOiBwaW5nXG4gIH07XG5cbn0pKCk7XG5cbnZhciBSaXNlVmlzaW9uID0gUmlzZVZpc2lvbiB8fCB7fTtcblxuUmlzZVZpc2lvbi5Db21tb24gPSBSaXNlVmlzaW9uLkNvbW1vbiB8fCB7fTtcblxuUmlzZVZpc2lvbi5Db21tb24uVXRpbGl0aWVzID0gKGZ1bmN0aW9uKCkge1xuXG4gIGZ1bmN0aW9uIGdldEZvbnRDc3NTdHlsZShjbGFzc05hbWUsIGZvbnRPYmopIHtcbiAgICB2YXIgZmFtaWx5ID0gXCJmb250LWZhbWlseTpcIiArIGZvbnRPYmouZm9udC5mYW1pbHkgKyBcIjsgXCI7XG4gICAgdmFyIGNvbG9yID0gXCJjb2xvcjogXCIgKyAoZm9udE9iai5jb2xvciA/IGZvbnRPYmouY29sb3IgOiBmb250T2JqLmZvcmVjb2xvcikgKyBcIjsgXCI7XG4gICAgdmFyIHNpemUgPSBcImZvbnQtc2l6ZTogXCIgKyAoZm9udE9iai5zaXplLmluZGV4T2YoXCJweFwiKSA9PT0gLTEgPyBmb250T2JqLnNpemUgKyBcInB4OyBcIiA6IGZvbnRPYmouc2l6ZSArIFwiOyBcIik7XG4gICAgdmFyIHdlaWdodCA9IFwiZm9udC13ZWlnaHQ6IFwiICsgKGZvbnRPYmouYm9sZCA/IFwiYm9sZFwiIDogXCJub3JtYWxcIikgKyBcIjsgXCI7XG4gICAgdmFyIGl0YWxpYyA9IFwiZm9udC1zdHlsZTogXCIgKyAoZm9udE9iai5pdGFsaWMgPyBcIml0YWxpY1wiIDogXCJub3JtYWxcIikgKyBcIjsgXCI7XG4gICAgdmFyIHVuZGVybGluZSA9IFwidGV4dC1kZWNvcmF0aW9uOiBcIiArIChmb250T2JqLnVuZGVybGluZSA/IFwidW5kZXJsaW5lXCIgOiBcIm5vbmVcIikgKyBcIjsgXCI7XG4gICAgdmFyIGhpZ2hsaWdodCA9IFwiYmFja2dyb3VuZC1jb2xvcjogXCIgKyAoZm9udE9iai5oaWdobGlnaHRDb2xvciA/IGZvbnRPYmouaGlnaGxpZ2h0Q29sb3IgOiBmb250T2JqLmJhY2tjb2xvcikgKyBcIjsgXCI7XG5cbiAgICByZXR1cm4gXCIuXCIgKyBjbGFzc05hbWUgKyBcIiB7XCIgKyBmYW1pbHkgKyBjb2xvciArIHNpemUgKyB3ZWlnaHQgKyBpdGFsaWMgKyB1bmRlcmxpbmUgKyBoaWdobGlnaHQgKyBcIn1cIjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFkZENTU1J1bGVzKHJ1bGVzKSB7XG4gICAgdmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IHJ1bGVzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShydWxlc1tpXSkpO1xuICAgIH1cblxuICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICB9XG5cbiAgLypcbiAgICogTG9hZHMgR29vZ2xlIG9yIGN1c3RvbSBmb250cywgaWYgYXBwbGljYWJsZSwgYW5kIGluamVjdHMgQ1NTIHN0eWxlc1xuICAgKiBpbnRvIHRoZSBoZWFkIG9mIHRoZSBkb2N1bWVudC5cbiAgICpcbiAgICogQHBhcmFtICAgIGFycmF5ICAgIHNldHRpbmdzICAgIEFycmF5IG9mIG9iamVjdHMgd2l0aCB0aGUgZm9sbG93aW5nIGZvcm06XG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW3tcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiY2xhc3NcIjogXCJkYXRlXCIsXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImZvbnRTZXR0aW5nXCI6IHtcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib2xkOiB0cnVlLFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBcImJsYWNrXCIsXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udDoge1xuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmFtaWx5OiBcIkFrcm9uaW1cIixcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnQ6IFwiQWtyb25pbVwiLFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJWZXJkYW5hXCIsXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImdvb2dsZVwiLFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBcImh0dHA6Ly9jdXN0b20tZm9udC11cmxcIlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGlnaGxpZ2h0Q29sb3I6IFwidHJhbnNwYXJlbnRcIixcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGFsaWM6IGZhbHNlLFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6IFwiMjBcIixcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bmRlcmxpbmU6IGZhbHNlXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfV1cbiAgICpcbiAgICogICAgICAgICAgIG9iamVjdCAgIGNvbnRlbnREb2MgICAgRG9jdW1lbnQgb2JqZWN0IGludG8gd2hpY2ggdG8gaW5qZWN0IHN0eWxlc1xuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmQgbG9hZCBmb250cyAob3B0aW9uYWwpLlxuICAgKi9cbiAgZnVuY3Rpb24gbG9hZEZvbnRzKHNldHRpbmdzLCBjb250ZW50RG9jKSB7XG4gICAgc2V0dGluZ3MuZm9yRWFjaChmdW5jdGlvbihpdGVtKSB7XG4gICAgICBpZiAoaXRlbS5jbGFzcyAmJiBpdGVtLmZvbnRTZXR0aW5nKSB7XG4gICAgICAgIGFkZENTU1J1bGVzKFsgZ2V0Rm9udENzc1N0eWxlKGl0ZW0uY2xhc3MsIGl0ZW0uZm9udFNldHRpbmcpIF0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbS5mb250U2V0dGluZy5mb250LnR5cGUpIHtcbiAgICAgICAgaWYgKGl0ZW0uZm9udFNldHRpbmcuZm9udC50eXBlID09PSBcImN1c3RvbVwiICYmIGl0ZW0uZm9udFNldHRpbmcuZm9udC5mYW1pbHkgJiZcbiAgICAgICAgICBpdGVtLmZvbnRTZXR0aW5nLmZvbnQudXJsKSB7XG4gICAgICAgICAgbG9hZEN1c3RvbUZvbnQoaXRlbS5mb250U2V0dGluZy5mb250LmZhbWlseSwgaXRlbS5mb250U2V0dGluZy5mb250LnVybCxcbiAgICAgICAgICAgIGNvbnRlbnREb2MpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGl0ZW0uZm9udFNldHRpbmcuZm9udC50eXBlID09PSBcImdvb2dsZVwiICYmIGl0ZW0uZm9udFNldHRpbmcuZm9udC5mYW1pbHkpIHtcbiAgICAgICAgICBsb2FkR29vZ2xlRm9udChpdGVtLmZvbnRTZXR0aW5nLmZvbnQuZmFtaWx5LCBjb250ZW50RG9jKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gbG9hZEN1c3RvbUZvbnQoZmFtaWx5LCB1cmwsIGNvbnRlbnREb2MpIHtcbiAgICB2YXIgc2hlZXQgPSBudWxsO1xuICAgIHZhciBydWxlID0gXCJmb250LWZhbWlseTogXCIgKyBmYW1pbHkgKyBcIjsgXCIgKyBcInNyYzogdXJsKCdcIiArIHVybCArIFwiJyk7XCI7XG5cbiAgICBjb250ZW50RG9jID0gY29udGVudERvYyB8fCBkb2N1bWVudDtcblxuICAgIHNoZWV0ID0gY29udGVudERvYy5zdHlsZVNoZWV0c1swXTtcblxuICAgIGlmIChzaGVldCAhPT0gbnVsbCkge1xuICAgICAgc2hlZXQuYWRkUnVsZShcIkBmb250LWZhY2VcIiwgcnVsZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gbG9hZEdvb2dsZUZvbnQoZmFtaWx5LCBjb250ZW50RG9jKSB7XG4gICAgdmFyIHN0eWxlc2hlZXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlua1wiKTtcblxuICAgIGNvbnRlbnREb2MgPSBjb250ZW50RG9jIHx8IGRvY3VtZW50O1xuXG4gICAgc3R5bGVzaGVldC5zZXRBdHRyaWJ1dGUoXCJyZWxcIiwgXCJzdHlsZXNoZWV0XCIpO1xuICAgIHN0eWxlc2hlZXQuc2V0QXR0cmlidXRlKFwidHlwZVwiLCBcInRleHQvY3NzXCIpO1xuXG4gICAgLy8gc3BsaXQgdG8gYWNjb3VudCBmb3IgZmFtaWx5IHZhbHVlIGNvbnRhaW5pbmcgYSBmYWxsYmFjayAoZWcuIEFsYWRpbixzYW5zLXNlcmlmKVxuICAgIHN0eWxlc2hlZXQuc2V0QXR0cmlidXRlKFwiaHJlZlwiLCBcImh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzP2ZhbWlseT1cIiArIGZhbWlseS5zcGxpdChcIixcIilbMF0pO1xuXG4gICAgaWYgKHN0eWxlc2hlZXQgIT09IG51bGwpIHtcbiAgICAgIGNvbnRlbnREb2MuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJoZWFkXCIpWzBdLmFwcGVuZENoaWxkKHN0eWxlc2hlZXQpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHByZWxvYWRJbWFnZXModXJscykge1xuICAgIHZhciBsZW5ndGggPSB1cmxzLmxlbmd0aCxcbiAgICAgIGltYWdlcyA9IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgaW1hZ2VzW2ldID0gbmV3IEltYWdlKCk7XG4gICAgICBpbWFnZXNbaV0uc3JjID0gdXJsc1tpXTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBnZXRRdWVyeVBhcmFtZXRlcihwYXJhbSkge1xuICAgIHZhciBxdWVyeSA9IHdpbmRvdy5sb2NhdGlvbi5zZWFyY2guc3Vic3RyaW5nKDEpLFxuICAgICAgdmFycyA9IHF1ZXJ5LnNwbGl0KFwiJlwiKSxcbiAgICAgIHBhaXI7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZhcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHBhaXIgPSB2YXJzW2ldLnNwbGl0KFwiPVwiKTtcblxuICAgICAgaWYgKHBhaXJbMF0gPT0gcGFyYW0pIHtcbiAgICAgICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChwYWlyWzFdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gXCJcIjtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZ2V0UXVlcnlQYXJhbWV0ZXI6IGdldFF1ZXJ5UGFyYW1ldGVyLFxuICAgIGdldEZvbnRDc3NTdHlsZTogIGdldEZvbnRDc3NTdHlsZSxcbiAgICBhZGRDU1NSdWxlczogICAgICBhZGRDU1NSdWxlcyxcbiAgICBsb2FkRm9udHM6ICAgICAgICBsb2FkRm9udHMsXG4gICAgbG9hZEN1c3RvbUZvbnQ6ICAgbG9hZEN1c3RvbUZvbnQsXG4gICAgbG9hZEdvb2dsZUZvbnQ6ICAgbG9hZEdvb2dsZUZvbnQsXG4gICAgcHJlbG9hZEltYWdlczogICAgcHJlbG9hZEltYWdlc1xuICB9O1xufSkoKTtcblxuLy8hIG1vbWVudC5qc1xuLy8hIHZlcnNpb24gOiAyLjExLjFcbi8vISBhdXRob3JzIDogVGltIFdvb2QsIElza3JlbiBDaGVybmV2LCBNb21lbnQuanMgY29udHJpYnV0b3JzXG4vLyEgbGljZW5zZSA6IE1JVFxuLy8hIG1vbWVudGpzLmNvbVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKSA6XG4gICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGZhY3RvcnkpIDpcbiAgICBnbG9iYWwubW9tZW50ID0gZmFjdG9yeSgpXG59KHRoaXMsIGZ1bmN0aW9uICgpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgdmFyIGhvb2tDYWxsYmFjaztcblxuICAgIGZ1bmN0aW9uIHV0aWxzX2hvb2tzX19ob29rcyAoKSB7XG4gICAgICAgIHJldHVybiBob29rQ2FsbGJhY2suYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgICAvLyBUaGlzIGlzIGRvbmUgdG8gcmVnaXN0ZXIgdGhlIG1ldGhvZCBjYWxsZWQgd2l0aCBtb21lbnQoKVxuICAgIC8vIHdpdGhvdXQgY3JlYXRpbmcgY2lyY3VsYXIgZGVwZW5kZW5jaWVzLlxuICAgIGZ1bmN0aW9uIHNldEhvb2tDYWxsYmFjayAoY2FsbGJhY2spIHtcbiAgICAgICAgaG9va0NhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNBcnJheShpbnB1dCkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGlucHV0KSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0RhdGUoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0IGluc3RhbmNlb2YgRGF0ZSB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaW5wdXQpID09PSAnW29iamVjdCBEYXRlXSc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWFwKGFyciwgZm4pIHtcbiAgICAgICAgdmFyIHJlcyA9IFtdLCBpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICByZXMucHVzaChmbihhcnJbaV0sIGkpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhc093blByb3AoYSwgYikge1xuICAgICAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGEsIGIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGV4dGVuZChhLCBiKSB7XG4gICAgICAgIGZvciAodmFyIGkgaW4gYikge1xuICAgICAgICAgICAgaWYgKGhhc093blByb3AoYiwgaSkpIHtcbiAgICAgICAgICAgICAgICBhW2ldID0gYltpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChoYXNPd25Qcm9wKGIsICd0b1N0cmluZycpKSB7XG4gICAgICAgICAgICBhLnRvU3RyaW5nID0gYi50b1N0cmluZztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChoYXNPd25Qcm9wKGIsICd2YWx1ZU9mJykpIHtcbiAgICAgICAgICAgIGEudmFsdWVPZiA9IGIudmFsdWVPZjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZV91dGNfX2NyZWF0ZVVUQyAoaW5wdXQsIGZvcm1hdCwgbG9jYWxlLCBzdHJpY3QpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUxvY2FsT3JVVEMoaW5wdXQsIGZvcm1hdCwgbG9jYWxlLCBzdHJpY3QsIHRydWUpLnV0YygpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRlZmF1bHRQYXJzaW5nRmxhZ3MoKSB7XG4gICAgICAgIC8vIFdlIG5lZWQgdG8gZGVlcCBjbG9uZSB0aGlzIG9iamVjdC5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGVtcHR5ICAgICAgICAgICA6IGZhbHNlLFxuICAgICAgICAgICAgdW51c2VkVG9rZW5zICAgIDogW10sXG4gICAgICAgICAgICB1bnVzZWRJbnB1dCAgICAgOiBbXSxcbiAgICAgICAgICAgIG92ZXJmbG93ICAgICAgICA6IC0yLFxuICAgICAgICAgICAgY2hhcnNMZWZ0T3ZlciAgIDogMCxcbiAgICAgICAgICAgIG51bGxJbnB1dCAgICAgICA6IGZhbHNlLFxuICAgICAgICAgICAgaW52YWxpZE1vbnRoICAgIDogbnVsbCxcbiAgICAgICAgICAgIGludmFsaWRGb3JtYXQgICA6IGZhbHNlLFxuICAgICAgICAgICAgdXNlckludmFsaWRhdGVkIDogZmFsc2UsXG4gICAgICAgICAgICBpc28gICAgICAgICAgICAgOiBmYWxzZVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFBhcnNpbmdGbGFncyhtKSB7XG4gICAgICAgIGlmIChtLl9wZiA9PSBudWxsKSB7XG4gICAgICAgICAgICBtLl9wZiA9IGRlZmF1bHRQYXJzaW5nRmxhZ3MoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbS5fcGY7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdmFsaWRfX2lzVmFsaWQobSkge1xuICAgICAgICBpZiAobS5faXNWYWxpZCA9PSBudWxsKSB7XG4gICAgICAgICAgICB2YXIgZmxhZ3MgPSBnZXRQYXJzaW5nRmxhZ3MobSk7XG4gICAgICAgICAgICBtLl9pc1ZhbGlkID0gIWlzTmFOKG0uX2QuZ2V0VGltZSgpKSAmJlxuICAgICAgICAgICAgICAgIGZsYWdzLm92ZXJmbG93IDwgMCAmJlxuICAgICAgICAgICAgICAgICFmbGFncy5lbXB0eSAmJlxuICAgICAgICAgICAgICAgICFmbGFncy5pbnZhbGlkTW9udGggJiZcbiAgICAgICAgICAgICAgICAhZmxhZ3MuaW52YWxpZFdlZWtkYXkgJiZcbiAgICAgICAgICAgICAgICAhZmxhZ3MubnVsbElucHV0ICYmXG4gICAgICAgICAgICAgICAgIWZsYWdzLmludmFsaWRGb3JtYXQgJiZcbiAgICAgICAgICAgICAgICAhZmxhZ3MudXNlckludmFsaWRhdGVkO1xuXG4gICAgICAgICAgICBpZiAobS5fc3RyaWN0KSB7XG4gICAgICAgICAgICAgICAgbS5faXNWYWxpZCA9IG0uX2lzVmFsaWQgJiZcbiAgICAgICAgICAgICAgICAgICAgZmxhZ3MuY2hhcnNMZWZ0T3ZlciA9PT0gMCAmJlxuICAgICAgICAgICAgICAgICAgICBmbGFncy51bnVzZWRUb2tlbnMubGVuZ3RoID09PSAwICYmXG4gICAgICAgICAgICAgICAgICAgIGZsYWdzLmJpZ0hvdXIgPT09IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbS5faXNWYWxpZDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB2YWxpZF9fY3JlYXRlSW52YWxpZCAoZmxhZ3MpIHtcbiAgICAgICAgdmFyIG0gPSBjcmVhdGVfdXRjX19jcmVhdGVVVEMoTmFOKTtcbiAgICAgICAgaWYgKGZsYWdzICE9IG51bGwpIHtcbiAgICAgICAgICAgIGV4dGVuZChnZXRQYXJzaW5nRmxhZ3MobSksIGZsYWdzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhtKS51c2VySW52YWxpZGF0ZWQgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNVbmRlZmluZWQoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0ID09PSB2b2lkIDA7XG4gICAgfVxuXG4gICAgLy8gUGx1Z2lucyB0aGF0IGFkZCBwcm9wZXJ0aWVzIHNob3VsZCBhbHNvIGFkZCB0aGUga2V5IGhlcmUgKG51bGwgdmFsdWUpLFxuICAgIC8vIHNvIHdlIGNhbiBwcm9wZXJseSBjbG9uZSBvdXJzZWx2ZXMuXG4gICAgdmFyIG1vbWVudFByb3BlcnRpZXMgPSB1dGlsc19ob29rc19faG9va3MubW9tZW50UHJvcGVydGllcyA9IFtdO1xuXG4gICAgZnVuY3Rpb24gY29weUNvbmZpZyh0bywgZnJvbSkge1xuICAgICAgICB2YXIgaSwgcHJvcCwgdmFsO1xuXG4gICAgICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5faXNBTW9tZW50T2JqZWN0KSkge1xuICAgICAgICAgICAgdG8uX2lzQU1vbWVudE9iamVjdCA9IGZyb20uX2lzQU1vbWVudE9iamVjdDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX2kpKSB7XG4gICAgICAgICAgICB0by5faSA9IGZyb20uX2k7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9mKSkge1xuICAgICAgICAgICAgdG8uX2YgPSBmcm9tLl9mO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5fbCkpIHtcbiAgICAgICAgICAgIHRvLl9sID0gZnJvbS5fbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX3N0cmljdCkpIHtcbiAgICAgICAgICAgIHRvLl9zdHJpY3QgPSBmcm9tLl9zdHJpY3Q7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl90em0pKSB7XG4gICAgICAgICAgICB0by5fdHptID0gZnJvbS5fdHptO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5faXNVVEMpKSB7XG4gICAgICAgICAgICB0by5faXNVVEMgPSBmcm9tLl9pc1VUQztcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX29mZnNldCkpIHtcbiAgICAgICAgICAgIHRvLl9vZmZzZXQgPSBmcm9tLl9vZmZzZXQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9wZikpIHtcbiAgICAgICAgICAgIHRvLl9wZiA9IGdldFBhcnNpbmdGbGFncyhmcm9tKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX2xvY2FsZSkpIHtcbiAgICAgICAgICAgIHRvLl9sb2NhbGUgPSBmcm9tLl9sb2NhbGU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobW9tZW50UHJvcGVydGllcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBmb3IgKGkgaW4gbW9tZW50UHJvcGVydGllcykge1xuICAgICAgICAgICAgICAgIHByb3AgPSBtb21lbnRQcm9wZXJ0aWVzW2ldO1xuICAgICAgICAgICAgICAgIHZhbCA9IGZyb21bcHJvcF07XG4gICAgICAgICAgICAgICAgaWYgKCFpc1VuZGVmaW5lZCh2YWwpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRvW3Byb3BdID0gdmFsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0bztcbiAgICB9XG5cbiAgICB2YXIgdXBkYXRlSW5Qcm9ncmVzcyA9IGZhbHNlO1xuXG4gICAgLy8gTW9tZW50IHByb3RvdHlwZSBvYmplY3RcbiAgICBmdW5jdGlvbiBNb21lbnQoY29uZmlnKSB7XG4gICAgICAgIGNvcHlDb25maWcodGhpcywgY29uZmlnKTtcbiAgICAgICAgdGhpcy5fZCA9IG5ldyBEYXRlKGNvbmZpZy5fZCAhPSBudWxsID8gY29uZmlnLl9kLmdldFRpbWUoKSA6IE5hTik7XG4gICAgICAgIC8vIFByZXZlbnQgaW5maW5pdGUgbG9vcCBpbiBjYXNlIHVwZGF0ZU9mZnNldCBjcmVhdGVzIG5ldyBtb21lbnRcbiAgICAgICAgLy8gb2JqZWN0cy5cbiAgICAgICAgaWYgKHVwZGF0ZUluUHJvZ3Jlc3MgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICB1cGRhdGVJblByb2dyZXNzID0gdHJ1ZTtcbiAgICAgICAgICAgIHV0aWxzX2hvb2tzX19ob29rcy51cGRhdGVPZmZzZXQodGhpcyk7XG4gICAgICAgICAgICB1cGRhdGVJblByb2dyZXNzID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc01vbWVudCAob2JqKSB7XG4gICAgICAgIHJldHVybiBvYmogaW5zdGFuY2VvZiBNb21lbnQgfHwgKG9iaiAhPSBudWxsICYmIG9iai5faXNBTW9tZW50T2JqZWN0ICE9IG51bGwpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFic0Zsb29yIChudW1iZXIpIHtcbiAgICAgICAgaWYgKG51bWJlciA8IDApIHtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLmNlaWwobnVtYmVyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLmZsb29yKG51bWJlcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b0ludChhcmd1bWVudEZvckNvZXJjaW9uKSB7XG4gICAgICAgIHZhciBjb2VyY2VkTnVtYmVyID0gK2FyZ3VtZW50Rm9yQ29lcmNpb24sXG4gICAgICAgICAgICB2YWx1ZSA9IDA7XG5cbiAgICAgICAgaWYgKGNvZXJjZWROdW1iZXIgIT09IDAgJiYgaXNGaW5pdGUoY29lcmNlZE51bWJlcikpIHtcbiAgICAgICAgICAgIHZhbHVlID0gYWJzRmxvb3IoY29lcmNlZE51bWJlcik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgLy8gY29tcGFyZSB0d28gYXJyYXlzLCByZXR1cm4gdGhlIG51bWJlciBvZiBkaWZmZXJlbmNlc1xuICAgIGZ1bmN0aW9uIGNvbXBhcmVBcnJheXMoYXJyYXkxLCBhcnJheTIsIGRvbnRDb252ZXJ0KSB7XG4gICAgICAgIHZhciBsZW4gPSBNYXRoLm1pbihhcnJheTEubGVuZ3RoLCBhcnJheTIubGVuZ3RoKSxcbiAgICAgICAgICAgIGxlbmd0aERpZmYgPSBNYXRoLmFicyhhcnJheTEubGVuZ3RoIC0gYXJyYXkyLmxlbmd0aCksXG4gICAgICAgICAgICBkaWZmcyA9IDAsXG4gICAgICAgICAgICBpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIGlmICgoZG9udENvbnZlcnQgJiYgYXJyYXkxW2ldICE9PSBhcnJheTJbaV0pIHx8XG4gICAgICAgICAgICAgICAgKCFkb250Q29udmVydCAmJiB0b0ludChhcnJheTFbaV0pICE9PSB0b0ludChhcnJheTJbaV0pKSkge1xuICAgICAgICAgICAgICAgIGRpZmZzKys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRpZmZzICsgbGVuZ3RoRGlmZjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBMb2NhbGUoKSB7XG4gICAgfVxuXG4gICAgLy8gaW50ZXJuYWwgc3RvcmFnZSBmb3IgbG9jYWxlIGNvbmZpZyBmaWxlc1xuICAgIHZhciBsb2NhbGVzID0ge307XG4gICAgdmFyIGdsb2JhbExvY2FsZTtcblxuICAgIGZ1bmN0aW9uIG5vcm1hbGl6ZUxvY2FsZShrZXkpIHtcbiAgICAgICAgcmV0dXJuIGtleSA/IGtleS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoJ18nLCAnLScpIDoga2V5O1xuICAgIH1cblxuICAgIC8vIHBpY2sgdGhlIGxvY2FsZSBmcm9tIHRoZSBhcnJheVxuICAgIC8vIHRyeSBbJ2VuLWF1JywgJ2VuLWdiJ10gYXMgJ2VuLWF1JywgJ2VuLWdiJywgJ2VuJywgYXMgaW4gbW92ZSB0aHJvdWdoIHRoZSBsaXN0IHRyeWluZyBlYWNoXG4gICAgLy8gc3Vic3RyaW5nIGZyb20gbW9zdCBzcGVjaWZpYyB0byBsZWFzdCwgYnV0IG1vdmUgdG8gdGhlIG5leHQgYXJyYXkgaXRlbSBpZiBpdCdzIGEgbW9yZSBzcGVjaWZpYyB2YXJpYW50IHRoYW4gdGhlIGN1cnJlbnQgcm9vdFxuICAgIGZ1bmN0aW9uIGNob29zZUxvY2FsZShuYW1lcykge1xuICAgICAgICB2YXIgaSA9IDAsIGosIG5leHQsIGxvY2FsZSwgc3BsaXQ7XG5cbiAgICAgICAgd2hpbGUgKGkgPCBuYW1lcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHNwbGl0ID0gbm9ybWFsaXplTG9jYWxlKG5hbWVzW2ldKS5zcGxpdCgnLScpO1xuICAgICAgICAgICAgaiA9IHNwbGl0Lmxlbmd0aDtcbiAgICAgICAgICAgIG5leHQgPSBub3JtYWxpemVMb2NhbGUobmFtZXNbaSArIDFdKTtcbiAgICAgICAgICAgIG5leHQgPSBuZXh0ID8gbmV4dC5zcGxpdCgnLScpIDogbnVsbDtcbiAgICAgICAgICAgIHdoaWxlIChqID4gMCkge1xuICAgICAgICAgICAgICAgIGxvY2FsZSA9IGxvYWRMb2NhbGUoc3BsaXQuc2xpY2UoMCwgaikuam9pbignLScpKTtcbiAgICAgICAgICAgICAgICBpZiAobG9jYWxlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBsb2NhbGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChuZXh0ICYmIG5leHQubGVuZ3RoID49IGogJiYgY29tcGFyZUFycmF5cyhzcGxpdCwgbmV4dCwgdHJ1ZSkgPj0gaiAtIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgLy90aGUgbmV4dCBhcnJheSBpdGVtIGlzIGJldHRlciB0aGFuIGEgc2hhbGxvd2VyIHN1YnN0cmluZyBvZiB0aGlzIG9uZVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgai0tO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaSsrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvYWRMb2NhbGUobmFtZSkge1xuICAgICAgICB2YXIgb2xkTG9jYWxlID0gbnVsbDtcbiAgICAgICAgLy8gVE9ETzogRmluZCBhIGJldHRlciB3YXkgdG8gcmVnaXN0ZXIgYW5kIGxvYWQgYWxsIHRoZSBsb2NhbGVzIGluIE5vZGVcbiAgICAgICAgaWYgKCFsb2NhbGVzW25hbWVdICYmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykgJiZcbiAgICAgICAgICAgICAgICBtb2R1bGUgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgb2xkTG9jYWxlID0gZ2xvYmFsTG9jYWxlLl9hYmJyO1xuICAgICAgICAgICAgICAgIHJlcXVpcmUoJy4vbG9jYWxlLycgKyBuYW1lKTtcbiAgICAgICAgICAgICAgICAvLyBiZWNhdXNlIGRlZmluZUxvY2FsZSBjdXJyZW50bHkgYWxzbyBzZXRzIHRoZSBnbG9iYWwgbG9jYWxlLCB3ZVxuICAgICAgICAgICAgICAgIC8vIHdhbnQgdG8gdW5kbyB0aGF0IGZvciBsYXp5IGxvYWRlZCBsb2NhbGVzXG4gICAgICAgICAgICAgICAgbG9jYWxlX2xvY2FsZXNfX2dldFNldEdsb2JhbExvY2FsZShvbGRMb2NhbGUpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkgeyB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxvY2FsZXNbbmFtZV07XG4gICAgfVxuXG4gICAgLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGxvYWQgbG9jYWxlIGFuZCB0aGVuIHNldCB0aGUgZ2xvYmFsIGxvY2FsZS4gIElmXG4gICAgLy8gbm8gYXJndW1lbnRzIGFyZSBwYXNzZWQgaW4sIGl0IHdpbGwgc2ltcGx5IHJldHVybiB0aGUgY3VycmVudCBnbG9iYWxcbiAgICAvLyBsb2NhbGUga2V5LlxuICAgIGZ1bmN0aW9uIGxvY2FsZV9sb2NhbGVzX19nZXRTZXRHbG9iYWxMb2NhbGUgKGtleSwgdmFsdWVzKSB7XG4gICAgICAgIHZhciBkYXRhO1xuICAgICAgICBpZiAoa2V5KSB7XG4gICAgICAgICAgICBpZiAoaXNVbmRlZmluZWQodmFsdWVzKSkge1xuICAgICAgICAgICAgICAgIGRhdGEgPSBsb2NhbGVfbG9jYWxlc19fZ2V0TG9jYWxlKGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBkYXRhID0gZGVmaW5lTG9jYWxlKGtleSwgdmFsdWVzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAvLyBtb21lbnQuZHVyYXRpb24uX2xvY2FsZSA9IG1vbWVudC5fbG9jYWxlID0gZGF0YTtcbiAgICAgICAgICAgICAgICBnbG9iYWxMb2NhbGUgPSBkYXRhO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGdsb2JhbExvY2FsZS5fYWJicjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkZWZpbmVMb2NhbGUgKG5hbWUsIHZhbHVlcykge1xuICAgICAgICBpZiAodmFsdWVzICE9PSBudWxsKSB7XG4gICAgICAgICAgICB2YWx1ZXMuYWJiciA9IG5hbWU7XG4gICAgICAgICAgICBsb2NhbGVzW25hbWVdID0gbG9jYWxlc1tuYW1lXSB8fCBuZXcgTG9jYWxlKCk7XG4gICAgICAgICAgICBsb2NhbGVzW25hbWVdLnNldCh2YWx1ZXMpO1xuXG4gICAgICAgICAgICAvLyBiYWNrd2FyZHMgY29tcGF0IGZvciBub3c6IGFsc28gc2V0IHRoZSBsb2NhbGVcbiAgICAgICAgICAgIGxvY2FsZV9sb2NhbGVzX19nZXRTZXRHbG9iYWxMb2NhbGUobmFtZSk7XG5cbiAgICAgICAgICAgIHJldHVybiBsb2NhbGVzW25hbWVdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gdXNlZnVsIGZvciB0ZXN0aW5nXG4gICAgICAgICAgICBkZWxldGUgbG9jYWxlc1tuYW1lXTtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gcmV0dXJucyBsb2NhbGUgZGF0YVxuICAgIGZ1bmN0aW9uIGxvY2FsZV9sb2NhbGVzX19nZXRMb2NhbGUgKGtleSkge1xuICAgICAgICB2YXIgbG9jYWxlO1xuXG4gICAgICAgIGlmIChrZXkgJiYga2V5Ll9sb2NhbGUgJiYga2V5Ll9sb2NhbGUuX2FiYnIpIHtcbiAgICAgICAgICAgIGtleSA9IGtleS5fbG9jYWxlLl9hYmJyO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFrZXkpIHtcbiAgICAgICAgICAgIHJldHVybiBnbG9iYWxMb2NhbGU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWlzQXJyYXkoa2V5KSkge1xuICAgICAgICAgICAgLy9zaG9ydC1jaXJjdWl0IGV2ZXJ5dGhpbmcgZWxzZVxuICAgICAgICAgICAgbG9jYWxlID0gbG9hZExvY2FsZShrZXkpO1xuICAgICAgICAgICAgaWYgKGxvY2FsZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBsb2NhbGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBrZXkgPSBba2V5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjaG9vc2VMb2NhbGUoa2V5KTtcbiAgICB9XG5cbiAgICB2YXIgYWxpYXNlcyA9IHt9O1xuXG4gICAgZnVuY3Rpb24gYWRkVW5pdEFsaWFzICh1bml0LCBzaG9ydGhhbmQpIHtcbiAgICAgICAgdmFyIGxvd2VyQ2FzZSA9IHVuaXQudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgYWxpYXNlc1tsb3dlckNhc2VdID0gYWxpYXNlc1tsb3dlckNhc2UgKyAncyddID0gYWxpYXNlc1tzaG9ydGhhbmRdID0gdW5pdDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBub3JtYWxpemVVbml0cyh1bml0cykge1xuICAgICAgICByZXR1cm4gdHlwZW9mIHVuaXRzID09PSAnc3RyaW5nJyA/IGFsaWFzZXNbdW5pdHNdIHx8IGFsaWFzZXNbdW5pdHMudG9Mb3dlckNhc2UoKV0gOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbm9ybWFsaXplT2JqZWN0VW5pdHMoaW5wdXRPYmplY3QpIHtcbiAgICAgICAgdmFyIG5vcm1hbGl6ZWRJbnB1dCA9IHt9LFxuICAgICAgICAgICAgbm9ybWFsaXplZFByb3AsXG4gICAgICAgICAgICBwcm9wO1xuXG4gICAgICAgIGZvciAocHJvcCBpbiBpbnB1dE9iamVjdCkge1xuICAgICAgICAgICAgaWYgKGhhc093blByb3AoaW5wdXRPYmplY3QsIHByb3ApKSB7XG4gICAgICAgICAgICAgICAgbm9ybWFsaXplZFByb3AgPSBub3JtYWxpemVVbml0cyhwcm9wKTtcbiAgICAgICAgICAgICAgICBpZiAobm9ybWFsaXplZFByb3ApIHtcbiAgICAgICAgICAgICAgICAgICAgbm9ybWFsaXplZElucHV0W25vcm1hbGl6ZWRQcm9wXSA9IGlucHV0T2JqZWN0W3Byb3BdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBub3JtYWxpemVkSW5wdXQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNGdW5jdGlvbihpbnB1dCkge1xuICAgICAgICByZXR1cm4gaW5wdXQgaW5zdGFuY2VvZiBGdW5jdGlvbiB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaW5wdXQpID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1ha2VHZXRTZXQgKHVuaXQsIGtlZXBUaW1lKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgZ2V0X3NldF9fc2V0KHRoaXMsIHVuaXQsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICB1dGlsc19ob29rc19faG9va3MudXBkYXRlT2Zmc2V0KHRoaXMsIGtlZXBUaW1lKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldF9zZXRfX2dldCh0aGlzLCB1bml0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRfc2V0X19nZXQgKG1vbSwgdW5pdCkge1xuICAgICAgICByZXR1cm4gbW9tLmlzVmFsaWQoKSA/XG4gICAgICAgICAgICBtb20uX2RbJ2dldCcgKyAobW9tLl9pc1VUQyA/ICdVVEMnIDogJycpICsgdW5pdF0oKSA6IE5hTjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRfc2V0X19zZXQgKG1vbSwgdW5pdCwgdmFsdWUpIHtcbiAgICAgICAgaWYgKG1vbS5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIG1vbS5fZFsnc2V0JyArIChtb20uX2lzVVRDID8gJ1VUQycgOiAnJykgKyB1bml0XSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICBmdW5jdGlvbiBnZXRTZXQgKHVuaXRzLCB2YWx1ZSkge1xuICAgICAgICB2YXIgdW5pdDtcbiAgICAgICAgaWYgKHR5cGVvZiB1bml0cyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIGZvciAodW5pdCBpbiB1bml0cykge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0KHVuaXQsIHVuaXRzW3VuaXRdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24odGhpc1t1bml0c10pKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXNbdW5pdHNdKHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB6ZXJvRmlsbChudW1iZXIsIHRhcmdldExlbmd0aCwgZm9yY2VTaWduKSB7XG4gICAgICAgIHZhciBhYnNOdW1iZXIgPSAnJyArIE1hdGguYWJzKG51bWJlciksXG4gICAgICAgICAgICB6ZXJvc1RvRmlsbCA9IHRhcmdldExlbmd0aCAtIGFic051bWJlci5sZW5ndGgsXG4gICAgICAgICAgICBzaWduID0gbnVtYmVyID49IDA7XG4gICAgICAgIHJldHVybiAoc2lnbiA/IChmb3JjZVNpZ24gPyAnKycgOiAnJykgOiAnLScpICtcbiAgICAgICAgICAgIE1hdGgucG93KDEwLCBNYXRoLm1heCgwLCB6ZXJvc1RvRmlsbCkpLnRvU3RyaW5nKCkuc3Vic3RyKDEpICsgYWJzTnVtYmVyO1xuICAgIH1cblxuICAgIHZhciBmb3JtYXR0aW5nVG9rZW5zID0gLyhcXFtbXlxcW10qXFxdKXwoXFxcXCk/KFtIaF1tbShzcyk/fE1vfE1NP00/TT98RG98REREb3xERD9EP0Q/fGRkZD9kP3xkbz98d1tvfHddP3xXW298V10/fFFvP3xZWVlZWVl8WVlZWVl8WVlZWXxZWXxnZyhnZ2c/KT98R0coR0dHPyk/fGV8RXxhfEF8aGg/fEhIP3xtbT98c3M/fFN7MSw5fXx4fFh8eno/fFpaP3wuKS9nO1xuXG4gICAgdmFyIGxvY2FsRm9ybWF0dGluZ1Rva2VucyA9IC8oXFxbW15cXFtdKlxcXSl8KFxcXFwpPyhMVFN8TFR8TEw/TD9MP3xsezEsNH0pL2c7XG5cbiAgICB2YXIgZm9ybWF0RnVuY3Rpb25zID0ge307XG5cbiAgICB2YXIgZm9ybWF0VG9rZW5GdW5jdGlvbnMgPSB7fTtcblxuICAgIC8vIHRva2VuOiAgICAnTSdcbiAgICAvLyBwYWRkZWQ6ICAgWydNTScsIDJdXG4gICAgLy8gb3JkaW5hbDogICdNbydcbiAgICAvLyBjYWxsYmFjazogZnVuY3Rpb24gKCkgeyB0aGlzLm1vbnRoKCkgKyAxIH1cbiAgICBmdW5jdGlvbiBhZGRGb3JtYXRUb2tlbiAodG9rZW4sIHBhZGRlZCwgb3JkaW5hbCwgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIGZ1bmMgPSBjYWxsYmFjaztcbiAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGZ1bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXNbY2FsbGJhY2tdKCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0b2tlbikge1xuICAgICAgICAgICAgZm9ybWF0VG9rZW5GdW5jdGlvbnNbdG9rZW5dID0gZnVuYztcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFkZGVkKSB7XG4gICAgICAgICAgICBmb3JtYXRUb2tlbkZ1bmN0aW9uc1twYWRkZWRbMF1dID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB6ZXJvRmlsbChmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksIHBhZGRlZFsxXSwgcGFkZGVkWzJdKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9yZGluYWwpIHtcbiAgICAgICAgICAgIGZvcm1hdFRva2VuRnVuY3Rpb25zW29yZGluYWxdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5vcmRpbmFsKGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKSwgdG9rZW4pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlbW92ZUZvcm1hdHRpbmdUb2tlbnMoaW5wdXQpIHtcbiAgICAgICAgaWYgKGlucHV0Lm1hdGNoKC9cXFtbXFxzXFxTXS8pKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQucmVwbGFjZSgvXlxcW3xcXF0kL2csICcnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaW5wdXQucmVwbGFjZSgvXFxcXC9nLCAnJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWFrZUZvcm1hdEZ1bmN0aW9uKGZvcm1hdCkge1xuICAgICAgICB2YXIgYXJyYXkgPSBmb3JtYXQubWF0Y2goZm9ybWF0dGluZ1Rva2VucyksIGksIGxlbmd0aDtcblxuICAgICAgICBmb3IgKGkgPSAwLCBsZW5ndGggPSBhcnJheS5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGZvcm1hdFRva2VuRnVuY3Rpb25zW2FycmF5W2ldXSkge1xuICAgICAgICAgICAgICAgIGFycmF5W2ldID0gZm9ybWF0VG9rZW5GdW5jdGlvbnNbYXJyYXlbaV1dO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBhcnJheVtpXSA9IHJlbW92ZUZvcm1hdHRpbmdUb2tlbnMoYXJyYXlbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChtb20pIHtcbiAgICAgICAgICAgIHZhciBvdXRwdXQgPSAnJztcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIG91dHB1dCArPSBhcnJheVtpXSBpbnN0YW5jZW9mIEZ1bmN0aW9uID8gYXJyYXlbaV0uY2FsbChtb20sIGZvcm1hdCkgOiBhcnJheVtpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gZm9ybWF0IGRhdGUgdXNpbmcgbmF0aXZlIGRhdGUgb2JqZWN0XG4gICAgZnVuY3Rpb24gZm9ybWF0TW9tZW50KG0sIGZvcm1hdCkge1xuICAgICAgICBpZiAoIW0uaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gbS5sb2NhbGVEYXRhKCkuaW52YWxpZERhdGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvcm1hdCA9IGV4cGFuZEZvcm1hdChmb3JtYXQsIG0ubG9jYWxlRGF0YSgpKTtcbiAgICAgICAgZm9ybWF0RnVuY3Rpb25zW2Zvcm1hdF0gPSBmb3JtYXRGdW5jdGlvbnNbZm9ybWF0XSB8fCBtYWtlRm9ybWF0RnVuY3Rpb24oZm9ybWF0KTtcblxuICAgICAgICByZXR1cm4gZm9ybWF0RnVuY3Rpb25zW2Zvcm1hdF0obSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZXhwYW5kRm9ybWF0KGZvcm1hdCwgbG9jYWxlKSB7XG4gICAgICAgIHZhciBpID0gNTtcblxuICAgICAgICBmdW5jdGlvbiByZXBsYWNlTG9uZ0RhdGVGb3JtYXRUb2tlbnMoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NhbGUubG9uZ0RhdGVGb3JtYXQoaW5wdXQpIHx8IGlucHV0O1xuICAgICAgICB9XG5cbiAgICAgICAgbG9jYWxGb3JtYXR0aW5nVG9rZW5zLmxhc3RJbmRleCA9IDA7XG4gICAgICAgIHdoaWxlIChpID49IDAgJiYgbG9jYWxGb3JtYXR0aW5nVG9rZW5zLnRlc3QoZm9ybWF0KSkge1xuICAgICAgICAgICAgZm9ybWF0ID0gZm9ybWF0LnJlcGxhY2UobG9jYWxGb3JtYXR0aW5nVG9rZW5zLCByZXBsYWNlTG9uZ0RhdGVGb3JtYXRUb2tlbnMpO1xuICAgICAgICAgICAgbG9jYWxGb3JtYXR0aW5nVG9rZW5zLmxhc3RJbmRleCA9IDA7XG4gICAgICAgICAgICBpIC09IDE7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZm9ybWF0O1xuICAgIH1cblxuICAgIHZhciBtYXRjaDEgICAgICAgICA9IC9cXGQvOyAgICAgICAgICAgIC8vICAgICAgIDAgLSA5XG4gICAgdmFyIG1hdGNoMiAgICAgICAgID0gL1xcZFxcZC87ICAgICAgICAgIC8vICAgICAgMDAgLSA5OVxuICAgIHZhciBtYXRjaDMgICAgICAgICA9IC9cXGR7M30vOyAgICAgICAgIC8vICAgICAwMDAgLSA5OTlcbiAgICB2YXIgbWF0Y2g0ICAgICAgICAgPSAvXFxkezR9LzsgICAgICAgICAvLyAgICAwMDAwIC0gOTk5OVxuICAgIHZhciBtYXRjaDYgICAgICAgICA9IC9bKy1dP1xcZHs2fS87ICAgIC8vIC05OTk5OTkgLSA5OTk5OTlcbiAgICB2YXIgbWF0Y2gxdG8yICAgICAgPSAvXFxkXFxkPy87ICAgICAgICAgLy8gICAgICAgMCAtIDk5XG4gICAgdmFyIG1hdGNoM3RvNCAgICAgID0gL1xcZFxcZFxcZFxcZD8vOyAgICAgLy8gICAgIDk5OSAtIDk5OTlcbiAgICB2YXIgbWF0Y2g1dG82ICAgICAgPSAvXFxkXFxkXFxkXFxkXFxkXFxkPy87IC8vICAgOTk5OTkgLSA5OTk5OTlcbiAgICB2YXIgbWF0Y2gxdG8zICAgICAgPSAvXFxkezEsM30vOyAgICAgICAvLyAgICAgICAwIC0gOTk5XG4gICAgdmFyIG1hdGNoMXRvNCAgICAgID0gL1xcZHsxLDR9LzsgICAgICAgLy8gICAgICAgMCAtIDk5OTlcbiAgICB2YXIgbWF0Y2gxdG82ICAgICAgPSAvWystXT9cXGR7MSw2fS87ICAvLyAtOTk5OTk5IC0gOTk5OTk5XG5cbiAgICB2YXIgbWF0Y2hVbnNpZ25lZCAgPSAvXFxkKy87ICAgICAgICAgICAvLyAgICAgICAwIC0gaW5mXG4gICAgdmFyIG1hdGNoU2lnbmVkICAgID0gL1srLV0/XFxkKy87ICAgICAgLy8gICAgLWluZiAtIGluZlxuXG4gICAgdmFyIG1hdGNoT2Zmc2V0ICAgID0gL1p8WystXVxcZFxcZDo/XFxkXFxkL2dpOyAvLyArMDA6MDAgLTAwOjAwICswMDAwIC0wMDAwIG9yIFpcbiAgICB2YXIgbWF0Y2hTaG9ydE9mZnNldCA9IC9afFsrLV1cXGRcXGQoPzo6P1xcZFxcZCk/L2dpOyAvLyArMDAgLTAwICswMDowMCAtMDA6MDAgKzAwMDAgLTAwMDAgb3IgWlxuXG4gICAgdmFyIG1hdGNoVGltZXN0YW1wID0gL1srLV0/XFxkKyhcXC5cXGR7MSwzfSk/LzsgLy8gMTIzNDU2Nzg5IDEyMzQ1Njc4OS4xMjNcblxuICAgIC8vIGFueSB3b3JkIChvciB0d28pIGNoYXJhY3RlcnMgb3IgbnVtYmVycyBpbmNsdWRpbmcgdHdvL3RocmVlIHdvcmQgbW9udGggaW4gYXJhYmljLlxuICAgIC8vIGluY2x1ZGVzIHNjb3R0aXNoIGdhZWxpYyB0d28gd29yZCBhbmQgaHlwaGVuYXRlZCBtb250aHNcbiAgICB2YXIgbWF0Y2hXb3JkID0gL1swLTldKlsnYS16XFx1MDBBMC1cXHUwNUZGXFx1MDcwMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSt8W1xcdTA2MDAtXFx1MDZGRlxcL10rKFxccyo/W1xcdTA2MDAtXFx1MDZGRl0rKXsxLDJ9L2k7XG5cblxuICAgIHZhciByZWdleGVzID0ge307XG5cbiAgICBmdW5jdGlvbiBhZGRSZWdleFRva2VuICh0b2tlbiwgcmVnZXgsIHN0cmljdFJlZ2V4KSB7XG4gICAgICAgIHJlZ2V4ZXNbdG9rZW5dID0gaXNGdW5jdGlvbihyZWdleCkgPyByZWdleCA6IGZ1bmN0aW9uIChpc1N0cmljdCwgbG9jYWxlRGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuIChpc1N0cmljdCAmJiBzdHJpY3RSZWdleCkgPyBzdHJpY3RSZWdleCA6IHJlZ2V4O1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFBhcnNlUmVnZXhGb3JUb2tlbiAodG9rZW4sIGNvbmZpZykge1xuICAgICAgICBpZiAoIWhhc093blByb3AocmVnZXhlcywgdG9rZW4pKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cCh1bmVzY2FwZUZvcm1hdCh0b2tlbikpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlZ2V4ZXNbdG9rZW5dKGNvbmZpZy5fc3RyaWN0LCBjb25maWcuX2xvY2FsZSk7XG4gICAgfVxuXG4gICAgLy8gQ29kZSBmcm9tIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMzU2MTQ5My9pcy10aGVyZS1hLXJlZ2V4cC1lc2NhcGUtZnVuY3Rpb24taW4tamF2YXNjcmlwdFxuICAgIGZ1bmN0aW9uIHVuZXNjYXBlRm9ybWF0KHMpIHtcbiAgICAgICAgcmV0dXJuIHJlZ2V4RXNjYXBlKHMucmVwbGFjZSgnXFxcXCcsICcnKS5yZXBsYWNlKC9cXFxcKFxcWyl8XFxcXChcXF0pfFxcWyhbXlxcXVxcW10qKVxcXXxcXFxcKC4pL2csIGZ1bmN0aW9uIChtYXRjaGVkLCBwMSwgcDIsIHAzLCBwNCkge1xuICAgICAgICAgICAgcmV0dXJuIHAxIHx8IHAyIHx8IHAzIHx8IHA0O1xuICAgICAgICB9KSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVnZXhFc2NhcGUocykge1xuICAgICAgICByZXR1cm4gcy5yZXBsYWNlKC9bLVxcL1xcXFxeJCorPy4oKXxbXFxde31dL2csICdcXFxcJCYnKTtcbiAgICB9XG5cbiAgICB2YXIgdG9rZW5zID0ge307XG5cbiAgICBmdW5jdGlvbiBhZGRQYXJzZVRva2VuICh0b2tlbiwgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIGksIGZ1bmMgPSBjYWxsYmFjaztcbiAgICAgICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHRva2VuID0gW3Rva2VuXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgZnVuYyA9IGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICAgICAgICAgICAgICBhcnJheVtjYWxsYmFja10gPSB0b0ludChpbnB1dCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCB0b2tlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdG9rZW5zW3Rva2VuW2ldXSA9IGZ1bmM7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGRXZWVrUGFyc2VUb2tlbiAodG9rZW4sIGNhbGxiYWNrKSB7XG4gICAgICAgIGFkZFBhcnNlVG9rZW4odG9rZW4sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZywgdG9rZW4pIHtcbiAgICAgICAgICAgIGNvbmZpZy5fdyA9IGNvbmZpZy5fdyB8fCB7fTtcbiAgICAgICAgICAgIGNhbGxiYWNrKGlucHV0LCBjb25maWcuX3csIGNvbmZpZywgdG9rZW4pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGRUaW1lVG9BcnJheUZyb21Ub2tlbih0b2tlbiwgaW5wdXQsIGNvbmZpZykge1xuICAgICAgICBpZiAoaW5wdXQgIT0gbnVsbCAmJiBoYXNPd25Qcm9wKHRva2VucywgdG9rZW4pKSB7XG4gICAgICAgICAgICB0b2tlbnNbdG9rZW5dKGlucHV0LCBjb25maWcuX2EsIGNvbmZpZywgdG9rZW4pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIFlFQVIgPSAwO1xuICAgIHZhciBNT05USCA9IDE7XG4gICAgdmFyIERBVEUgPSAyO1xuICAgIHZhciBIT1VSID0gMztcbiAgICB2YXIgTUlOVVRFID0gNDtcbiAgICB2YXIgU0VDT05EID0gNTtcbiAgICB2YXIgTUlMTElTRUNPTkQgPSA2O1xuICAgIHZhciBXRUVLID0gNztcbiAgICB2YXIgV0VFS0RBWSA9IDg7XG5cbiAgICBmdW5jdGlvbiBkYXlzSW5Nb250aCh5ZWFyLCBtb250aCkge1xuICAgICAgICByZXR1cm4gbmV3IERhdGUoRGF0ZS5VVEMoeWVhciwgbW9udGggKyAxLCAwKSkuZ2V0VVRDRGF0ZSgpO1xuICAgIH1cblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCdNJywgWydNTScsIDJdLCAnTW8nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1vbnRoKCkgKyAxO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ01NTScsIDAsIDAsIGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLm1vbnRoc1Nob3J0KHRoaXMsIGZvcm1hdCk7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignTU1NTScsIDAsIDAsIGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLm1vbnRocyh0aGlzLCBmb3JtYXQpO1xuICAgIH0pO1xuXG4gICAgLy8gQUxJQVNFU1xuXG4gICAgYWRkVW5pdEFsaWFzKCdtb250aCcsICdNJyk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdNJywgICAgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCdNTScsICAgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ01NTScsICBmdW5jdGlvbiAoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLm1vbnRoc1Nob3J0UmVnZXgoaXNTdHJpY3QpO1xuICAgIH0pO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ01NTU0nLCBmdW5jdGlvbiAoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLm1vbnRoc1JlZ2V4KGlzU3RyaWN0KTtcbiAgICB9KTtcblxuICAgIGFkZFBhcnNlVG9rZW4oWydNJywgJ01NJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICAgICAgYXJyYXlbTU9OVEhdID0gdG9JbnQoaW5wdXQpIC0gMTtcbiAgICB9KTtcblxuICAgIGFkZFBhcnNlVG9rZW4oWydNTU0nLCAnTU1NTSddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcsIHRva2VuKSB7XG4gICAgICAgIHZhciBtb250aCA9IGNvbmZpZy5fbG9jYWxlLm1vbnRoc1BhcnNlKGlucHV0LCB0b2tlbiwgY29uZmlnLl9zdHJpY3QpO1xuICAgICAgICAvLyBpZiB3ZSBkaWRuJ3QgZmluZCBhIG1vbnRoIG5hbWUsIG1hcmsgdGhlIGRhdGUgYXMgaW52YWxpZC5cbiAgICAgICAgaWYgKG1vbnRoICE9IG51bGwpIHtcbiAgICAgICAgICAgIGFycmF5W01PTlRIXSA9IG1vbnRoO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuaW52YWxpZE1vbnRoID0gaW5wdXQ7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIExPQ0FMRVNcblxuICAgIHZhciBNT05USFNfSU5fRk9STUFUID0gL0Rbb0RdPyhcXFtbXlxcW1xcXV0qXFxdfFxccyspK01NTU0/LztcbiAgICB2YXIgZGVmYXVsdExvY2FsZU1vbnRocyA9ICdKYW51YXJ5X0ZlYnJ1YXJ5X01hcmNoX0FwcmlsX01heV9KdW5lX0p1bHlfQXVndXN0X1NlcHRlbWJlcl9PY3RvYmVyX05vdmVtYmVyX0RlY2VtYmVyJy5zcGxpdCgnXycpO1xuICAgIGZ1bmN0aW9uIGxvY2FsZU1vbnRocyAobSwgZm9ybWF0KSB7XG4gICAgICAgIHJldHVybiBpc0FycmF5KHRoaXMuX21vbnRocykgPyB0aGlzLl9tb250aHNbbS5tb250aCgpXSA6XG4gICAgICAgICAgICB0aGlzLl9tb250aHNbTU9OVEhTX0lOX0ZPUk1BVC50ZXN0KGZvcm1hdCkgPyAnZm9ybWF0JyA6ICdzdGFuZGFsb25lJ11bbS5tb250aCgpXTtcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdExvY2FsZU1vbnRoc1Nob3J0ID0gJ0phbl9GZWJfTWFyX0Fwcl9NYXlfSnVuX0p1bF9BdWdfU2VwX09jdF9Ob3ZfRGVjJy5zcGxpdCgnXycpO1xuICAgIGZ1bmN0aW9uIGxvY2FsZU1vbnRoc1Nob3J0IChtLCBmb3JtYXQpIHtcbiAgICAgICAgcmV0dXJuIGlzQXJyYXkodGhpcy5fbW9udGhzU2hvcnQpID8gdGhpcy5fbW9udGhzU2hvcnRbbS5tb250aCgpXSA6XG4gICAgICAgICAgICB0aGlzLl9tb250aHNTaG9ydFtNT05USFNfSU5fRk9STUFULnRlc3QoZm9ybWF0KSA/ICdmb3JtYXQnIDogJ3N0YW5kYWxvbmUnXVttLm1vbnRoKCldO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvY2FsZU1vbnRoc1BhcnNlIChtb250aE5hbWUsIGZvcm1hdCwgc3RyaWN0KSB7XG4gICAgICAgIHZhciBpLCBtb20sIHJlZ2V4O1xuXG4gICAgICAgIGlmICghdGhpcy5fbW9udGhzUGFyc2UpIHtcbiAgICAgICAgICAgIHRoaXMuX21vbnRoc1BhcnNlID0gW107XG4gICAgICAgICAgICB0aGlzLl9sb25nTW9udGhzUGFyc2UgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX3Nob3J0TW9udGhzUGFyc2UgPSBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCAxMjsgaSsrKSB7XG4gICAgICAgICAgICAvLyBtYWtlIHRoZSByZWdleCBpZiB3ZSBkb24ndCBoYXZlIGl0IGFscmVhZHlcbiAgICAgICAgICAgIG1vbSA9IGNyZWF0ZV91dGNfX2NyZWF0ZVVUQyhbMjAwMCwgaV0pO1xuICAgICAgICAgICAgaWYgKHN0cmljdCAmJiAhdGhpcy5fbG9uZ01vbnRoc1BhcnNlW2ldKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbG9uZ01vbnRoc1BhcnNlW2ldID0gbmV3IFJlZ0V4cCgnXicgKyB0aGlzLm1vbnRocyhtb20sICcnKS5yZXBsYWNlKCcuJywgJycpICsgJyQnLCAnaScpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3Nob3J0TW9udGhzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKCdeJyArIHRoaXMubW9udGhzU2hvcnQobW9tLCAnJykucmVwbGFjZSgnLicsICcnKSArICckJywgJ2knKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghc3RyaWN0ICYmICF0aGlzLl9tb250aHNQYXJzZVtpXSkge1xuICAgICAgICAgICAgICAgIHJlZ2V4ID0gJ14nICsgdGhpcy5tb250aHMobW9tLCAnJykgKyAnfF4nICsgdGhpcy5tb250aHNTaG9ydChtb20sICcnKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9tb250aHNQYXJzZVtpXSA9IG5ldyBSZWdFeHAocmVnZXgucmVwbGFjZSgnLicsICcnKSwgJ2knKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHRlc3QgdGhlIHJlZ2V4XG4gICAgICAgICAgICBpZiAoc3RyaWN0ICYmIGZvcm1hdCA9PT0gJ01NTU0nICYmIHRoaXMuX2xvbmdNb250aHNQYXJzZVtpXS50ZXN0KG1vbnRoTmFtZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RyaWN0ICYmIGZvcm1hdCA9PT0gJ01NTScgJiYgdGhpcy5fc2hvcnRNb250aHNQYXJzZVtpXS50ZXN0KG1vbnRoTmFtZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIXN0cmljdCAmJiB0aGlzLl9tb250aHNQYXJzZVtpXS50ZXN0KG1vbnRoTmFtZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIE1PTUVOVFNcblxuICAgIGZ1bmN0aW9uIHNldE1vbnRoIChtb20sIHZhbHVlKSB7XG4gICAgICAgIHZhciBkYXlPZk1vbnRoO1xuXG4gICAgICAgIGlmICghbW9tLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgLy8gTm8gb3BcbiAgICAgICAgICAgIHJldHVybiBtb207XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUT0RPOiBNb3ZlIHRoaXMgb3V0IG9mIGhlcmUhXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IG1vbS5sb2NhbGVEYXRhKCkubW9udGhzUGFyc2UodmFsdWUpO1xuICAgICAgICAgICAgLy8gVE9ETzogQW5vdGhlciBzaWxlbnQgZmFpbHVyZT9cbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGRheU9mTW9udGggPSBNYXRoLm1pbihtb20uZGF0ZSgpLCBkYXlzSW5Nb250aChtb20ueWVhcigpLCB2YWx1ZSkpO1xuICAgICAgICBtb20uX2RbJ3NldCcgKyAobW9tLl9pc1VUQyA/ICdVVEMnIDogJycpICsgJ01vbnRoJ10odmFsdWUsIGRheU9mTW9udGgpO1xuICAgICAgICByZXR1cm4gbW9tO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFNldE1vbnRoICh2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgc2V0TW9udGgodGhpcywgdmFsdWUpO1xuICAgICAgICAgICAgdXRpbHNfaG9va3NfX2hvb2tzLnVwZGF0ZU9mZnNldCh0aGlzLCB0cnVlKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGdldF9zZXRfX2dldCh0aGlzLCAnTW9udGgnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldERheXNJbk1vbnRoICgpIHtcbiAgICAgICAgcmV0dXJuIGRheXNJbk1vbnRoKHRoaXMueWVhcigpLCB0aGlzLm1vbnRoKCkpO1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0TW9udGhzU2hvcnRSZWdleCA9IG1hdGNoV29yZDtcbiAgICBmdW5jdGlvbiBtb250aHNTaG9ydFJlZ2V4IChpc1N0cmljdCkge1xuICAgICAgICBpZiAodGhpcy5fbW9udGhzUGFyc2VFeGFjdCkge1xuICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfbW9udGhzUmVnZXgnKSkge1xuICAgICAgICAgICAgICAgIGNvbXB1dGVNb250aHNQYXJzZS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzU3RyaWN0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vbnRoc1Nob3J0U3RyaWN0UmVnZXg7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb250aHNTaG9ydFJlZ2V4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vbnRoc1Nob3J0U3RyaWN0UmVnZXggJiYgaXNTdHJpY3QgP1xuICAgICAgICAgICAgICAgIHRoaXMuX21vbnRoc1Nob3J0U3RyaWN0UmVnZXggOiB0aGlzLl9tb250aHNTaG9ydFJlZ2V4O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRNb250aHNSZWdleCA9IG1hdGNoV29yZDtcbiAgICBmdW5jdGlvbiBtb250aHNSZWdleCAoaXNTdHJpY3QpIHtcbiAgICAgICAgaWYgKHRoaXMuX21vbnRoc1BhcnNlRXhhY3QpIHtcbiAgICAgICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX21vbnRoc1JlZ2V4JykpIHtcbiAgICAgICAgICAgICAgICBjb21wdXRlTW9udGhzUGFyc2UuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc1N0cmljdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb250aHNTdHJpY3RSZWdleDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vbnRoc1JlZ2V4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vbnRoc1N0cmljdFJlZ2V4ICYmIGlzU3RyaWN0ID9cbiAgICAgICAgICAgICAgICB0aGlzLl9tb250aHNTdHJpY3RSZWdleCA6IHRoaXMuX21vbnRoc1JlZ2V4O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29tcHV0ZU1vbnRoc1BhcnNlICgpIHtcbiAgICAgICAgZnVuY3Rpb24gY21wTGVuUmV2KGEsIGIpIHtcbiAgICAgICAgICAgIHJldHVybiBiLmxlbmd0aCAtIGEubGVuZ3RoO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHNob3J0UGllY2VzID0gW10sIGxvbmdQaWVjZXMgPSBbXSwgbWl4ZWRQaWVjZXMgPSBbXSxcbiAgICAgICAgICAgIGksIG1vbTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDEyOyBpKyspIHtcbiAgICAgICAgICAgIC8vIG1ha2UgdGhlIHJlZ2V4IGlmIHdlIGRvbid0IGhhdmUgaXQgYWxyZWFkeVxuICAgICAgICAgICAgbW9tID0gY3JlYXRlX3V0Y19fY3JlYXRlVVRDKFsyMDAwLCBpXSk7XG4gICAgICAgICAgICBzaG9ydFBpZWNlcy5wdXNoKHRoaXMubW9udGhzU2hvcnQobW9tLCAnJykpO1xuICAgICAgICAgICAgbG9uZ1BpZWNlcy5wdXNoKHRoaXMubW9udGhzKG1vbSwgJycpKTtcbiAgICAgICAgICAgIG1peGVkUGllY2VzLnB1c2godGhpcy5tb250aHMobW9tLCAnJykpO1xuICAgICAgICAgICAgbWl4ZWRQaWVjZXMucHVzaCh0aGlzLm1vbnRoc1Nob3J0KG1vbSwgJycpKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBTb3J0aW5nIG1ha2VzIHN1cmUgaWYgb25lIG1vbnRoIChvciBhYmJyKSBpcyBhIHByZWZpeCBvZiBhbm90aGVyIGl0XG4gICAgICAgIC8vIHdpbGwgbWF0Y2ggdGhlIGxvbmdlciBwaWVjZS5cbiAgICAgICAgc2hvcnRQaWVjZXMuc29ydChjbXBMZW5SZXYpO1xuICAgICAgICBsb25nUGllY2VzLnNvcnQoY21wTGVuUmV2KTtcbiAgICAgICAgbWl4ZWRQaWVjZXMuc29ydChjbXBMZW5SZXYpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMTI7IGkrKykge1xuICAgICAgICAgICAgc2hvcnRQaWVjZXNbaV0gPSByZWdleEVzY2FwZShzaG9ydFBpZWNlc1tpXSk7XG4gICAgICAgICAgICBsb25nUGllY2VzW2ldID0gcmVnZXhFc2NhcGUobG9uZ1BpZWNlc1tpXSk7XG4gICAgICAgICAgICBtaXhlZFBpZWNlc1tpXSA9IHJlZ2V4RXNjYXBlKG1peGVkUGllY2VzW2ldKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX21vbnRoc1JlZ2V4ID0gbmV3IFJlZ0V4cCgnXignICsgbWl4ZWRQaWVjZXMuam9pbignfCcpICsgJyknLCAnaScpO1xuICAgICAgICB0aGlzLl9tb250aHNTaG9ydFJlZ2V4ID0gdGhpcy5fbW9udGhzUmVnZXg7XG4gICAgICAgIHRoaXMuX21vbnRoc1N0cmljdFJlZ2V4ID0gbmV3IFJlZ0V4cCgnXignICsgbG9uZ1BpZWNlcy5qb2luKCd8JykgKyAnKSQnLCAnaScpO1xuICAgICAgICB0aGlzLl9tb250aHNTaG9ydFN0cmljdFJlZ2V4ID0gbmV3IFJlZ0V4cCgnXignICsgc2hvcnRQaWVjZXMuam9pbignfCcpICsgJykkJywgJ2knKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjaGVja092ZXJmbG93IChtKSB7XG4gICAgICAgIHZhciBvdmVyZmxvdztcbiAgICAgICAgdmFyIGEgPSBtLl9hO1xuXG4gICAgICAgIGlmIChhICYmIGdldFBhcnNpbmdGbGFncyhtKS5vdmVyZmxvdyA9PT0gLTIpIHtcbiAgICAgICAgICAgIG92ZXJmbG93ID1cbiAgICAgICAgICAgICAgICBhW01PTlRIXSAgICAgICA8IDAgfHwgYVtNT05USF0gICAgICAgPiAxMSAgPyBNT05USCA6XG4gICAgICAgICAgICAgICAgYVtEQVRFXSAgICAgICAgPCAxIHx8IGFbREFURV0gICAgICAgID4gZGF5c0luTW9udGgoYVtZRUFSXSwgYVtNT05USF0pID8gREFURSA6XG4gICAgICAgICAgICAgICAgYVtIT1VSXSAgICAgICAgPCAwIHx8IGFbSE9VUl0gICAgICAgID4gMjQgfHwgKGFbSE9VUl0gPT09IDI0ICYmIChhW01JTlVURV0gIT09IDAgfHwgYVtTRUNPTkRdICE9PSAwIHx8IGFbTUlMTElTRUNPTkRdICE9PSAwKSkgPyBIT1VSIDpcbiAgICAgICAgICAgICAgICBhW01JTlVURV0gICAgICA8IDAgfHwgYVtNSU5VVEVdICAgICAgPiA1OSAgPyBNSU5VVEUgOlxuICAgICAgICAgICAgICAgIGFbU0VDT05EXSAgICAgIDwgMCB8fCBhW1NFQ09ORF0gICAgICA+IDU5ICA/IFNFQ09ORCA6XG4gICAgICAgICAgICAgICAgYVtNSUxMSVNFQ09ORF0gPCAwIHx8IGFbTUlMTElTRUNPTkRdID4gOTk5ID8gTUlMTElTRUNPTkQgOlxuICAgICAgICAgICAgICAgIC0xO1xuXG4gICAgICAgICAgICBpZiAoZ2V0UGFyc2luZ0ZsYWdzKG0pLl9vdmVyZmxvd0RheU9mWWVhciAmJiAob3ZlcmZsb3cgPCBZRUFSIHx8IG92ZXJmbG93ID4gREFURSkpIHtcbiAgICAgICAgICAgICAgICBvdmVyZmxvdyA9IERBVEU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZ2V0UGFyc2luZ0ZsYWdzKG0pLl9vdmVyZmxvd1dlZWtzICYmIG92ZXJmbG93ID09PSAtMSkge1xuICAgICAgICAgICAgICAgIG92ZXJmbG93ID0gV0VFSztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChnZXRQYXJzaW5nRmxhZ3MobSkuX292ZXJmbG93V2Vla2RheSAmJiBvdmVyZmxvdyA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICBvdmVyZmxvdyA9IFdFRUtEQVk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhtKS5vdmVyZmxvdyA9IG92ZXJmbG93O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gd2Fybihtc2cpIHtcbiAgICAgICAgaWYgKHV0aWxzX2hvb2tzX19ob29rcy5zdXBwcmVzc0RlcHJlY2F0aW9uV2FybmluZ3MgPT09IGZhbHNlICYmXG4gICAgICAgICAgICAgICAgKHR5cGVvZiBjb25zb2xlICE9PSAgJ3VuZGVmaW5lZCcpICYmIGNvbnNvbGUud2Fybikge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKCdEZXByZWNhdGlvbiB3YXJuaW5nOiAnICsgbXNnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRlcHJlY2F0ZShtc2csIGZuKSB7XG4gICAgICAgIHZhciBmaXJzdFRpbWUgPSB0cnVlO1xuXG4gICAgICAgIHJldHVybiBleHRlbmQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKGZpcnN0VGltZSkge1xuICAgICAgICAgICAgICAgIHdhcm4obXNnICsgJ1xcbkFyZ3VtZW50czogJyArIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykuam9pbignLCAnKSArICdcXG4nICsgKG5ldyBFcnJvcigpKS5zdGFjayk7XG4gICAgICAgICAgICAgICAgZmlyc3RUaW1lID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfSwgZm4pO1xuICAgIH1cblxuICAgIHZhciBkZXByZWNhdGlvbnMgPSB7fTtcblxuICAgIGZ1bmN0aW9uIGRlcHJlY2F0ZVNpbXBsZShuYW1lLCBtc2cpIHtcbiAgICAgICAgaWYgKCFkZXByZWNhdGlvbnNbbmFtZV0pIHtcbiAgICAgICAgICAgIHdhcm4obXNnKTtcbiAgICAgICAgICAgIGRlcHJlY2F0aW9uc1tuYW1lXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB1dGlsc19ob29rc19faG9va3Muc3VwcHJlc3NEZXByZWNhdGlvbldhcm5pbmdzID0gZmFsc2U7XG5cbiAgICAvLyBpc28gODYwMSByZWdleFxuICAgIC8vIDAwMDAtMDAtMDAgMDAwMC1XMDAgb3IgMDAwMC1XMDAtMCArIFQgKyAwMCBvciAwMDowMCBvciAwMDowMDowMCBvciAwMDowMDowMC4wMDAgKyArMDA6MDAgb3IgKzAwMDAgb3IgKzAwKVxuICAgIHZhciBleHRlbmRlZElzb1JlZ2V4ID0gL15cXHMqKCg/OlsrLV1cXGR7Nn18XFxkezR9KS0oPzpcXGRcXGQtXFxkXFxkfFdcXGRcXGQtXFxkfFdcXGRcXGR8XFxkXFxkXFxkfFxcZFxcZCkpKD86KFR8ICkoXFxkXFxkKD86OlxcZFxcZCg/OjpcXGRcXGQoPzpbLixdXFxkKyk/KT8pPykoW1xcK1xcLV1cXGRcXGQoPzo6P1xcZFxcZCk/fFxccypaKT8pPy87XG4gICAgdmFyIGJhc2ljSXNvUmVnZXggPSAvXlxccyooKD86WystXVxcZHs2fXxcXGR7NH0pKD86XFxkXFxkXFxkXFxkfFdcXGRcXGRcXGR8V1xcZFxcZHxcXGRcXGRcXGR8XFxkXFxkKSkoPzooVHwgKShcXGRcXGQoPzpcXGRcXGQoPzpcXGRcXGQoPzpbLixdXFxkKyk/KT8pPykoW1xcK1xcLV1cXGRcXGQoPzo6P1xcZFxcZCk/fFxccypaKT8pPy87XG5cbiAgICB2YXIgdHpSZWdleCA9IC9afFsrLV1cXGRcXGQoPzo6P1xcZFxcZCk/LztcblxuICAgIHZhciBpc29EYXRlcyA9IFtcbiAgICAgICAgWydZWVlZWVktTU0tREQnLCAvWystXVxcZHs2fS1cXGRcXGQtXFxkXFxkL10sXG4gICAgICAgIFsnWVlZWS1NTS1ERCcsIC9cXGR7NH0tXFxkXFxkLVxcZFxcZC9dLFxuICAgICAgICBbJ0dHR0ctW1ddV1ctRScsIC9cXGR7NH0tV1xcZFxcZC1cXGQvXSxcbiAgICAgICAgWydHR0dHLVtXXVdXJywgL1xcZHs0fS1XXFxkXFxkLywgZmFsc2VdLFxuICAgICAgICBbJ1lZWVktREREJywgL1xcZHs0fS1cXGR7M30vXSxcbiAgICAgICAgWydZWVlZLU1NJywgL1xcZHs0fS1cXGRcXGQvLCBmYWxzZV0sXG4gICAgICAgIFsnWVlZWVlZTU1ERCcsIC9bKy1dXFxkezEwfS9dLFxuICAgICAgICBbJ1lZWVlNTUREJywgL1xcZHs4fS9dLFxuICAgICAgICAvLyBZWVlZTU0gaXMgTk9UIGFsbG93ZWQgYnkgdGhlIHN0YW5kYXJkXG4gICAgICAgIFsnR0dHR1tXXVdXRScsIC9cXGR7NH1XXFxkezN9L10sXG4gICAgICAgIFsnR0dHR1tXXVdXJywgL1xcZHs0fVdcXGR7Mn0vLCBmYWxzZV0sXG4gICAgICAgIFsnWVlZWURERCcsIC9cXGR7N30vXVxuICAgIF07XG5cbiAgICAvLyBpc28gdGltZSBmb3JtYXRzIGFuZCByZWdleGVzXG4gICAgdmFyIGlzb1RpbWVzID0gW1xuICAgICAgICBbJ0hIOm1tOnNzLlNTU1MnLCAvXFxkXFxkOlxcZFxcZDpcXGRcXGRcXC5cXGQrL10sXG4gICAgICAgIFsnSEg6bW06c3MsU1NTUycsIC9cXGRcXGQ6XFxkXFxkOlxcZFxcZCxcXGQrL10sXG4gICAgICAgIFsnSEg6bW06c3MnLCAvXFxkXFxkOlxcZFxcZDpcXGRcXGQvXSxcbiAgICAgICAgWydISDptbScsIC9cXGRcXGQ6XFxkXFxkL10sXG4gICAgICAgIFsnSEhtbXNzLlNTU1MnLCAvXFxkXFxkXFxkXFxkXFxkXFxkXFwuXFxkKy9dLFxuICAgICAgICBbJ0hIbW1zcyxTU1NTJywgL1xcZFxcZFxcZFxcZFxcZFxcZCxcXGQrL10sXG4gICAgICAgIFsnSEhtbXNzJywgL1xcZFxcZFxcZFxcZFxcZFxcZC9dLFxuICAgICAgICBbJ0hIbW0nLCAvXFxkXFxkXFxkXFxkL10sXG4gICAgICAgIFsnSEgnLCAvXFxkXFxkL11cbiAgICBdO1xuXG4gICAgdmFyIGFzcE5ldEpzb25SZWdleCA9IC9eXFwvP0RhdGVcXCgoXFwtP1xcZCspL2k7XG5cbiAgICAvLyBkYXRlIGZyb20gaXNvIGZvcm1hdFxuICAgIGZ1bmN0aW9uIGNvbmZpZ0Zyb21JU08oY29uZmlnKSB7XG4gICAgICAgIHZhciBpLCBsLFxuICAgICAgICAgICAgc3RyaW5nID0gY29uZmlnLl9pLFxuICAgICAgICAgICAgbWF0Y2ggPSBleHRlbmRlZElzb1JlZ2V4LmV4ZWMoc3RyaW5nKSB8fCBiYXNpY0lzb1JlZ2V4LmV4ZWMoc3RyaW5nKSxcbiAgICAgICAgICAgIGFsbG93VGltZSwgZGF0ZUZvcm1hdCwgdGltZUZvcm1hdCwgdHpGb3JtYXQ7XG5cbiAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5pc28gPSB0cnVlO1xuXG4gICAgICAgICAgICBmb3IgKGkgPSAwLCBsID0gaXNvRGF0ZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzb0RhdGVzW2ldWzFdLmV4ZWMobWF0Y2hbMV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGVGb3JtYXQgPSBpc29EYXRlc1tpXVswXTtcbiAgICAgICAgICAgICAgICAgICAgYWxsb3dUaW1lID0gaXNvRGF0ZXNbaV1bMl0gIT09IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZGF0ZUZvcm1hdCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1hdGNoWzNdKSB7XG4gICAgICAgICAgICAgICAgZm9yIChpID0gMCwgbCA9IGlzb1RpbWVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNvVGltZXNbaV1bMV0uZXhlYyhtYXRjaFszXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG1hdGNoWzJdIHNob3VsZCBiZSAnVCcgb3Igc3BhY2VcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVGb3JtYXQgPSAobWF0Y2hbMl0gfHwgJyAnKSArIGlzb1RpbWVzW2ldWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRpbWVGb3JtYXQgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghYWxsb3dUaW1lICYmIHRpbWVGb3JtYXQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtYXRjaFs0XSkge1xuICAgICAgICAgICAgICAgIGlmICh0elJlZ2V4LmV4ZWMobWF0Y2hbNF0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHR6Rm9ybWF0ID0gJ1onO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uZmlnLl9mID0gZGF0ZUZvcm1hdCArICh0aW1lRm9ybWF0IHx8ICcnKSArICh0ekZvcm1hdCB8fCAnJyk7XG4gICAgICAgICAgICBjb25maWdGcm9tU3RyaW5nQW5kRm9ybWF0KGNvbmZpZyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGRhdGUgZnJvbSBpc28gZm9ybWF0IG9yIGZhbGxiYWNrXG4gICAgZnVuY3Rpb24gY29uZmlnRnJvbVN0cmluZyhjb25maWcpIHtcbiAgICAgICAgdmFyIG1hdGNoZWQgPSBhc3BOZXRKc29uUmVnZXguZXhlYyhjb25maWcuX2kpO1xuXG4gICAgICAgIGlmIChtYXRjaGVkICE9PSBudWxsKSB7XG4gICAgICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZSgrbWF0Y2hlZFsxXSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25maWdGcm9tSVNPKGNvbmZpZyk7XG4gICAgICAgIGlmIChjb25maWcuX2lzVmFsaWQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBkZWxldGUgY29uZmlnLl9pc1ZhbGlkO1xuICAgICAgICAgICAgdXRpbHNfaG9va3NfX2hvb2tzLmNyZWF0ZUZyb21JbnB1dEZhbGxiYWNrKGNvbmZpZyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB1dGlsc19ob29rc19faG9va3MuY3JlYXRlRnJvbUlucHV0RmFsbGJhY2sgPSBkZXByZWNhdGUoXG4gICAgICAgICdtb21lbnQgY29uc3RydWN0aW9uIGZhbGxzIGJhY2sgdG8ganMgRGF0ZS4gVGhpcyBpcyAnICtcbiAgICAgICAgJ2Rpc2NvdXJhZ2VkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdXBjb21pbmcgbWFqb3IgJyArXG4gICAgICAgICdyZWxlYXNlLiBQbGVhc2UgcmVmZXIgdG8gJyArXG4gICAgICAgICdodHRwczovL2dpdGh1Yi5jb20vbW9tZW50L21vbWVudC9pc3N1ZXMvMTQwNyBmb3IgbW9yZSBpbmZvLicsXG4gICAgICAgIGZ1bmN0aW9uIChjb25maWcpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKGNvbmZpZy5faSArIChjb25maWcuX3VzZVVUQyA/ICcgVVRDJyA6ICcnKSk7XG4gICAgICAgIH1cbiAgICApO1xuXG4gICAgZnVuY3Rpb24gY3JlYXRlRGF0ZSAoeSwgbSwgZCwgaCwgTSwgcywgbXMpIHtcbiAgICAgICAgLy9jYW4ndCBqdXN0IGFwcGx5KCkgdG8gY3JlYXRlIGEgZGF0ZTpcbiAgICAgICAgLy9odHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzE4MTM0OC9pbnN0YW50aWF0aW5nLWEtamF2YXNjcmlwdC1vYmplY3QtYnktY2FsbGluZy1wcm90b3R5cGUtY29uc3RydWN0b3ItYXBwbHlcbiAgICAgICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSh5LCBtLCBkLCBoLCBNLCBzLCBtcyk7XG5cbiAgICAgICAgLy90aGUgZGF0ZSBjb25zdHJ1Y3RvciByZW1hcHMgeWVhcnMgMC05OSB0byAxOTAwLTE5OTlcbiAgICAgICAgaWYgKHkgPCAxMDAgJiYgeSA+PSAwICYmIGlzRmluaXRlKGRhdGUuZ2V0RnVsbFllYXIoKSkpIHtcbiAgICAgICAgICAgIGRhdGUuc2V0RnVsbFllYXIoeSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlVVRDRGF0ZSAoeSkge1xuICAgICAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKERhdGUuVVRDLmFwcGx5KG51bGwsIGFyZ3VtZW50cykpO1xuXG4gICAgICAgIC8vdGhlIERhdGUuVVRDIGZ1bmN0aW9uIHJlbWFwcyB5ZWFycyAwLTk5IHRvIDE5MDAtMTk5OVxuICAgICAgICBpZiAoeSA8IDEwMCAmJiB5ID49IDAgJiYgaXNGaW5pdGUoZGF0ZS5nZXRVVENGdWxsWWVhcigpKSkge1xuICAgICAgICAgICAgZGF0ZS5zZXRVVENGdWxsWWVhcih5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGF0ZTtcbiAgICB9XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbignWScsIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHkgPSB0aGlzLnllYXIoKTtcbiAgICAgICAgcmV0dXJuIHkgPD0gOTk5OSA/ICcnICsgeSA6ICcrJyArIHk7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1lZJywgMl0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMueWVhcigpICUgMTAwO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydZWVlZJywgICA0XSwgICAgICAgMCwgJ3llYXInKTtcbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1lZWVlZJywgIDVdLCAgICAgICAwLCAneWVhcicpO1xuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnWVlZWVlZJywgNiwgdHJ1ZV0sIDAsICd5ZWFyJyk7XG5cbiAgICAvLyBBTElBU0VTXG5cbiAgICBhZGRVbml0QWxpYXMoJ3llYXInLCAneScpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignWScsICAgICAgbWF0Y2hTaWduZWQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1lZJywgICAgIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbiAgICBhZGRSZWdleFRva2VuKCdZWVlZJywgICBtYXRjaDF0bzQsIG1hdGNoNCk7XG4gICAgYWRkUmVnZXhUb2tlbignWVlZWVknLCAgbWF0Y2gxdG82LCBtYXRjaDYpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1lZWVlZWScsIG1hdGNoMXRvNiwgbWF0Y2g2KTtcblxuICAgIGFkZFBhcnNlVG9rZW4oWydZWVlZWScsICdZWVlZWVknXSwgWUVBUik7XG4gICAgYWRkUGFyc2VUb2tlbignWVlZWScsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICAgICAgYXJyYXlbWUVBUl0gPSBpbnB1dC5sZW5ndGggPT09IDIgPyB1dGlsc19ob29rc19faG9va3MucGFyc2VUd29EaWdpdFllYXIoaW5wdXQpIDogdG9JbnQoaW5wdXQpO1xuICAgIH0pO1xuICAgIGFkZFBhcnNlVG9rZW4oJ1lZJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgICAgICBhcnJheVtZRUFSXSA9IHV0aWxzX2hvb2tzX19ob29rcy5wYXJzZVR3b0RpZ2l0WWVhcihpbnB1dCk7XG4gICAgfSk7XG4gICAgYWRkUGFyc2VUb2tlbignWScsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICAgICAgYXJyYXlbWUVBUl0gPSBwYXJzZUludChpbnB1dCwgMTApO1xuICAgIH0pO1xuXG4gICAgLy8gSEVMUEVSU1xuXG4gICAgZnVuY3Rpb24gZGF5c0luWWVhcih5ZWFyKSB7XG4gICAgICAgIHJldHVybiBpc0xlYXBZZWFyKHllYXIpID8gMzY2IDogMzY1O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzTGVhcFllYXIoeWVhcikge1xuICAgICAgICByZXR1cm4gKHllYXIgJSA0ID09PSAwICYmIHllYXIgJSAxMDAgIT09IDApIHx8IHllYXIgJSA0MDAgPT09IDA7XG4gICAgfVxuXG4gICAgLy8gSE9PS1NcblxuICAgIHV0aWxzX2hvb2tzX19ob29rcy5wYXJzZVR3b0RpZ2l0WWVhciA9IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICByZXR1cm4gdG9JbnQoaW5wdXQpICsgKHRvSW50KGlucHV0KSA+IDY4ID8gMTkwMCA6IDIwMDApO1xuICAgIH07XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICB2YXIgZ2V0U2V0WWVhciA9IG1ha2VHZXRTZXQoJ0Z1bGxZZWFyJywgZmFsc2UpO1xuXG4gICAgZnVuY3Rpb24gZ2V0SXNMZWFwWWVhciAoKSB7XG4gICAgICAgIHJldHVybiBpc0xlYXBZZWFyKHRoaXMueWVhcigpKTtcbiAgICB9XG5cbiAgICAvLyBzdGFydC1vZi1maXJzdC13ZWVrIC0gc3RhcnQtb2YteWVhclxuICAgIGZ1bmN0aW9uIGZpcnN0V2Vla09mZnNldCh5ZWFyLCBkb3csIGRveSkge1xuICAgICAgICB2YXIgLy8gZmlyc3Qtd2VlayBkYXkgLS0gd2hpY2ggamFudWFyeSBpcyBhbHdheXMgaW4gdGhlIGZpcnN0IHdlZWsgKDQgZm9yIGlzbywgMSBmb3Igb3RoZXIpXG4gICAgICAgICAgICBmd2QgPSA3ICsgZG93IC0gZG95LFxuICAgICAgICAgICAgLy8gZmlyc3Qtd2VlayBkYXkgbG9jYWwgd2Vla2RheSAtLSB3aGljaCBsb2NhbCB3ZWVrZGF5IGlzIGZ3ZFxuICAgICAgICAgICAgZndkbHcgPSAoNyArIGNyZWF0ZVVUQ0RhdGUoeWVhciwgMCwgZndkKS5nZXRVVENEYXkoKSAtIGRvdykgJSA3O1xuXG4gICAgICAgIHJldHVybiAtZndkbHcgKyBmd2QgLSAxO1xuICAgIH1cblxuICAgIC8vaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JU09fd2Vla19kYXRlI0NhbGN1bGF0aW5nX2FfZGF0ZV9naXZlbl90aGVfeWVhci4yQ193ZWVrX251bWJlcl9hbmRfd2Vla2RheVxuICAgIGZ1bmN0aW9uIGRheU9mWWVhckZyb21XZWVrcyh5ZWFyLCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSkge1xuICAgICAgICB2YXIgbG9jYWxXZWVrZGF5ID0gKDcgKyB3ZWVrZGF5IC0gZG93KSAlIDcsXG4gICAgICAgICAgICB3ZWVrT2Zmc2V0ID0gZmlyc3RXZWVrT2Zmc2V0KHllYXIsIGRvdywgZG95KSxcbiAgICAgICAgICAgIGRheU9mWWVhciA9IDEgKyA3ICogKHdlZWsgLSAxKSArIGxvY2FsV2Vla2RheSArIHdlZWtPZmZzZXQsXG4gICAgICAgICAgICByZXNZZWFyLCByZXNEYXlPZlllYXI7XG5cbiAgICAgICAgaWYgKGRheU9mWWVhciA8PSAwKSB7XG4gICAgICAgICAgICByZXNZZWFyID0geWVhciAtIDE7XG4gICAgICAgICAgICByZXNEYXlPZlllYXIgPSBkYXlzSW5ZZWFyKHJlc1llYXIpICsgZGF5T2ZZZWFyO1xuICAgICAgICB9IGVsc2UgaWYgKGRheU9mWWVhciA+IGRheXNJblllYXIoeWVhcikpIHtcbiAgICAgICAgICAgIHJlc1llYXIgPSB5ZWFyICsgMTtcbiAgICAgICAgICAgIHJlc0RheU9mWWVhciA9IGRheU9mWWVhciAtIGRheXNJblllYXIoeWVhcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXNZZWFyID0geWVhcjtcbiAgICAgICAgICAgIHJlc0RheU9mWWVhciA9IGRheU9mWWVhcjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB5ZWFyOiByZXNZZWFyLFxuICAgICAgICAgICAgZGF5T2ZZZWFyOiByZXNEYXlPZlllYXJcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB3ZWVrT2ZZZWFyKG1vbSwgZG93LCBkb3kpIHtcbiAgICAgICAgdmFyIHdlZWtPZmZzZXQgPSBmaXJzdFdlZWtPZmZzZXQobW9tLnllYXIoKSwgZG93LCBkb3kpLFxuICAgICAgICAgICAgd2VlayA9IE1hdGguZmxvb3IoKG1vbS5kYXlPZlllYXIoKSAtIHdlZWtPZmZzZXQgLSAxKSAvIDcpICsgMSxcbiAgICAgICAgICAgIHJlc1dlZWssIHJlc1llYXI7XG5cbiAgICAgICAgaWYgKHdlZWsgPCAxKSB7XG4gICAgICAgICAgICByZXNZZWFyID0gbW9tLnllYXIoKSAtIDE7XG4gICAgICAgICAgICByZXNXZWVrID0gd2VlayArIHdlZWtzSW5ZZWFyKHJlc1llYXIsIGRvdywgZG95KTtcbiAgICAgICAgfSBlbHNlIGlmICh3ZWVrID4gd2Vla3NJblllYXIobW9tLnllYXIoKSwgZG93LCBkb3kpKSB7XG4gICAgICAgICAgICByZXNXZWVrID0gd2VlayAtIHdlZWtzSW5ZZWFyKG1vbS55ZWFyKCksIGRvdywgZG95KTtcbiAgICAgICAgICAgIHJlc1llYXIgPSBtb20ueWVhcigpICsgMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc1llYXIgPSBtb20ueWVhcigpO1xuICAgICAgICAgICAgcmVzV2VlayA9IHdlZWs7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgd2VlazogcmVzV2VlayxcbiAgICAgICAgICAgIHllYXI6IHJlc1llYXJcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB3ZWVrc0luWWVhcih5ZWFyLCBkb3csIGRveSkge1xuICAgICAgICB2YXIgd2Vla09mZnNldCA9IGZpcnN0V2Vla09mZnNldCh5ZWFyLCBkb3csIGRveSksXG4gICAgICAgICAgICB3ZWVrT2Zmc2V0TmV4dCA9IGZpcnN0V2Vla09mZnNldCh5ZWFyICsgMSwgZG93LCBkb3kpO1xuICAgICAgICByZXR1cm4gKGRheXNJblllYXIoeWVhcikgLSB3ZWVrT2Zmc2V0ICsgd2Vla09mZnNldE5leHQpIC8gNztcbiAgICB9XG5cbiAgICAvLyBQaWNrIHRoZSBmaXJzdCBkZWZpbmVkIG9mIHR3byBvciB0aHJlZSBhcmd1bWVudHMuXG4gICAgZnVuY3Rpb24gZGVmYXVsdHMoYSwgYiwgYykge1xuICAgICAgICBpZiAoYSAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYiAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gYjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjdXJyZW50RGF0ZUFycmF5KGNvbmZpZykge1xuICAgICAgICAvLyBob29rcyBpcyBhY3R1YWxseSB0aGUgZXhwb3J0ZWQgbW9tZW50IG9iamVjdFxuICAgICAgICB2YXIgbm93VmFsdWUgPSBuZXcgRGF0ZSh1dGlsc19ob29rc19faG9va3Mubm93KCkpO1xuICAgICAgICBpZiAoY29uZmlnLl91c2VVVEMpIHtcbiAgICAgICAgICAgIHJldHVybiBbbm93VmFsdWUuZ2V0VVRDRnVsbFllYXIoKSwgbm93VmFsdWUuZ2V0VVRDTW9udGgoKSwgbm93VmFsdWUuZ2V0VVRDRGF0ZSgpXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW25vd1ZhbHVlLmdldEZ1bGxZZWFyKCksIG5vd1ZhbHVlLmdldE1vbnRoKCksIG5vd1ZhbHVlLmdldERhdGUoKV07XG4gICAgfVxuXG4gICAgLy8gY29udmVydCBhbiBhcnJheSB0byBhIGRhdGUuXG4gICAgLy8gdGhlIGFycmF5IHNob3VsZCBtaXJyb3IgdGhlIHBhcmFtZXRlcnMgYmVsb3dcbiAgICAvLyBub3RlOiBhbGwgdmFsdWVzIHBhc3QgdGhlIHllYXIgYXJlIG9wdGlvbmFsIGFuZCB3aWxsIGRlZmF1bHQgdG8gdGhlIGxvd2VzdCBwb3NzaWJsZSB2YWx1ZS5cbiAgICAvLyBbeWVhciwgbW9udGgsIGRheSAsIGhvdXIsIG1pbnV0ZSwgc2Vjb25kLCBtaWxsaXNlY29uZF1cbiAgICBmdW5jdGlvbiBjb25maWdGcm9tQXJyYXkgKGNvbmZpZykge1xuICAgICAgICB2YXIgaSwgZGF0ZSwgaW5wdXQgPSBbXSwgY3VycmVudERhdGUsIHllYXJUb1VzZTtcblxuICAgICAgICBpZiAoY29uZmlnLl9kKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjdXJyZW50RGF0ZSA9IGN1cnJlbnREYXRlQXJyYXkoY29uZmlnKTtcblxuICAgICAgICAvL2NvbXB1dGUgZGF5IG9mIHRoZSB5ZWFyIGZyb20gd2Vla3MgYW5kIHdlZWtkYXlzXG4gICAgICAgIGlmIChjb25maWcuX3cgJiYgY29uZmlnLl9hW0RBVEVdID09IG51bGwgJiYgY29uZmlnLl9hW01PTlRIXSA9PSBudWxsKSB7XG4gICAgICAgICAgICBkYXlPZlllYXJGcm9tV2Vla0luZm8oY29uZmlnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vaWYgdGhlIGRheSBvZiB0aGUgeWVhciBpcyBzZXQsIGZpZ3VyZSBvdXQgd2hhdCBpdCBpc1xuICAgICAgICBpZiAoY29uZmlnLl9kYXlPZlllYXIpIHtcbiAgICAgICAgICAgIHllYXJUb1VzZSA9IGRlZmF1bHRzKGNvbmZpZy5fYVtZRUFSXSwgY3VycmVudERhdGVbWUVBUl0pO1xuXG4gICAgICAgICAgICBpZiAoY29uZmlnLl9kYXlPZlllYXIgPiBkYXlzSW5ZZWFyKHllYXJUb1VzZSkpIHtcbiAgICAgICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5fb3ZlcmZsb3dEYXlPZlllYXIgPSB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkYXRlID0gY3JlYXRlVVRDRGF0ZSh5ZWFyVG9Vc2UsIDAsIGNvbmZpZy5fZGF5T2ZZZWFyKTtcbiAgICAgICAgICAgIGNvbmZpZy5fYVtNT05USF0gPSBkYXRlLmdldFVUQ01vbnRoKCk7XG4gICAgICAgICAgICBjb25maWcuX2FbREFURV0gPSBkYXRlLmdldFVUQ0RhdGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIERlZmF1bHQgdG8gY3VycmVudCBkYXRlLlxuICAgICAgICAvLyAqIGlmIG5vIHllYXIsIG1vbnRoLCBkYXkgb2YgbW9udGggYXJlIGdpdmVuLCBkZWZhdWx0IHRvIHRvZGF5XG4gICAgICAgIC8vICogaWYgZGF5IG9mIG1vbnRoIGlzIGdpdmVuLCBkZWZhdWx0IG1vbnRoIGFuZCB5ZWFyXG4gICAgICAgIC8vICogaWYgbW9udGggaXMgZ2l2ZW4sIGRlZmF1bHQgb25seSB5ZWFyXG4gICAgICAgIC8vICogaWYgeWVhciBpcyBnaXZlbiwgZG9uJ3QgZGVmYXVsdCBhbnl0aGluZ1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMyAmJiBjb25maWcuX2FbaV0gPT0gbnVsbDsgKytpKSB7XG4gICAgICAgICAgICBjb25maWcuX2FbaV0gPSBpbnB1dFtpXSA9IGN1cnJlbnREYXRlW2ldO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gWmVybyBvdXQgd2hhdGV2ZXIgd2FzIG5vdCBkZWZhdWx0ZWQsIGluY2x1ZGluZyB0aW1lXG4gICAgICAgIGZvciAoOyBpIDwgNzsgaSsrKSB7XG4gICAgICAgICAgICBjb25maWcuX2FbaV0gPSBpbnB1dFtpXSA9IChjb25maWcuX2FbaV0gPT0gbnVsbCkgPyAoaSA9PT0gMiA/IDEgOiAwKSA6IGNvbmZpZy5fYVtpXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENoZWNrIGZvciAyNDowMDowMC4wMDBcbiAgICAgICAgaWYgKGNvbmZpZy5fYVtIT1VSXSA9PT0gMjQgJiZcbiAgICAgICAgICAgICAgICBjb25maWcuX2FbTUlOVVRFXSA9PT0gMCAmJlxuICAgICAgICAgICAgICAgIGNvbmZpZy5fYVtTRUNPTkRdID09PSAwICYmXG4gICAgICAgICAgICAgICAgY29uZmlnLl9hW01JTExJU0VDT05EXSA9PT0gMCkge1xuICAgICAgICAgICAgY29uZmlnLl9uZXh0RGF5ID0gdHJ1ZTtcbiAgICAgICAgICAgIGNvbmZpZy5fYVtIT1VSXSA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICBjb25maWcuX2QgPSAoY29uZmlnLl91c2VVVEMgPyBjcmVhdGVVVENEYXRlIDogY3JlYXRlRGF0ZSkuYXBwbHkobnVsbCwgaW5wdXQpO1xuICAgICAgICAvLyBBcHBseSB0aW1lem9uZSBvZmZzZXQgZnJvbSBpbnB1dC4gVGhlIGFjdHVhbCB1dGNPZmZzZXQgY2FuIGJlIGNoYW5nZWRcbiAgICAgICAgLy8gd2l0aCBwYXJzZVpvbmUuXG4gICAgICAgIGlmIChjb25maWcuX3R6bSAhPSBudWxsKSB7XG4gICAgICAgICAgICBjb25maWcuX2Quc2V0VVRDTWludXRlcyhjb25maWcuX2QuZ2V0VVRDTWludXRlcygpIC0gY29uZmlnLl90em0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbmZpZy5fbmV4dERheSkge1xuICAgICAgICAgICAgY29uZmlnLl9hW0hPVVJdID0gMjQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkYXlPZlllYXJGcm9tV2Vla0luZm8oY29uZmlnKSB7XG4gICAgICAgIHZhciB3LCB3ZWVrWWVhciwgd2Vlaywgd2Vla2RheSwgZG93LCBkb3ksIHRlbXAsIHdlZWtkYXlPdmVyZmxvdztcblxuICAgICAgICB3ID0gY29uZmlnLl93O1xuICAgICAgICBpZiAody5HRyAhPSBudWxsIHx8IHcuVyAhPSBudWxsIHx8IHcuRSAhPSBudWxsKSB7XG4gICAgICAgICAgICBkb3cgPSAxO1xuICAgICAgICAgICAgZG95ID0gNDtcblxuICAgICAgICAgICAgLy8gVE9ETzogV2UgbmVlZCB0byB0YWtlIHRoZSBjdXJyZW50IGlzb1dlZWtZZWFyLCBidXQgdGhhdCBkZXBlbmRzIG9uXG4gICAgICAgICAgICAvLyBob3cgd2UgaW50ZXJwcmV0IG5vdyAobG9jYWwsIHV0YywgZml4ZWQgb2Zmc2V0KS4gU28gY3JlYXRlXG4gICAgICAgICAgICAvLyBhIG5vdyB2ZXJzaW9uIG9mIGN1cnJlbnQgY29uZmlnICh0YWtlIGxvY2FsL3V0Yy9vZmZzZXQgZmxhZ3MsIGFuZFxuICAgICAgICAgICAgLy8gY3JlYXRlIG5vdykuXG4gICAgICAgICAgICB3ZWVrWWVhciA9IGRlZmF1bHRzKHcuR0csIGNvbmZpZy5fYVtZRUFSXSwgd2Vla09mWWVhcihsb2NhbF9fY3JlYXRlTG9jYWwoKSwgMSwgNCkueWVhcik7XG4gICAgICAgICAgICB3ZWVrID0gZGVmYXVsdHMody5XLCAxKTtcbiAgICAgICAgICAgIHdlZWtkYXkgPSBkZWZhdWx0cyh3LkUsIDEpO1xuICAgICAgICAgICAgaWYgKHdlZWtkYXkgPCAxIHx8IHdlZWtkYXkgPiA3KSB7XG4gICAgICAgICAgICAgICAgd2Vla2RheU92ZXJmbG93ID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRvdyA9IGNvbmZpZy5fbG9jYWxlLl93ZWVrLmRvdztcbiAgICAgICAgICAgIGRveSA9IGNvbmZpZy5fbG9jYWxlLl93ZWVrLmRveTtcblxuICAgICAgICAgICAgd2Vla1llYXIgPSBkZWZhdWx0cyh3LmdnLCBjb25maWcuX2FbWUVBUl0sIHdlZWtPZlllYXIobG9jYWxfX2NyZWF0ZUxvY2FsKCksIGRvdywgZG95KS55ZWFyKTtcbiAgICAgICAgICAgIHdlZWsgPSBkZWZhdWx0cyh3LncsIDEpO1xuXG4gICAgICAgICAgICBpZiAody5kICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAvLyB3ZWVrZGF5IC0tIGxvdyBkYXkgbnVtYmVycyBhcmUgY29uc2lkZXJlZCBuZXh0IHdlZWtcbiAgICAgICAgICAgICAgICB3ZWVrZGF5ID0gdy5kO1xuICAgICAgICAgICAgICAgIGlmICh3ZWVrZGF5IDwgMCB8fCB3ZWVrZGF5ID4gNikge1xuICAgICAgICAgICAgICAgICAgICB3ZWVrZGF5T3ZlcmZsb3cgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAody5lICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAvLyBsb2NhbCB3ZWVrZGF5IC0tIGNvdW50aW5nIHN0YXJ0cyBmcm9tIGJlZ2luaW5nIG9mIHdlZWtcbiAgICAgICAgICAgICAgICB3ZWVrZGF5ID0gdy5lICsgZG93O1xuICAgICAgICAgICAgICAgIGlmICh3LmUgPCAwIHx8IHcuZSA+IDYpIHtcbiAgICAgICAgICAgICAgICAgICAgd2Vla2RheU92ZXJmbG93ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIGRlZmF1bHQgdG8gYmVnaW5pbmcgb2Ygd2Vla1xuICAgICAgICAgICAgICAgIHdlZWtkYXkgPSBkb3c7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHdlZWsgPCAxIHx8IHdlZWsgPiB3ZWVrc0luWWVhcih3ZWVrWWVhciwgZG93LCBkb3kpKSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5fb3ZlcmZsb3dXZWVrcyA9IHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAod2Vla2RheU92ZXJmbG93ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLl9vdmVyZmxvd1dlZWtkYXkgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGVtcCA9IGRheU9mWWVhckZyb21XZWVrcyh3ZWVrWWVhciwgd2Vlaywgd2Vla2RheSwgZG93LCBkb3kpO1xuICAgICAgICAgICAgY29uZmlnLl9hW1lFQVJdID0gdGVtcC55ZWFyO1xuICAgICAgICAgICAgY29uZmlnLl9kYXlPZlllYXIgPSB0ZW1wLmRheU9mWWVhcjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGNvbnN0YW50IHRoYXQgcmVmZXJzIHRvIHRoZSBJU08gc3RhbmRhcmRcbiAgICB1dGlsc19ob29rc19faG9va3MuSVNPXzg2MDEgPSBmdW5jdGlvbiAoKSB7fTtcblxuICAgIC8vIGRhdGUgZnJvbSBzdHJpbmcgYW5kIGZvcm1hdCBzdHJpbmdcbiAgICBmdW5jdGlvbiBjb25maWdGcm9tU3RyaW5nQW5kRm9ybWF0KGNvbmZpZykge1xuICAgICAgICAvLyBUT0RPOiBNb3ZlIHRoaXMgdG8gYW5vdGhlciBwYXJ0IG9mIHRoZSBjcmVhdGlvbiBmbG93IHRvIHByZXZlbnQgY2lyY3VsYXIgZGVwc1xuICAgICAgICBpZiAoY29uZmlnLl9mID09PSB1dGlsc19ob29rc19faG9va3MuSVNPXzg2MDEpIHtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21JU08oY29uZmlnKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbmZpZy5fYSA9IFtdO1xuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5lbXB0eSA9IHRydWU7XG5cbiAgICAgICAgLy8gVGhpcyBhcnJheSBpcyB1c2VkIHRvIG1ha2UgYSBEYXRlLCBlaXRoZXIgd2l0aCBgbmV3IERhdGVgIG9yIGBEYXRlLlVUQ2BcbiAgICAgICAgdmFyIHN0cmluZyA9ICcnICsgY29uZmlnLl9pLFxuICAgICAgICAgICAgaSwgcGFyc2VkSW5wdXQsIHRva2VucywgdG9rZW4sIHNraXBwZWQsXG4gICAgICAgICAgICBzdHJpbmdMZW5ndGggPSBzdHJpbmcubGVuZ3RoLFxuICAgICAgICAgICAgdG90YWxQYXJzZWRJbnB1dExlbmd0aCA9IDA7XG5cbiAgICAgICAgdG9rZW5zID0gZXhwYW5kRm9ybWF0KGNvbmZpZy5fZiwgY29uZmlnLl9sb2NhbGUpLm1hdGNoKGZvcm1hdHRpbmdUb2tlbnMpIHx8IFtdO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRva2VuID0gdG9rZW5zW2ldO1xuICAgICAgICAgICAgcGFyc2VkSW5wdXQgPSAoc3RyaW5nLm1hdGNoKGdldFBhcnNlUmVnZXhGb3JUb2tlbih0b2tlbiwgY29uZmlnKSkgfHwgW10pWzBdO1xuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ3Rva2VuJywgdG9rZW4sICdwYXJzZWRJbnB1dCcsIHBhcnNlZElucHV0LFxuICAgICAgICAgICAgLy8gICAgICAgICAncmVnZXgnLCBnZXRQYXJzZVJlZ2V4Rm9yVG9rZW4odG9rZW4sIGNvbmZpZykpO1xuICAgICAgICAgICAgaWYgKHBhcnNlZElucHV0KSB7XG4gICAgICAgICAgICAgICAgc2tpcHBlZCA9IHN0cmluZy5zdWJzdHIoMCwgc3RyaW5nLmluZGV4T2YocGFyc2VkSW5wdXQpKTtcbiAgICAgICAgICAgICAgICBpZiAoc2tpcHBlZC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLnVudXNlZElucHV0LnB1c2goc2tpcHBlZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHN0cmluZyA9IHN0cmluZy5zbGljZShzdHJpbmcuaW5kZXhPZihwYXJzZWRJbnB1dCkgKyBwYXJzZWRJbnB1dC5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIHRvdGFsUGFyc2VkSW5wdXRMZW5ndGggKz0gcGFyc2VkSW5wdXQubGVuZ3RoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gZG9uJ3QgcGFyc2UgaWYgaXQncyBub3QgYSBrbm93biB0b2tlblxuICAgICAgICAgICAgaWYgKGZvcm1hdFRva2VuRnVuY3Rpb25zW3Rva2VuXSkge1xuICAgICAgICAgICAgICAgIGlmIChwYXJzZWRJbnB1dCkge1xuICAgICAgICAgICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5lbXB0eSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykudW51c2VkVG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBhZGRUaW1lVG9BcnJheUZyb21Ub2tlbih0b2tlbiwgcGFyc2VkSW5wdXQsIGNvbmZpZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjb25maWcuX3N0cmljdCAmJiAhcGFyc2VkSW5wdXQpIHtcbiAgICAgICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS51bnVzZWRUb2tlbnMucHVzaCh0b2tlbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBhZGQgcmVtYWluaW5nIHVucGFyc2VkIGlucHV0IGxlbmd0aCB0byB0aGUgc3RyaW5nXG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmNoYXJzTGVmdE92ZXIgPSBzdHJpbmdMZW5ndGggLSB0b3RhbFBhcnNlZElucHV0TGVuZ3RoO1xuICAgICAgICBpZiAoc3RyaW5nLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLnVudXNlZElucHV0LnB1c2goc3RyaW5nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGNsZWFyIF8xMmggZmxhZyBpZiBob3VyIGlzIDw9IDEyXG4gICAgICAgIGlmIChnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5iaWdIb3VyID09PSB0cnVlICYmXG4gICAgICAgICAgICAgICAgY29uZmlnLl9hW0hPVVJdIDw9IDEyICYmXG4gICAgICAgICAgICAgICAgY29uZmlnLl9hW0hPVVJdID4gMCkge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuYmlnSG91ciA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICAvLyBoYW5kbGUgbWVyaWRpZW1cbiAgICAgICAgY29uZmlnLl9hW0hPVVJdID0gbWVyaWRpZW1GaXhXcmFwKGNvbmZpZy5fbG9jYWxlLCBjb25maWcuX2FbSE9VUl0sIGNvbmZpZy5fbWVyaWRpZW0pO1xuXG4gICAgICAgIGNvbmZpZ0Zyb21BcnJheShjb25maWcpO1xuICAgICAgICBjaGVja092ZXJmbG93KGNvbmZpZyk7XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBtZXJpZGllbUZpeFdyYXAgKGxvY2FsZSwgaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgdmFyIGlzUG07XG5cbiAgICAgICAgaWYgKG1lcmlkaWVtID09IG51bGwpIHtcbiAgICAgICAgICAgIC8vIG5vdGhpbmcgdG8gZG9cbiAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsb2NhbGUubWVyaWRpZW1Ib3VyICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NhbGUubWVyaWRpZW1Ib3VyKGhvdXIsIG1lcmlkaWVtKTtcbiAgICAgICAgfSBlbHNlIGlmIChsb2NhbGUuaXNQTSAhPSBudWxsKSB7XG4gICAgICAgICAgICAvLyBGYWxsYmFja1xuICAgICAgICAgICAgaXNQbSA9IGxvY2FsZS5pc1BNKG1lcmlkaWVtKTtcbiAgICAgICAgICAgIGlmIChpc1BtICYmIGhvdXIgPCAxMikge1xuICAgICAgICAgICAgICAgIGhvdXIgKz0gMTI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWlzUG0gJiYgaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gdGhpcyBpcyBub3Qgc3VwcG9zZWQgdG8gaGFwcGVuXG4gICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGRhdGUgZnJvbSBzdHJpbmcgYW5kIGFycmF5IG9mIGZvcm1hdCBzdHJpbmdzXG4gICAgZnVuY3Rpb24gY29uZmlnRnJvbVN0cmluZ0FuZEFycmF5KGNvbmZpZykge1xuICAgICAgICB2YXIgdGVtcENvbmZpZyxcbiAgICAgICAgICAgIGJlc3RNb21lbnQsXG5cbiAgICAgICAgICAgIHNjb3JlVG9CZWF0LFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIGN1cnJlbnRTY29yZTtcblxuICAgICAgICBpZiAoY29uZmlnLl9mLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuaW52YWxpZEZvcm1hdCA9IHRydWU7XG4gICAgICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZShOYU4pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGNvbmZpZy5fZi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY3VycmVudFNjb3JlID0gMDtcbiAgICAgICAgICAgIHRlbXBDb25maWcgPSBjb3B5Q29uZmlnKHt9LCBjb25maWcpO1xuICAgICAgICAgICAgaWYgKGNvbmZpZy5fdXNlVVRDICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0ZW1wQ29uZmlnLl91c2VVVEMgPSBjb25maWcuX3VzZVVUQztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRlbXBDb25maWcuX2YgPSBjb25maWcuX2ZbaV07XG4gICAgICAgICAgICBjb25maWdGcm9tU3RyaW5nQW5kRm9ybWF0KHRlbXBDb25maWcpO1xuXG4gICAgICAgICAgICBpZiAoIXZhbGlkX19pc1ZhbGlkKHRlbXBDb25maWcpKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGlmIHRoZXJlIGlzIGFueSBpbnB1dCB0aGF0IHdhcyBub3QgcGFyc2VkIGFkZCBhIHBlbmFsdHkgZm9yIHRoYXQgZm9ybWF0XG4gICAgICAgICAgICBjdXJyZW50U2NvcmUgKz0gZ2V0UGFyc2luZ0ZsYWdzKHRlbXBDb25maWcpLmNoYXJzTGVmdE92ZXI7XG5cbiAgICAgICAgICAgIC8vb3IgdG9rZW5zXG4gICAgICAgICAgICBjdXJyZW50U2NvcmUgKz0gZ2V0UGFyc2luZ0ZsYWdzKHRlbXBDb25maWcpLnVudXNlZFRva2Vucy5sZW5ndGggKiAxMDtcblxuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKHRlbXBDb25maWcpLnNjb3JlID0gY3VycmVudFNjb3JlO1xuXG4gICAgICAgICAgICBpZiAoc2NvcmVUb0JlYXQgPT0gbnVsbCB8fCBjdXJyZW50U2NvcmUgPCBzY29yZVRvQmVhdCkge1xuICAgICAgICAgICAgICAgIHNjb3JlVG9CZWF0ID0gY3VycmVudFNjb3JlO1xuICAgICAgICAgICAgICAgIGJlc3RNb21lbnQgPSB0ZW1wQ29uZmlnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZXh0ZW5kKGNvbmZpZywgYmVzdE1vbWVudCB8fCB0ZW1wQ29uZmlnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb25maWdGcm9tT2JqZWN0KGNvbmZpZykge1xuICAgICAgICBpZiAoY29uZmlnLl9kKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaSA9IG5vcm1hbGl6ZU9iamVjdFVuaXRzKGNvbmZpZy5faSk7XG4gICAgICAgIGNvbmZpZy5fYSA9IG1hcChbaS55ZWFyLCBpLm1vbnRoLCBpLmRheSB8fCBpLmRhdGUsIGkuaG91ciwgaS5taW51dGUsIGkuc2Vjb25kLCBpLm1pbGxpc2Vjb25kXSwgZnVuY3Rpb24gKG9iaikge1xuICAgICAgICAgICAgcmV0dXJuIG9iaiAmJiBwYXJzZUludChvYmosIDEwKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uZmlnRnJvbUFycmF5KGNvbmZpZyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlRnJvbUNvbmZpZyAoY29uZmlnKSB7XG4gICAgICAgIHZhciByZXMgPSBuZXcgTW9tZW50KGNoZWNrT3ZlcmZsb3cocHJlcGFyZUNvbmZpZyhjb25maWcpKSk7XG4gICAgICAgIGlmIChyZXMuX25leHREYXkpIHtcbiAgICAgICAgICAgIC8vIEFkZGluZyBpcyBzbWFydCBlbm91Z2ggYXJvdW5kIERTVFxuICAgICAgICAgICAgcmVzLmFkZCgxLCAnZCcpO1xuICAgICAgICAgICAgcmVzLl9uZXh0RGF5ID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwcmVwYXJlQ29uZmlnIChjb25maWcpIHtcbiAgICAgICAgdmFyIGlucHV0ID0gY29uZmlnLl9pLFxuICAgICAgICAgICAgZm9ybWF0ID0gY29uZmlnLl9mO1xuXG4gICAgICAgIGNvbmZpZy5fbG9jYWxlID0gY29uZmlnLl9sb2NhbGUgfHwgbG9jYWxlX2xvY2FsZXNfX2dldExvY2FsZShjb25maWcuX2wpO1xuXG4gICAgICAgIGlmIChpbnB1dCA9PT0gbnVsbCB8fCAoZm9ybWF0ID09PSB1bmRlZmluZWQgJiYgaW5wdXQgPT09ICcnKSkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbGlkX19jcmVhdGVJbnZhbGlkKHtudWxsSW5wdXQ6IHRydWV9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBjb25maWcuX2kgPSBpbnB1dCA9IGNvbmZpZy5fbG9jYWxlLnByZXBhcnNlKGlucHV0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc01vbWVudChpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgTW9tZW50KGNoZWNrT3ZlcmZsb3coaW5wdXQpKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0FycmF5KGZvcm1hdCkpIHtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21TdHJpbmdBbmRBcnJheShjb25maWcpO1xuICAgICAgICB9IGVsc2UgaWYgKGZvcm1hdCkge1xuICAgICAgICAgICAgY29uZmlnRnJvbVN0cmluZ0FuZEZvcm1hdChjb25maWcpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzRGF0ZShpbnB1dCkpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fZCA9IGlucHV0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uZmlnRnJvbUlucHV0KGNvbmZpZyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXZhbGlkX19pc1ZhbGlkKGNvbmZpZykpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fZCA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY29uZmlnO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbmZpZ0Zyb21JbnB1dChjb25maWcpIHtcbiAgICAgICAgdmFyIGlucHV0ID0gY29uZmlnLl9pO1xuICAgICAgICBpZiAoaW5wdXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUodXRpbHNfaG9va3NfX2hvb2tzLm5vdygpKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0RhdGUoaW5wdXQpKSB7XG4gICAgICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZSgraW5wdXQpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21TdHJpbmcoY29uZmlnKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0FycmF5KGlucHV0KSkge1xuICAgICAgICAgICAgY29uZmlnLl9hID0gbWFwKGlucHV0LnNsaWNlKDApLCBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlSW50KG9iaiwgMTApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb25maWdGcm9tQXJyYXkoY29uZmlnKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YoaW5wdXQpID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgY29uZmlnRnJvbU9iamVjdChjb25maWcpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZihpbnB1dCkgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAvLyBmcm9tIG1pbGxpc2Vjb25kc1xuICAgICAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoaW5wdXQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdXRpbHNfaG9va3NfX2hvb2tzLmNyZWF0ZUZyb21JbnB1dEZhbGxiYWNrKGNvbmZpZyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVMb2NhbE9yVVRDIChpbnB1dCwgZm9ybWF0LCBsb2NhbGUsIHN0cmljdCwgaXNVVEMpIHtcbiAgICAgICAgdmFyIGMgPSB7fTtcblxuICAgICAgICBpZiAodHlwZW9mKGxvY2FsZSkgPT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgc3RyaWN0ID0gbG9jYWxlO1xuICAgICAgICAgICAgbG9jYWxlID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIC8vIG9iamVjdCBjb25zdHJ1Y3Rpb24gbXVzdCBiZSBkb25lIHRoaXMgd2F5LlxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vbW9tZW50L21vbWVudC9pc3N1ZXMvMTQyM1xuICAgICAgICBjLl9pc0FNb21lbnRPYmplY3QgPSB0cnVlO1xuICAgICAgICBjLl91c2VVVEMgPSBjLl9pc1VUQyA9IGlzVVRDO1xuICAgICAgICBjLl9sID0gbG9jYWxlO1xuICAgICAgICBjLl9pID0gaW5wdXQ7XG4gICAgICAgIGMuX2YgPSBmb3JtYXQ7XG4gICAgICAgIGMuX3N0cmljdCA9IHN0cmljdDtcblxuICAgICAgICByZXR1cm4gY3JlYXRlRnJvbUNvbmZpZyhjKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2NhbF9fY3JlYXRlTG9jYWwgKGlucHV0LCBmb3JtYXQsIGxvY2FsZSwgc3RyaWN0KSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVMb2NhbE9yVVRDKGlucHV0LCBmb3JtYXQsIGxvY2FsZSwgc3RyaWN0LCBmYWxzZSk7XG4gICAgfVxuXG4gICAgdmFyIHByb3RvdHlwZU1pbiA9IGRlcHJlY2F0ZShcbiAgICAgICAgICdtb21lbnQoKS5taW4gaXMgZGVwcmVjYXRlZCwgdXNlIG1vbWVudC5taW4gaW5zdGVhZC4gaHR0cHM6Ly9naXRodWIuY29tL21vbWVudC9tb21lbnQvaXNzdWVzLzE1NDgnLFxuICAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgIHZhciBvdGhlciA9IGxvY2FsX19jcmVhdGVMb2NhbC5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgIGlmICh0aGlzLmlzVmFsaWQoKSAmJiBvdGhlci5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgICAgICAgcmV0dXJuIG90aGVyIDwgdGhpcyA/IHRoaXMgOiBvdGhlcjtcbiAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICByZXR1cm4gdmFsaWRfX2NyZWF0ZUludmFsaWQoKTtcbiAgICAgICAgICAgICB9XG4gICAgICAgICB9XG4gICAgICk7XG5cbiAgICB2YXIgcHJvdG90eXBlTWF4ID0gZGVwcmVjYXRlKFxuICAgICAgICAnbW9tZW50KCkubWF4IGlzIGRlcHJlY2F0ZWQsIHVzZSBtb21lbnQubWF4IGluc3RlYWQuIGh0dHBzOi8vZ2l0aHViLmNvbS9tb21lbnQvbW9tZW50L2lzc3Vlcy8xNTQ4JyxcbiAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIG90aGVyID0gbG9jYWxfX2NyZWF0ZUxvY2FsLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICBpZiAodGhpcy5pc1ZhbGlkKCkgJiYgb3RoZXIuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG90aGVyID4gdGhpcyA/IHRoaXMgOiBvdGhlcjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbGlkX19jcmVhdGVJbnZhbGlkKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICApO1xuXG4gICAgLy8gUGljayBhIG1vbWVudCBtIGZyb20gbW9tZW50cyBzbyB0aGF0IG1bZm5dKG90aGVyKSBpcyB0cnVlIGZvciBhbGxcbiAgICAvLyBvdGhlci4gVGhpcyByZWxpZXMgb24gdGhlIGZ1bmN0aW9uIGZuIHRvIGJlIHRyYW5zaXRpdmUuXG4gICAgLy9cbiAgICAvLyBtb21lbnRzIHNob3VsZCBlaXRoZXIgYmUgYW4gYXJyYXkgb2YgbW9tZW50IG9iamVjdHMgb3IgYW4gYXJyYXksIHdob3NlXG4gICAgLy8gZmlyc3QgZWxlbWVudCBpcyBhbiBhcnJheSBvZiBtb21lbnQgb2JqZWN0cy5cbiAgICBmdW5jdGlvbiBwaWNrQnkoZm4sIG1vbWVudHMpIHtcbiAgICAgICAgdmFyIHJlcywgaTtcbiAgICAgICAgaWYgKG1vbWVudHMubGVuZ3RoID09PSAxICYmIGlzQXJyYXkobW9tZW50c1swXSkpIHtcbiAgICAgICAgICAgIG1vbWVudHMgPSBtb21lbnRzWzBdO1xuICAgICAgICB9XG4gICAgICAgIGlmICghbW9tZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NhbF9fY3JlYXRlTG9jYWwoKTtcbiAgICAgICAgfVxuICAgICAgICByZXMgPSBtb21lbnRzWzBdO1xuICAgICAgICBmb3IgKGkgPSAxOyBpIDwgbW9tZW50cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgaWYgKCFtb21lbnRzW2ldLmlzVmFsaWQoKSB8fCBtb21lbnRzW2ldW2ZuXShyZXMpKSB7XG4gICAgICAgICAgICAgICAgcmVzID0gbW9tZW50c1tpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cblxuICAgIC8vIFRPRE86IFVzZSBbXS5zb3J0IGluc3RlYWQ/XG4gICAgZnVuY3Rpb24gbWluICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMCk7XG5cbiAgICAgICAgcmV0dXJuIHBpY2tCeSgnaXNCZWZvcmUnLCBhcmdzKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYXggKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTtcblxuICAgICAgICByZXR1cm4gcGlja0J5KCdpc0FmdGVyJywgYXJncyk7XG4gICAgfVxuXG4gICAgdmFyIG5vdyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIERhdGUubm93ID8gRGF0ZS5ub3coKSA6ICsobmV3IERhdGUoKSk7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIER1cmF0aW9uIChkdXJhdGlvbikge1xuICAgICAgICB2YXIgbm9ybWFsaXplZElucHV0ID0gbm9ybWFsaXplT2JqZWN0VW5pdHMoZHVyYXRpb24pLFxuICAgICAgICAgICAgeWVhcnMgPSBub3JtYWxpemVkSW5wdXQueWVhciB8fCAwLFxuICAgICAgICAgICAgcXVhcnRlcnMgPSBub3JtYWxpemVkSW5wdXQucXVhcnRlciB8fCAwLFxuICAgICAgICAgICAgbW9udGhzID0gbm9ybWFsaXplZElucHV0Lm1vbnRoIHx8IDAsXG4gICAgICAgICAgICB3ZWVrcyA9IG5vcm1hbGl6ZWRJbnB1dC53ZWVrIHx8IDAsXG4gICAgICAgICAgICBkYXlzID0gbm9ybWFsaXplZElucHV0LmRheSB8fCAwLFxuICAgICAgICAgICAgaG91cnMgPSBub3JtYWxpemVkSW5wdXQuaG91ciB8fCAwLFxuICAgICAgICAgICAgbWludXRlcyA9IG5vcm1hbGl6ZWRJbnB1dC5taW51dGUgfHwgMCxcbiAgICAgICAgICAgIHNlY29uZHMgPSBub3JtYWxpemVkSW5wdXQuc2Vjb25kIHx8IDAsXG4gICAgICAgICAgICBtaWxsaXNlY29uZHMgPSBub3JtYWxpemVkSW5wdXQubWlsbGlzZWNvbmQgfHwgMDtcblxuICAgICAgICAvLyByZXByZXNlbnRhdGlvbiBmb3IgZGF0ZUFkZFJlbW92ZVxuICAgICAgICB0aGlzLl9taWxsaXNlY29uZHMgPSArbWlsbGlzZWNvbmRzICtcbiAgICAgICAgICAgIHNlY29uZHMgKiAxZTMgKyAvLyAxMDAwXG4gICAgICAgICAgICBtaW51dGVzICogNmU0ICsgLy8gMTAwMCAqIDYwXG4gICAgICAgICAgICBob3VycyAqIDM2ZTU7IC8vIDEwMDAgKiA2MCAqIDYwXG4gICAgICAgIC8vIEJlY2F1c2Ugb2YgZGF0ZUFkZFJlbW92ZSB0cmVhdHMgMjQgaG91cnMgYXMgZGlmZmVyZW50IGZyb20gYVxuICAgICAgICAvLyBkYXkgd2hlbiB3b3JraW5nIGFyb3VuZCBEU1QsIHdlIG5lZWQgdG8gc3RvcmUgdGhlbSBzZXBhcmF0ZWx5XG4gICAgICAgIHRoaXMuX2RheXMgPSArZGF5cyArXG4gICAgICAgICAgICB3ZWVrcyAqIDc7XG4gICAgICAgIC8vIEl0IGlzIGltcG9zc2libGUgdHJhbnNsYXRlIG1vbnRocyBpbnRvIGRheXMgd2l0aG91dCBrbm93aW5nXG4gICAgICAgIC8vIHdoaWNoIG1vbnRocyB5b3UgYXJlIGFyZSB0YWxraW5nIGFib3V0LCBzbyB3ZSBoYXZlIHRvIHN0b3JlXG4gICAgICAgIC8vIGl0IHNlcGFyYXRlbHkuXG4gICAgICAgIHRoaXMuX21vbnRocyA9ICttb250aHMgK1xuICAgICAgICAgICAgcXVhcnRlcnMgKiAzICtcbiAgICAgICAgICAgIHllYXJzICogMTI7XG5cbiAgICAgICAgdGhpcy5fZGF0YSA9IHt9O1xuXG4gICAgICAgIHRoaXMuX2xvY2FsZSA9IGxvY2FsZV9sb2NhbGVzX19nZXRMb2NhbGUoKTtcblxuICAgICAgICB0aGlzLl9idWJibGUoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0R1cmF0aW9uIChvYmopIHtcbiAgICAgICAgcmV0dXJuIG9iaiBpbnN0YW5jZW9mIER1cmF0aW9uO1xuICAgIH1cblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGZ1bmN0aW9uIG9mZnNldCAodG9rZW4sIHNlcGFyYXRvcikge1xuICAgICAgICBhZGRGb3JtYXRUb2tlbih0b2tlbiwgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIG9mZnNldCA9IHRoaXMudXRjT2Zmc2V0KCk7XG4gICAgICAgICAgICB2YXIgc2lnbiA9ICcrJztcbiAgICAgICAgICAgIGlmIChvZmZzZXQgPCAwKSB7XG4gICAgICAgICAgICAgICAgb2Zmc2V0ID0gLW9mZnNldDtcbiAgICAgICAgICAgICAgICBzaWduID0gJy0nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHNpZ24gKyB6ZXJvRmlsbCh+fihvZmZzZXQgLyA2MCksIDIpICsgc2VwYXJhdG9yICsgemVyb0ZpbGwofn4ob2Zmc2V0KSAlIDYwLCAyKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgb2Zmc2V0KCdaJywgJzonKTtcbiAgICBvZmZzZXQoJ1paJywgJycpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignWicsICBtYXRjaFNob3J0T2Zmc2V0KTtcbiAgICBhZGRSZWdleFRva2VuKCdaWicsIG1hdGNoU2hvcnRPZmZzZXQpO1xuICAgIGFkZFBhcnNlVG9rZW4oWydaJywgJ1paJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICBjb25maWcuX3VzZVVUQyA9IHRydWU7XG4gICAgICAgIGNvbmZpZy5fdHptID0gb2Zmc2V0RnJvbVN0cmluZyhtYXRjaFNob3J0T2Zmc2V0LCBpbnB1dCk7XG4gICAgfSk7XG5cbiAgICAvLyBIRUxQRVJTXG5cbiAgICAvLyB0aW1lem9uZSBjaHVua2VyXG4gICAgLy8gJysxMDowMCcgPiBbJzEwJywgICcwMCddXG4gICAgLy8gJy0xNTMwJyAgPiBbJy0xNScsICczMCddXG4gICAgdmFyIGNodW5rT2Zmc2V0ID0gLyhbXFwrXFwtXXxcXGRcXGQpL2dpO1xuXG4gICAgZnVuY3Rpb24gb2Zmc2V0RnJvbVN0cmluZyhtYXRjaGVyLCBzdHJpbmcpIHtcbiAgICAgICAgdmFyIG1hdGNoZXMgPSAoKHN0cmluZyB8fCAnJykubWF0Y2gobWF0Y2hlcikgfHwgW10pO1xuICAgICAgICB2YXIgY2h1bmsgICA9IG1hdGNoZXNbbWF0Y2hlcy5sZW5ndGggLSAxXSB8fCBbXTtcbiAgICAgICAgdmFyIHBhcnRzICAgPSAoY2h1bmsgKyAnJykubWF0Y2goY2h1bmtPZmZzZXQpIHx8IFsnLScsIDAsIDBdO1xuICAgICAgICB2YXIgbWludXRlcyA9ICsocGFydHNbMV0gKiA2MCkgKyB0b0ludChwYXJ0c1syXSk7XG5cbiAgICAgICAgcmV0dXJuIHBhcnRzWzBdID09PSAnKycgPyBtaW51dGVzIDogLW1pbnV0ZXM7XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIGEgbW9tZW50IGZyb20gaW5wdXQsIHRoYXQgaXMgbG9jYWwvdXRjL3pvbmUgZXF1aXZhbGVudCB0byBtb2RlbC5cbiAgICBmdW5jdGlvbiBjbG9uZVdpdGhPZmZzZXQoaW5wdXQsIG1vZGVsKSB7XG4gICAgICAgIHZhciByZXMsIGRpZmY7XG4gICAgICAgIGlmIChtb2RlbC5faXNVVEMpIHtcbiAgICAgICAgICAgIHJlcyA9IG1vZGVsLmNsb25lKCk7XG4gICAgICAgICAgICBkaWZmID0gKGlzTW9tZW50KGlucHV0KSB8fCBpc0RhdGUoaW5wdXQpID8gK2lucHV0IDogK2xvY2FsX19jcmVhdGVMb2NhbChpbnB1dCkpIC0gKCtyZXMpO1xuICAgICAgICAgICAgLy8gVXNlIGxvdy1sZXZlbCBhcGksIGJlY2F1c2UgdGhpcyBmbiBpcyBsb3ctbGV2ZWwgYXBpLlxuICAgICAgICAgICAgcmVzLl9kLnNldFRpbWUoK3Jlcy5fZCArIGRpZmYpO1xuICAgICAgICAgICAgdXRpbHNfaG9va3NfX2hvb2tzLnVwZGF0ZU9mZnNldChyZXMsIGZhbHNlKTtcbiAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbG9jYWxfX2NyZWF0ZUxvY2FsKGlucHV0KS5sb2NhbCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0RGF0ZU9mZnNldCAobSkge1xuICAgICAgICAvLyBPbiBGaXJlZm94LjI0IERhdGUjZ2V0VGltZXpvbmVPZmZzZXQgcmV0dXJucyBhIGZsb2F0aW5nIHBvaW50LlxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vbW9tZW50L21vbWVudC9wdWxsLzE4NzFcbiAgICAgICAgcmV0dXJuIC1NYXRoLnJvdW5kKG0uX2QuZ2V0VGltZXpvbmVPZmZzZXQoKSAvIDE1KSAqIDE1O1xuICAgIH1cblxuICAgIC8vIEhPT0tTXG5cbiAgICAvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgY2FsbGVkIHdoZW5ldmVyIGEgbW9tZW50IGlzIG11dGF0ZWQuXG4gICAgLy8gSXQgaXMgaW50ZW5kZWQgdG8ga2VlcCB0aGUgb2Zmc2V0IGluIHN5bmMgd2l0aCB0aGUgdGltZXpvbmUuXG4gICAgdXRpbHNfaG9va3NfX2hvb2tzLnVwZGF0ZU9mZnNldCA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgLy8ga2VlcExvY2FsVGltZSA9IHRydWUgbWVhbnMgb25seSBjaGFuZ2UgdGhlIHRpbWV6b25lLCB3aXRob3V0XG4gICAgLy8gYWZmZWN0aW5nIHRoZSBsb2NhbCBob3VyLiBTbyA1OjMxOjI2ICswMzAwIC0tW3V0Y09mZnNldCgyLCB0cnVlKV0tLT5cbiAgICAvLyA1OjMxOjI2ICswMjAwIEl0IGlzIHBvc3NpYmxlIHRoYXQgNTozMToyNiBkb2Vzbid0IGV4aXN0IHdpdGggb2Zmc2V0XG4gICAgLy8gKzAyMDAsIHNvIHdlIGFkanVzdCB0aGUgdGltZSBhcyBuZWVkZWQsIHRvIGJlIHZhbGlkLlxuICAgIC8vXG4gICAgLy8gS2VlcGluZyB0aGUgdGltZSBhY3R1YWxseSBhZGRzL3N1YnRyYWN0cyAob25lIGhvdXIpXG4gICAgLy8gZnJvbSB0aGUgYWN0dWFsIHJlcHJlc2VudGVkIHRpbWUuIFRoYXQgaXMgd2h5IHdlIGNhbGwgdXBkYXRlT2Zmc2V0XG4gICAgLy8gYSBzZWNvbmQgdGltZS4gSW4gY2FzZSBpdCB3YW50cyB1cyB0byBjaGFuZ2UgdGhlIG9mZnNldCBhZ2FpblxuICAgIC8vIF9jaGFuZ2VJblByb2dyZXNzID09IHRydWUgY2FzZSwgdGhlbiB3ZSBoYXZlIHRvIGFkanVzdCwgYmVjYXVzZVxuICAgIC8vIHRoZXJlIGlzIG5vIHN1Y2ggdGltZSBpbiB0aGUgZ2l2ZW4gdGltZXpvbmUuXG4gICAgZnVuY3Rpb24gZ2V0U2V0T2Zmc2V0IChpbnB1dCwga2VlcExvY2FsVGltZSkge1xuICAgICAgICB2YXIgb2Zmc2V0ID0gdGhpcy5fb2Zmc2V0IHx8IDAsXG4gICAgICAgICAgICBsb2NhbEFkanVzdDtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0ICE9IG51bGwgPyB0aGlzIDogTmFOO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbnB1dCAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIGlucHV0ID0gb2Zmc2V0RnJvbVN0cmluZyhtYXRjaFNob3J0T2Zmc2V0LCBpbnB1dCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKE1hdGguYWJzKGlucHV0KSA8IDE2KSB7XG4gICAgICAgICAgICAgICAgaW5wdXQgPSBpbnB1dCAqIDYwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF0aGlzLl9pc1VUQyAmJiBrZWVwTG9jYWxUaW1lKSB7XG4gICAgICAgICAgICAgICAgbG9jYWxBZGp1c3QgPSBnZXREYXRlT2Zmc2V0KHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fb2Zmc2V0ID0gaW5wdXQ7XG4gICAgICAgICAgICB0aGlzLl9pc1VUQyA9IHRydWU7XG4gICAgICAgICAgICBpZiAobG9jYWxBZGp1c3QgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuYWRkKGxvY2FsQWRqdXN0LCAnbScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9mZnNldCAhPT0gaW5wdXQpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWtlZXBMb2NhbFRpbWUgfHwgdGhpcy5fY2hhbmdlSW5Qcm9ncmVzcykge1xuICAgICAgICAgICAgICAgICAgICBhZGRfc3VidHJhY3RfX2FkZFN1YnRyYWN0KHRoaXMsIGNyZWF0ZV9fY3JlYXRlRHVyYXRpb24oaW5wdXQgLSBvZmZzZXQsICdtJyksIDEsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLl9jaGFuZ2VJblByb2dyZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NoYW5nZUluUHJvZ3Jlc3MgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB1dGlsc19ob29rc19faG9va3MudXBkYXRlT2Zmc2V0KHRoaXMsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jaGFuZ2VJblByb2dyZXNzID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9pc1VUQyA/IG9mZnNldCA6IGdldERhdGVPZmZzZXQodGhpcyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTZXRab25lIChpbnB1dCwga2VlcExvY2FsVGltZSkge1xuICAgICAgICBpZiAoaW5wdXQgIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBpbnB1dCA9IC1pbnB1dDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy51dGNPZmZzZXQoaW5wdXQsIGtlZXBMb2NhbFRpbWUpO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAtdGhpcy51dGNPZmZzZXQoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldE9mZnNldFRvVVRDIChrZWVwTG9jYWxUaW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnV0Y09mZnNldCgwLCBrZWVwTG9jYWxUaW1lKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRPZmZzZXRUb0xvY2FsIChrZWVwTG9jYWxUaW1lKSB7XG4gICAgICAgIGlmICh0aGlzLl9pc1VUQykge1xuICAgICAgICAgICAgdGhpcy51dGNPZmZzZXQoMCwga2VlcExvY2FsVGltZSk7XG4gICAgICAgICAgICB0aGlzLl9pc1VUQyA9IGZhbHNlO1xuXG4gICAgICAgICAgICBpZiAoa2VlcExvY2FsVGltZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc3VidHJhY3QoZ2V0RGF0ZU9mZnNldCh0aGlzKSwgJ20nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRPZmZzZXRUb1BhcnNlZE9mZnNldCAoKSB7XG4gICAgICAgIGlmICh0aGlzLl90em0pIHtcbiAgICAgICAgICAgIHRoaXMudXRjT2Zmc2V0KHRoaXMuX3R6bSk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHRoaXMuX2kgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB0aGlzLnV0Y09mZnNldChvZmZzZXRGcm9tU3RyaW5nKG1hdGNoT2Zmc2V0LCB0aGlzLl9pKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFzQWxpZ25lZEhvdXJPZmZzZXQgKGlucHV0KSB7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpbnB1dCA9IGlucHV0ID8gbG9jYWxfX2NyZWF0ZUxvY2FsKGlucHV0KS51dGNPZmZzZXQoKSA6IDA7XG5cbiAgICAgICAgcmV0dXJuICh0aGlzLnV0Y09mZnNldCgpIC0gaW5wdXQpICUgNjAgPT09IDA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNEYXlsaWdodFNhdmluZ1RpbWUgKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgdGhpcy51dGNPZmZzZXQoKSA+IHRoaXMuY2xvbmUoKS5tb250aCgwKS51dGNPZmZzZXQoKSB8fFxuICAgICAgICAgICAgdGhpcy51dGNPZmZzZXQoKSA+IHRoaXMuY2xvbmUoKS5tb250aCg1KS51dGNPZmZzZXQoKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzRGF5bGlnaHRTYXZpbmdUaW1lU2hpZnRlZCAoKSB7XG4gICAgICAgIGlmICghaXNVbmRlZmluZWQodGhpcy5faXNEU1RTaGlmdGVkKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2lzRFNUU2hpZnRlZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjID0ge307XG5cbiAgICAgICAgY29weUNvbmZpZyhjLCB0aGlzKTtcbiAgICAgICAgYyA9IHByZXBhcmVDb25maWcoYyk7XG5cbiAgICAgICAgaWYgKGMuX2EpIHtcbiAgICAgICAgICAgIHZhciBvdGhlciA9IGMuX2lzVVRDID8gY3JlYXRlX3V0Y19fY3JlYXRlVVRDKGMuX2EpIDogbG9jYWxfX2NyZWF0ZUxvY2FsKGMuX2EpO1xuICAgICAgICAgICAgdGhpcy5faXNEU1RTaGlmdGVkID0gdGhpcy5pc1ZhbGlkKCkgJiZcbiAgICAgICAgICAgICAgICBjb21wYXJlQXJyYXlzKGMuX2EsIG90aGVyLnRvQXJyYXkoKSkgPiAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5faXNEU1RTaGlmdGVkID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5faXNEU1RTaGlmdGVkO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzTG9jYWwgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkKCkgPyAhdGhpcy5faXNVVEMgOiBmYWxzZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1V0Y09mZnNldCAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQoKSA/IHRoaXMuX2lzVVRDIDogZmFsc2U7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNVdGMgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkKCkgPyB0aGlzLl9pc1VUQyAmJiB0aGlzLl9vZmZzZXQgPT09IDAgOiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBBU1AuTkVUIGpzb24gZGF0ZSBmb3JtYXQgcmVnZXhcbiAgICB2YXIgYXNwTmV0UmVnZXggPSAvKFxcLSk/KD86KFxcZCopWy4gXSk/KFxcZCspXFw6KFxcZCspKD86XFw6KFxcZCspXFwuPyhcXGR7M30pPyk/LztcblxuICAgIC8vIGZyb20gaHR0cDovL2RvY3MuY2xvc3VyZS1saWJyYXJ5Lmdvb2dsZWNvZGUuY29tL2dpdC9jbG9zdXJlX2dvb2dfZGF0ZV9kYXRlLmpzLnNvdXJjZS5odG1sXG4gICAgLy8gc29tZXdoYXQgbW9yZSBpbiBsaW5lIHdpdGggNC40LjMuMiAyMDA0IHNwZWMsIGJ1dCBhbGxvd3MgZGVjaW1hbCBhbnl3aGVyZVxuICAgIHZhciBpc29SZWdleCA9IC9eKC0pP1AoPzooPzooWzAtOSwuXSopWSk/KD86KFswLTksLl0qKU0pPyg/OihbMC05LC5dKilEKT8oPzpUKD86KFswLTksLl0qKUgpPyg/OihbMC05LC5dKilNKT8oPzooWzAtOSwuXSopUyk/KT98KFswLTksLl0qKVcpJC87XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVfX2NyZWF0ZUR1cmF0aW9uIChpbnB1dCwga2V5KSB7XG4gICAgICAgIHZhciBkdXJhdGlvbiA9IGlucHV0LFxuICAgICAgICAgICAgLy8gbWF0Y2hpbmcgYWdhaW5zdCByZWdleHAgaXMgZXhwZW5zaXZlLCBkbyBpdCBvbiBkZW1hbmRcbiAgICAgICAgICAgIG1hdGNoID0gbnVsbCxcbiAgICAgICAgICAgIHNpZ24sXG4gICAgICAgICAgICByZXQsXG4gICAgICAgICAgICBkaWZmUmVzO1xuXG4gICAgICAgIGlmIChpc0R1cmF0aW9uKGlucHV0KSkge1xuICAgICAgICAgICAgZHVyYXRpb24gPSB7XG4gICAgICAgICAgICAgICAgbXMgOiBpbnB1dC5fbWlsbGlzZWNvbmRzLFxuICAgICAgICAgICAgICAgIGQgIDogaW5wdXQuX2RheXMsXG4gICAgICAgICAgICAgICAgTSAgOiBpbnB1dC5fbW9udGhzXG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIGR1cmF0aW9uID0ge307XG4gICAgICAgICAgICBpZiAoa2V5KSB7XG4gICAgICAgICAgICAgICAgZHVyYXRpb25ba2V5XSA9IGlucHV0O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkdXJhdGlvbi5taWxsaXNlY29uZHMgPSBpbnB1dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICghIShtYXRjaCA9IGFzcE5ldFJlZ2V4LmV4ZWMoaW5wdXQpKSkge1xuICAgICAgICAgICAgc2lnbiA9IChtYXRjaFsxXSA9PT0gJy0nKSA/IC0xIDogMTtcbiAgICAgICAgICAgIGR1cmF0aW9uID0ge1xuICAgICAgICAgICAgICAgIHkgIDogMCxcbiAgICAgICAgICAgICAgICBkICA6IHRvSW50KG1hdGNoW0RBVEVdKSAgICAgICAgKiBzaWduLFxuICAgICAgICAgICAgICAgIGggIDogdG9JbnQobWF0Y2hbSE9VUl0pICAgICAgICAqIHNpZ24sXG4gICAgICAgICAgICAgICAgbSAgOiB0b0ludChtYXRjaFtNSU5VVEVdKSAgICAgICogc2lnbixcbiAgICAgICAgICAgICAgICBzICA6IHRvSW50KG1hdGNoW1NFQ09ORF0pICAgICAgKiBzaWduLFxuICAgICAgICAgICAgICAgIG1zIDogdG9JbnQobWF0Y2hbTUlMTElTRUNPTkRdKSAqIHNpZ25cbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSBpZiAoISEobWF0Y2ggPSBpc29SZWdleC5leGVjKGlucHV0KSkpIHtcbiAgICAgICAgICAgIHNpZ24gPSAobWF0Y2hbMV0gPT09ICctJykgPyAtMSA6IDE7XG4gICAgICAgICAgICBkdXJhdGlvbiA9IHtcbiAgICAgICAgICAgICAgICB5IDogcGFyc2VJc28obWF0Y2hbMl0sIHNpZ24pLFxuICAgICAgICAgICAgICAgIE0gOiBwYXJzZUlzbyhtYXRjaFszXSwgc2lnbiksXG4gICAgICAgICAgICAgICAgZCA6IHBhcnNlSXNvKG1hdGNoWzRdLCBzaWduKSxcbiAgICAgICAgICAgICAgICBoIDogcGFyc2VJc28obWF0Y2hbNV0sIHNpZ24pLFxuICAgICAgICAgICAgICAgIG0gOiBwYXJzZUlzbyhtYXRjaFs2XSwgc2lnbiksXG4gICAgICAgICAgICAgICAgcyA6IHBhcnNlSXNvKG1hdGNoWzddLCBzaWduKSxcbiAgICAgICAgICAgICAgICB3IDogcGFyc2VJc28obWF0Y2hbOF0sIHNpZ24pXG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2UgaWYgKGR1cmF0aW9uID09IG51bGwpIHsvLyBjaGVja3MgZm9yIG51bGwgb3IgdW5kZWZpbmVkXG4gICAgICAgICAgICBkdXJhdGlvbiA9IHt9O1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBkdXJhdGlvbiA9PT0gJ29iamVjdCcgJiYgKCdmcm9tJyBpbiBkdXJhdGlvbiB8fCAndG8nIGluIGR1cmF0aW9uKSkge1xuICAgICAgICAgICAgZGlmZlJlcyA9IG1vbWVudHNEaWZmZXJlbmNlKGxvY2FsX19jcmVhdGVMb2NhbChkdXJhdGlvbi5mcm9tKSwgbG9jYWxfX2NyZWF0ZUxvY2FsKGR1cmF0aW9uLnRvKSk7XG5cbiAgICAgICAgICAgIGR1cmF0aW9uID0ge307XG4gICAgICAgICAgICBkdXJhdGlvbi5tcyA9IGRpZmZSZXMubWlsbGlzZWNvbmRzO1xuICAgICAgICAgICAgZHVyYXRpb24uTSA9IGRpZmZSZXMubW9udGhzO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0ID0gbmV3IER1cmF0aW9uKGR1cmF0aW9uKTtcblxuICAgICAgICBpZiAoaXNEdXJhdGlvbihpbnB1dCkgJiYgaGFzT3duUHJvcChpbnB1dCwgJ19sb2NhbGUnKSkge1xuICAgICAgICAgICAgcmV0Ll9sb2NhbGUgPSBpbnB1dC5fbG9jYWxlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG5cbiAgICBjcmVhdGVfX2NyZWF0ZUR1cmF0aW9uLmZuID0gRHVyYXRpb24ucHJvdG90eXBlO1xuXG4gICAgZnVuY3Rpb24gcGFyc2VJc28gKGlucCwgc2lnbikge1xuICAgICAgICAvLyBXZSdkIG5vcm1hbGx5IHVzZSB+fmlucCBmb3IgdGhpcywgYnV0IHVuZm9ydHVuYXRlbHkgaXQgYWxzb1xuICAgICAgICAvLyBjb252ZXJ0cyBmbG9hdHMgdG8gaW50cy5cbiAgICAgICAgLy8gaW5wIG1heSBiZSB1bmRlZmluZWQsIHNvIGNhcmVmdWwgY2FsbGluZyByZXBsYWNlIG9uIGl0LlxuICAgICAgICB2YXIgcmVzID0gaW5wICYmIHBhcnNlRmxvYXQoaW5wLnJlcGxhY2UoJywnLCAnLicpKTtcbiAgICAgICAgLy8gYXBwbHkgc2lnbiB3aGlsZSB3ZSdyZSBhdCBpdFxuICAgICAgICByZXR1cm4gKGlzTmFOKHJlcykgPyAwIDogcmVzKSAqIHNpZ247XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcG9zaXRpdmVNb21lbnRzRGlmZmVyZW5jZShiYXNlLCBvdGhlcikge1xuICAgICAgICB2YXIgcmVzID0ge21pbGxpc2Vjb25kczogMCwgbW9udGhzOiAwfTtcblxuICAgICAgICByZXMubW9udGhzID0gb3RoZXIubW9udGgoKSAtIGJhc2UubW9udGgoKSArXG4gICAgICAgICAgICAob3RoZXIueWVhcigpIC0gYmFzZS55ZWFyKCkpICogMTI7XG4gICAgICAgIGlmIChiYXNlLmNsb25lKCkuYWRkKHJlcy5tb250aHMsICdNJykuaXNBZnRlcihvdGhlcikpIHtcbiAgICAgICAgICAgIC0tcmVzLm1vbnRocztcbiAgICAgICAgfVxuXG4gICAgICAgIHJlcy5taWxsaXNlY29uZHMgPSArb3RoZXIgLSArKGJhc2UuY2xvbmUoKS5hZGQocmVzLm1vbnRocywgJ00nKSk7XG5cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb21lbnRzRGlmZmVyZW5jZShiYXNlLCBvdGhlcikge1xuICAgICAgICB2YXIgcmVzO1xuICAgICAgICBpZiAoIShiYXNlLmlzVmFsaWQoKSAmJiBvdGhlci5pc1ZhbGlkKCkpKSB7XG4gICAgICAgICAgICByZXR1cm4ge21pbGxpc2Vjb25kczogMCwgbW9udGhzOiAwfTtcbiAgICAgICAgfVxuXG4gICAgICAgIG90aGVyID0gY2xvbmVXaXRoT2Zmc2V0KG90aGVyLCBiYXNlKTtcbiAgICAgICAgaWYgKGJhc2UuaXNCZWZvcmUob3RoZXIpKSB7XG4gICAgICAgICAgICByZXMgPSBwb3NpdGl2ZU1vbWVudHNEaWZmZXJlbmNlKGJhc2UsIG90aGVyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlcyA9IHBvc2l0aXZlTW9tZW50c0RpZmZlcmVuY2Uob3RoZXIsIGJhc2UpO1xuICAgICAgICAgICAgcmVzLm1pbGxpc2Vjb25kcyA9IC1yZXMubWlsbGlzZWNvbmRzO1xuICAgICAgICAgICAgcmVzLm1vbnRocyA9IC1yZXMubW9udGhzO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG5cbiAgICAvLyBUT0RPOiByZW1vdmUgJ25hbWUnIGFyZyBhZnRlciBkZXByZWNhdGlvbiBpcyByZW1vdmVkXG4gICAgZnVuY3Rpb24gY3JlYXRlQWRkZXIoZGlyZWN0aW9uLCBuYW1lKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAodmFsLCBwZXJpb2QpIHtcbiAgICAgICAgICAgIHZhciBkdXIsIHRtcDtcbiAgICAgICAgICAgIC8vaW52ZXJ0IHRoZSBhcmd1bWVudHMsIGJ1dCBjb21wbGFpbiBhYm91dCBpdFxuICAgICAgICAgICAgaWYgKHBlcmlvZCAhPT0gbnVsbCAmJiAhaXNOYU4oK3BlcmlvZCkpIHtcbiAgICAgICAgICAgICAgICBkZXByZWNhdGVTaW1wbGUobmFtZSwgJ21vbWVudCgpLicgKyBuYW1lICArICcocGVyaW9kLCBudW1iZXIpIGlzIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgbW9tZW50KCkuJyArIG5hbWUgKyAnKG51bWJlciwgcGVyaW9kKS4nKTtcbiAgICAgICAgICAgICAgICB0bXAgPSB2YWw7IHZhbCA9IHBlcmlvZDsgcGVyaW9kID0gdG1wO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YWwgPSB0eXBlb2YgdmFsID09PSAnc3RyaW5nJyA/ICt2YWwgOiB2YWw7XG4gICAgICAgICAgICBkdXIgPSBjcmVhdGVfX2NyZWF0ZUR1cmF0aW9uKHZhbCwgcGVyaW9kKTtcbiAgICAgICAgICAgIGFkZF9zdWJ0cmFjdF9fYWRkU3VidHJhY3QodGhpcywgZHVyLCBkaXJlY3Rpb24pO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWRkX3N1YnRyYWN0X19hZGRTdWJ0cmFjdCAobW9tLCBkdXJhdGlvbiwgaXNBZGRpbmcsIHVwZGF0ZU9mZnNldCkge1xuICAgICAgICB2YXIgbWlsbGlzZWNvbmRzID0gZHVyYXRpb24uX21pbGxpc2Vjb25kcyxcbiAgICAgICAgICAgIGRheXMgPSBkdXJhdGlvbi5fZGF5cyxcbiAgICAgICAgICAgIG1vbnRocyA9IGR1cmF0aW9uLl9tb250aHM7XG5cbiAgICAgICAgaWYgKCFtb20uaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICAvLyBObyBvcFxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdXBkYXRlT2Zmc2V0ID0gdXBkYXRlT2Zmc2V0ID09IG51bGwgPyB0cnVlIDogdXBkYXRlT2Zmc2V0O1xuXG4gICAgICAgIGlmIChtaWxsaXNlY29uZHMpIHtcbiAgICAgICAgICAgIG1vbS5fZC5zZXRUaW1lKCttb20uX2QgKyBtaWxsaXNlY29uZHMgKiBpc0FkZGluZyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRheXMpIHtcbiAgICAgICAgICAgIGdldF9zZXRfX3NldChtb20sICdEYXRlJywgZ2V0X3NldF9fZ2V0KG1vbSwgJ0RhdGUnKSArIGRheXMgKiBpc0FkZGluZyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1vbnRocykge1xuICAgICAgICAgICAgc2V0TW9udGgobW9tLCBnZXRfc2V0X19nZXQobW9tLCAnTW9udGgnKSArIG1vbnRocyAqIGlzQWRkaW5nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodXBkYXRlT2Zmc2V0KSB7XG4gICAgICAgICAgICB1dGlsc19ob29rc19faG9va3MudXBkYXRlT2Zmc2V0KG1vbSwgZGF5cyB8fCBtb250aHMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGFkZF9zdWJ0cmFjdF9fYWRkICAgICAgPSBjcmVhdGVBZGRlcigxLCAnYWRkJyk7XG4gICAgdmFyIGFkZF9zdWJ0cmFjdF9fc3VidHJhY3QgPSBjcmVhdGVBZGRlcigtMSwgJ3N1YnRyYWN0Jyk7XG5cbiAgICBmdW5jdGlvbiBtb21lbnRfY2FsZW5kYXJfX2NhbGVuZGFyICh0aW1lLCBmb3JtYXRzKSB7XG4gICAgICAgIC8vIFdlIHdhbnQgdG8gY29tcGFyZSB0aGUgc3RhcnQgb2YgdG9kYXksIHZzIHRoaXMuXG4gICAgICAgIC8vIEdldHRpbmcgc3RhcnQtb2YtdG9kYXkgZGVwZW5kcyBvbiB3aGV0aGVyIHdlJ3JlIGxvY2FsL3V0Yy9vZmZzZXQgb3Igbm90LlxuICAgICAgICB2YXIgbm93ID0gdGltZSB8fCBsb2NhbF9fY3JlYXRlTG9jYWwoKSxcbiAgICAgICAgICAgIHNvZCA9IGNsb25lV2l0aE9mZnNldChub3csIHRoaXMpLnN0YXJ0T2YoJ2RheScpLFxuICAgICAgICAgICAgZGlmZiA9IHRoaXMuZGlmZihzb2QsICdkYXlzJywgdHJ1ZSksXG4gICAgICAgICAgICBmb3JtYXQgPSBkaWZmIDwgLTYgPyAnc2FtZUVsc2UnIDpcbiAgICAgICAgICAgICAgICBkaWZmIDwgLTEgPyAnbGFzdFdlZWsnIDpcbiAgICAgICAgICAgICAgICBkaWZmIDwgMCA/ICdsYXN0RGF5JyA6XG4gICAgICAgICAgICAgICAgZGlmZiA8IDEgPyAnc2FtZURheScgOlxuICAgICAgICAgICAgICAgIGRpZmYgPCAyID8gJ25leHREYXknIDpcbiAgICAgICAgICAgICAgICBkaWZmIDwgNyA/ICduZXh0V2VlaycgOiAnc2FtZUVsc2UnO1xuXG4gICAgICAgIHZhciBvdXRwdXQgPSBmb3JtYXRzICYmIChpc0Z1bmN0aW9uKGZvcm1hdHNbZm9ybWF0XSkgPyBmb3JtYXRzW2Zvcm1hdF0oKSA6IGZvcm1hdHNbZm9ybWF0XSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0KG91dHB1dCB8fCB0aGlzLmxvY2FsZURhdGEoKS5jYWxlbmRhcihmb3JtYXQsIHRoaXMsIGxvY2FsX19jcmVhdGVMb2NhbChub3cpKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xvbmUgKCkge1xuICAgICAgICByZXR1cm4gbmV3IE1vbWVudCh0aGlzKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0FmdGVyIChpbnB1dCwgdW5pdHMpIHtcbiAgICAgICAgdmFyIGxvY2FsSW5wdXQgPSBpc01vbWVudChpbnB1dCkgPyBpbnB1dCA6IGxvY2FsX19jcmVhdGVMb2NhbChpbnB1dCk7XG4gICAgICAgIGlmICghKHRoaXMuaXNWYWxpZCgpICYmIGxvY2FsSW5wdXQuaXNWYWxpZCgpKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHMoIWlzVW5kZWZpbmVkKHVuaXRzKSA/IHVuaXRzIDogJ21pbGxpc2Vjb25kJyk7XG4gICAgICAgIGlmICh1bml0cyA9PT0gJ21pbGxpc2Vjb25kJykge1xuICAgICAgICAgICAgcmV0dXJuICt0aGlzID4gK2xvY2FsSW5wdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gK2xvY2FsSW5wdXQgPCArdGhpcy5jbG9uZSgpLnN0YXJ0T2YodW5pdHMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNCZWZvcmUgKGlucHV0LCB1bml0cykge1xuICAgICAgICB2YXIgbG9jYWxJbnB1dCA9IGlzTW9tZW50KGlucHV0KSA/IGlucHV0IDogbG9jYWxfX2NyZWF0ZUxvY2FsKGlucHV0KTtcbiAgICAgICAgaWYgKCEodGhpcy5pc1ZhbGlkKCkgJiYgbG9jYWxJbnB1dC5pc1ZhbGlkKCkpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyghaXNVbmRlZmluZWQodW5pdHMpID8gdW5pdHMgOiAnbWlsbGlzZWNvbmQnKTtcbiAgICAgICAgaWYgKHVuaXRzID09PSAnbWlsbGlzZWNvbmQnKSB7XG4gICAgICAgICAgICByZXR1cm4gK3RoaXMgPCArbG9jYWxJbnB1dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiArdGhpcy5jbG9uZSgpLmVuZE9mKHVuaXRzKSA8ICtsb2NhbElucHV0O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNCZXR3ZWVuIChmcm9tLCB0bywgdW5pdHMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNBZnRlcihmcm9tLCB1bml0cykgJiYgdGhpcy5pc0JlZm9yZSh0bywgdW5pdHMpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzU2FtZSAoaW5wdXQsIHVuaXRzKSB7XG4gICAgICAgIHZhciBsb2NhbElucHV0ID0gaXNNb21lbnQoaW5wdXQpID8gaW5wdXQgOiBsb2NhbF9fY3JlYXRlTG9jYWwoaW5wdXQpLFxuICAgICAgICAgICAgaW5wdXRNcztcbiAgICAgICAgaWYgKCEodGhpcy5pc1ZhbGlkKCkgJiYgbG9jYWxJbnB1dC5pc1ZhbGlkKCkpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cyB8fCAnbWlsbGlzZWNvbmQnKTtcbiAgICAgICAgaWYgKHVuaXRzID09PSAnbWlsbGlzZWNvbmQnKSB7XG4gICAgICAgICAgICByZXR1cm4gK3RoaXMgPT09ICtsb2NhbElucHV0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaW5wdXRNcyA9ICtsb2NhbElucHV0O1xuICAgICAgICAgICAgcmV0dXJuICsodGhpcy5jbG9uZSgpLnN0YXJ0T2YodW5pdHMpKSA8PSBpbnB1dE1zICYmIGlucHV0TXMgPD0gKyh0aGlzLmNsb25lKCkuZW5kT2YodW5pdHMpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzU2FtZU9yQWZ0ZXIgKGlucHV0LCB1bml0cykge1xuICAgICAgICByZXR1cm4gdGhpcy5pc1NhbWUoaW5wdXQsIHVuaXRzKSB8fCB0aGlzLmlzQWZ0ZXIoaW5wdXQsdW5pdHMpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzU2FtZU9yQmVmb3JlIChpbnB1dCwgdW5pdHMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNTYW1lKGlucHV0LCB1bml0cykgfHwgdGhpcy5pc0JlZm9yZShpbnB1dCx1bml0cyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGlmZiAoaW5wdXQsIHVuaXRzLCBhc0Zsb2F0KSB7XG4gICAgICAgIHZhciB0aGF0LFxuICAgICAgICAgICAgem9uZURlbHRhLFxuICAgICAgICAgICAgZGVsdGEsIG91dHB1dDtcblxuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gTmFOO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhhdCA9IGNsb25lV2l0aE9mZnNldChpbnB1dCwgdGhpcyk7XG5cbiAgICAgICAgaWYgKCF0aGF0LmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIE5hTjtcbiAgICAgICAgfVxuXG4gICAgICAgIHpvbmVEZWx0YSA9ICh0aGF0LnV0Y09mZnNldCgpIC0gdGhpcy51dGNPZmZzZXQoKSkgKiA2ZTQ7XG5cbiAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cyk7XG5cbiAgICAgICAgaWYgKHVuaXRzID09PSAneWVhcicgfHwgdW5pdHMgPT09ICdtb250aCcgfHwgdW5pdHMgPT09ICdxdWFydGVyJykge1xuICAgICAgICAgICAgb3V0cHV0ID0gbW9udGhEaWZmKHRoaXMsIHRoYXQpO1xuICAgICAgICAgICAgaWYgKHVuaXRzID09PSAncXVhcnRlcicpIHtcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSBvdXRwdXQgLyAzO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh1bml0cyA9PT0gJ3llYXInKSB7XG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gb3V0cHV0IC8gMTI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkZWx0YSA9IHRoaXMgLSB0aGF0O1xuICAgICAgICAgICAgb3V0cHV0ID0gdW5pdHMgPT09ICdzZWNvbmQnID8gZGVsdGEgLyAxZTMgOiAvLyAxMDAwXG4gICAgICAgICAgICAgICAgdW5pdHMgPT09ICdtaW51dGUnID8gZGVsdGEgLyA2ZTQgOiAvLyAxMDAwICogNjBcbiAgICAgICAgICAgICAgICB1bml0cyA9PT0gJ2hvdXInID8gZGVsdGEgLyAzNmU1IDogLy8gMTAwMCAqIDYwICogNjBcbiAgICAgICAgICAgICAgICB1bml0cyA9PT0gJ2RheScgPyAoZGVsdGEgLSB6b25lRGVsdGEpIC8gODY0ZTUgOiAvLyAxMDAwICogNjAgKiA2MCAqIDI0LCBuZWdhdGUgZHN0XG4gICAgICAgICAgICAgICAgdW5pdHMgPT09ICd3ZWVrJyA/IChkZWx0YSAtIHpvbmVEZWx0YSkgLyA2MDQ4ZTUgOiAvLyAxMDAwICogNjAgKiA2MCAqIDI0ICogNywgbmVnYXRlIGRzdFxuICAgICAgICAgICAgICAgIGRlbHRhO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhc0Zsb2F0ID8gb3V0cHV0IDogYWJzRmxvb3Iob3V0cHV0KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb250aERpZmYgKGEsIGIpIHtcbiAgICAgICAgLy8gZGlmZmVyZW5jZSBpbiBtb250aHNcbiAgICAgICAgdmFyIHdob2xlTW9udGhEaWZmID0gKChiLnllYXIoKSAtIGEueWVhcigpKSAqIDEyKSArIChiLm1vbnRoKCkgLSBhLm1vbnRoKCkpLFxuICAgICAgICAgICAgLy8gYiBpcyBpbiAoYW5jaG9yIC0gMSBtb250aCwgYW5jaG9yICsgMSBtb250aClcbiAgICAgICAgICAgIGFuY2hvciA9IGEuY2xvbmUoKS5hZGQod2hvbGVNb250aERpZmYsICdtb250aHMnKSxcbiAgICAgICAgICAgIGFuY2hvcjIsIGFkanVzdDtcblxuICAgICAgICBpZiAoYiAtIGFuY2hvciA8IDApIHtcbiAgICAgICAgICAgIGFuY2hvcjIgPSBhLmNsb25lKCkuYWRkKHdob2xlTW9udGhEaWZmIC0gMSwgJ21vbnRocycpO1xuICAgICAgICAgICAgLy8gbGluZWFyIGFjcm9zcyB0aGUgbW9udGhcbiAgICAgICAgICAgIGFkanVzdCA9IChiIC0gYW5jaG9yKSAvIChhbmNob3IgLSBhbmNob3IyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFuY2hvcjIgPSBhLmNsb25lKCkuYWRkKHdob2xlTW9udGhEaWZmICsgMSwgJ21vbnRocycpO1xuICAgICAgICAgICAgLy8gbGluZWFyIGFjcm9zcyB0aGUgbW9udGhcbiAgICAgICAgICAgIGFkanVzdCA9IChiIC0gYW5jaG9yKSAvIChhbmNob3IyIC0gYW5jaG9yKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAtKHdob2xlTW9udGhEaWZmICsgYWRqdXN0KTtcbiAgICB9XG5cbiAgICB1dGlsc19ob29rc19faG9va3MuZGVmYXVsdEZvcm1hdCA9ICdZWVlZLU1NLUREVEhIOm1tOnNzWic7XG5cbiAgICBmdW5jdGlvbiB0b1N0cmluZyAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNsb25lKCkubG9jYWxlKCdlbicpLmZvcm1hdCgnZGRkIE1NTSBERCBZWVlZIEhIOm1tOnNzIFtHTVRdWlonKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb21lbnRfZm9ybWF0X190b0lTT1N0cmluZyAoKSB7XG4gICAgICAgIHZhciBtID0gdGhpcy5jbG9uZSgpLnV0YygpO1xuICAgICAgICBpZiAoMCA8IG0ueWVhcigpICYmIG0ueWVhcigpIDw9IDk5OTkpIHtcbiAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nKSkge1xuICAgICAgICAgICAgICAgIC8vIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbiBpcyB+NTB4IGZhc3RlciwgdXNlIGl0IHdoZW4gd2UgY2FuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudG9EYXRlKCkudG9JU09TdHJpbmcoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZvcm1hdE1vbWVudChtLCAnWVlZWS1NTS1ERFtUXUhIOm1tOnNzLlNTU1taXScpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZvcm1hdE1vbWVudChtLCAnWVlZWVlZLU1NLUREW1RdSEg6bW06c3MuU1NTW1pdJyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmb3JtYXQgKGlucHV0U3RyaW5nKSB7XG4gICAgICAgIHZhciBvdXRwdXQgPSBmb3JtYXRNb21lbnQodGhpcywgaW5wdXRTdHJpbmcgfHwgdXRpbHNfaG9va3NfX2hvb2tzLmRlZmF1bHRGb3JtYXQpO1xuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkucG9zdGZvcm1hdChvdXRwdXQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZyb20gKHRpbWUsIHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNWYWxpZCgpICYmXG4gICAgICAgICAgICAgICAgKChpc01vbWVudCh0aW1lKSAmJiB0aW1lLmlzVmFsaWQoKSkgfHxcbiAgICAgICAgICAgICAgICAgbG9jYWxfX2NyZWF0ZUxvY2FsKHRpbWUpLmlzVmFsaWQoKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVfX2NyZWF0ZUR1cmF0aW9uKHt0bzogdGhpcywgZnJvbTogdGltZX0pLmxvY2FsZSh0aGlzLmxvY2FsZSgpKS5odW1hbml6ZSghd2l0aG91dFN1ZmZpeCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkuaW52YWxpZERhdGUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZyb21Ob3cgKHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZnJvbShsb2NhbF9fY3JlYXRlTG9jYWwoKSwgd2l0aG91dFN1ZmZpeCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG8gKHRpbWUsIHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNWYWxpZCgpICYmXG4gICAgICAgICAgICAgICAgKChpc01vbWVudCh0aW1lKSAmJiB0aW1lLmlzVmFsaWQoKSkgfHxcbiAgICAgICAgICAgICAgICAgbG9jYWxfX2NyZWF0ZUxvY2FsKHRpbWUpLmlzVmFsaWQoKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVfX2NyZWF0ZUR1cmF0aW9uKHtmcm9tOiB0aGlzLCB0bzogdGltZX0pLmxvY2FsZSh0aGlzLmxvY2FsZSgpKS5odW1hbml6ZSghd2l0aG91dFN1ZmZpeCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkuaW52YWxpZERhdGUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvTm93ICh3aXRob3V0U3VmZml4KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRvKGxvY2FsX19jcmVhdGVMb2NhbCgpLCB3aXRob3V0U3VmZml4KTtcbiAgICB9XG5cbiAgICAvLyBJZiBwYXNzZWQgYSBsb2NhbGUga2V5LCBpdCB3aWxsIHNldCB0aGUgbG9jYWxlIGZvciB0aGlzXG4gICAgLy8gaW5zdGFuY2UuICBPdGhlcndpc2UsIGl0IHdpbGwgcmV0dXJuIHRoZSBsb2NhbGUgY29uZmlndXJhdGlvblxuICAgIC8vIHZhcmlhYmxlcyBmb3IgdGhpcyBpbnN0YW5jZS5cbiAgICBmdW5jdGlvbiBsb2NhbGUgKGtleSkge1xuICAgICAgICB2YXIgbmV3TG9jYWxlRGF0YTtcblxuICAgICAgICBpZiAoa2V5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9sb2NhbGUuX2FiYnI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuZXdMb2NhbGVEYXRhID0gbG9jYWxlX2xvY2FsZXNfX2dldExvY2FsZShrZXkpO1xuICAgICAgICAgICAgaWYgKG5ld0xvY2FsZURhdGEgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2xvY2FsZSA9IG5ld0xvY2FsZURhdGE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBsYW5nID0gZGVwcmVjYXRlKFxuICAgICAgICAnbW9tZW50KCkubGFuZygpIGlzIGRlcHJlY2F0ZWQuIEluc3RlYWQsIHVzZSBtb21lbnQoKS5sb2NhbGVEYXRhKCkgdG8gZ2V0IHRoZSBsYW5ndWFnZSBjb25maWd1cmF0aW9uLiBVc2UgbW9tZW50KCkubG9jYWxlKCkgdG8gY2hhbmdlIGxhbmd1YWdlcy4nLFxuICAgICAgICBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICBpZiAoa2V5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZShrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgKTtcblxuICAgIGZ1bmN0aW9uIGxvY2FsZURhdGEgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbG9jYWxlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHN0YXJ0T2YgKHVuaXRzKSB7XG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuICAgICAgICAvLyB0aGUgZm9sbG93aW5nIHN3aXRjaCBpbnRlbnRpb25hbGx5IG9taXRzIGJyZWFrIGtleXdvcmRzXG4gICAgICAgIC8vIHRvIHV0aWxpemUgZmFsbGluZyB0aHJvdWdoIHRoZSBjYXNlcy5cbiAgICAgICAgc3dpdGNoICh1bml0cykge1xuICAgICAgICBjYXNlICd5ZWFyJzpcbiAgICAgICAgICAgIHRoaXMubW9udGgoMCk7XG4gICAgICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICAgIGNhc2UgJ3F1YXJ0ZXInOlxuICAgICAgICBjYXNlICdtb250aCc6XG4gICAgICAgICAgICB0aGlzLmRhdGUoMSk7XG4gICAgICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICAgIGNhc2UgJ3dlZWsnOlxuICAgICAgICBjYXNlICdpc29XZWVrJzpcbiAgICAgICAgY2FzZSAnZGF5JzpcbiAgICAgICAgICAgIHRoaXMuaG91cnMoMCk7XG4gICAgICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICAgIGNhc2UgJ2hvdXInOlxuICAgICAgICAgICAgdGhpcy5taW51dGVzKDApO1xuICAgICAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgICBjYXNlICdtaW51dGUnOlxuICAgICAgICAgICAgdGhpcy5zZWNvbmRzKDApO1xuICAgICAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgICBjYXNlICdzZWNvbmQnOlxuICAgICAgICAgICAgdGhpcy5taWxsaXNlY29uZHMoMCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyB3ZWVrcyBhcmUgYSBzcGVjaWFsIGNhc2VcbiAgICAgICAgaWYgKHVuaXRzID09PSAnd2VlaycpIHtcbiAgICAgICAgICAgIHRoaXMud2Vla2RheSgwKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodW5pdHMgPT09ICdpc29XZWVrJykge1xuICAgICAgICAgICAgdGhpcy5pc29XZWVrZGF5KDEpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcXVhcnRlcnMgYXJlIGFsc28gc3BlY2lhbFxuICAgICAgICBpZiAodW5pdHMgPT09ICdxdWFydGVyJykge1xuICAgICAgICAgICAgdGhpcy5tb250aChNYXRoLmZsb29yKHRoaXMubW9udGgoKSAvIDMpICogMyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBlbmRPZiAodW5pdHMpIHtcbiAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cyk7XG4gICAgICAgIGlmICh1bml0cyA9PT0gdW5kZWZpbmVkIHx8IHVuaXRzID09PSAnbWlsbGlzZWNvbmQnKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5zdGFydE9mKHVuaXRzKS5hZGQoMSwgKHVuaXRzID09PSAnaXNvV2VlaycgPyAnd2VlaycgOiB1bml0cykpLnN1YnRyYWN0KDEsICdtcycpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvX3R5cGVfX3ZhbHVlT2YgKCkge1xuICAgICAgICByZXR1cm4gK3RoaXMuX2QgLSAoKHRoaXMuX29mZnNldCB8fCAwKSAqIDYwMDAwKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB1bml4ICgpIHtcbiAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoK3RoaXMgLyAxMDAwKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b0RhdGUgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fb2Zmc2V0ID8gbmV3IERhdGUoK3RoaXMpIDogdGhpcy5fZDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b0FycmF5ICgpIHtcbiAgICAgICAgdmFyIG0gPSB0aGlzO1xuICAgICAgICByZXR1cm4gW20ueWVhcigpLCBtLm1vbnRoKCksIG0uZGF0ZSgpLCBtLmhvdXIoKSwgbS5taW51dGUoKSwgbS5zZWNvbmQoKSwgbS5taWxsaXNlY29uZCgpXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b09iamVjdCAoKSB7XG4gICAgICAgIHZhciBtID0gdGhpcztcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHllYXJzOiBtLnllYXIoKSxcbiAgICAgICAgICAgIG1vbnRoczogbS5tb250aCgpLFxuICAgICAgICAgICAgZGF0ZTogbS5kYXRlKCksXG4gICAgICAgICAgICBob3VyczogbS5ob3VycygpLFxuICAgICAgICAgICAgbWludXRlczogbS5taW51dGVzKCksXG4gICAgICAgICAgICBzZWNvbmRzOiBtLnNlY29uZHMoKSxcbiAgICAgICAgICAgIG1pbGxpc2Vjb25kczogbS5taWxsaXNlY29uZHMoKVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvSlNPTiAoKSB7XG4gICAgICAgIC8vIEpTT04uc3RyaW5naWZ5KG5ldyBEYXRlKE5hTikpID09PSAnbnVsbCdcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZCgpID8gdGhpcy50b0lTT1N0cmluZygpIDogJ251bGwnO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1vbWVudF92YWxpZF9faXNWYWxpZCAoKSB7XG4gICAgICAgIHJldHVybiB2YWxpZF9faXNWYWxpZCh0aGlzKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzaW5nRmxhZ3MgKCkge1xuICAgICAgICByZXR1cm4gZXh0ZW5kKHt9LCBnZXRQYXJzaW5nRmxhZ3ModGhpcykpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGludmFsaWRBdCAoKSB7XG4gICAgICAgIHJldHVybiBnZXRQYXJzaW5nRmxhZ3ModGhpcykub3ZlcmZsb3c7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRpb25EYXRhKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaW5wdXQ6IHRoaXMuX2ksXG4gICAgICAgICAgICBmb3JtYXQ6IHRoaXMuX2YsXG4gICAgICAgICAgICBsb2NhbGU6IHRoaXMuX2xvY2FsZSxcbiAgICAgICAgICAgIGlzVVRDOiB0aGlzLl9pc1VUQyxcbiAgICAgICAgICAgIHN0cmljdDogdGhpcy5fc3RyaWN0XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydnZycsIDJdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLndlZWtZZWFyKCkgJSAxMDA7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ0dHJywgMl0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNvV2Vla1llYXIoKSAlIDEwMDtcbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIGFkZFdlZWtZZWFyRm9ybWF0VG9rZW4gKHRva2VuLCBnZXR0ZXIpIHtcbiAgICAgICAgYWRkRm9ybWF0VG9rZW4oMCwgW3Rva2VuLCB0b2tlbi5sZW5ndGhdLCAwLCBnZXR0ZXIpO1xuICAgIH1cblxuICAgIGFkZFdlZWtZZWFyRm9ybWF0VG9rZW4oJ2dnZ2cnLCAgICAgJ3dlZWtZZWFyJyk7XG4gICAgYWRkV2Vla1llYXJGb3JtYXRUb2tlbignZ2dnZ2cnLCAgICAnd2Vla1llYXInKTtcbiAgICBhZGRXZWVrWWVhckZvcm1hdFRva2VuKCdHR0dHJywgICdpc29XZWVrWWVhcicpO1xuICAgIGFkZFdlZWtZZWFyRm9ybWF0VG9rZW4oJ0dHR0dHJywgJ2lzb1dlZWtZZWFyJyk7XG5cbiAgICAvLyBBTElBU0VTXG5cbiAgICBhZGRVbml0QWxpYXMoJ3dlZWtZZWFyJywgJ2dnJyk7XG4gICAgYWRkVW5pdEFsaWFzKCdpc29XZWVrWWVhcicsICdHRycpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignRycsICAgICAgbWF0Y2hTaWduZWQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2cnLCAgICAgIG1hdGNoU2lnbmVkKTtcbiAgICBhZGRSZWdleFRva2VuKCdHRycsICAgICBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUmVnZXhUb2tlbignZ2cnLCAgICAgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0dHR0cnLCAgIG1hdGNoMXRvNCwgbWF0Y2g0KTtcbiAgICBhZGRSZWdleFRva2VuKCdnZ2dnJywgICBtYXRjaDF0bzQsIG1hdGNoNCk7XG4gICAgYWRkUmVnZXhUb2tlbignR0dHR0cnLCAgbWF0Y2gxdG82LCBtYXRjaDYpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2dnZ2dnJywgIG1hdGNoMXRvNiwgbWF0Y2g2KTtcblxuICAgIGFkZFdlZWtQYXJzZVRva2VuKFsnZ2dnZycsICdnZ2dnZycsICdHR0dHJywgJ0dHR0dHJ10sIGZ1bmN0aW9uIChpbnB1dCwgd2VlaywgY29uZmlnLCB0b2tlbikge1xuICAgICAgICB3ZWVrW3Rva2VuLnN1YnN0cigwLCAyKV0gPSB0b0ludChpbnB1dCk7XG4gICAgfSk7XG5cbiAgICBhZGRXZWVrUGFyc2VUb2tlbihbJ2dnJywgJ0dHJ10sIGZ1bmN0aW9uIChpbnB1dCwgd2VlaywgY29uZmlnLCB0b2tlbikge1xuICAgICAgICB3ZWVrW3Rva2VuXSA9IHV0aWxzX2hvb2tzX19ob29rcy5wYXJzZVR3b0RpZ2l0WWVhcihpbnB1dCk7XG4gICAgfSk7XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICBmdW5jdGlvbiBnZXRTZXRXZWVrWWVhciAoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGdldFNldFdlZWtZZWFySGVscGVyLmNhbGwodGhpcyxcbiAgICAgICAgICAgICAgICBpbnB1dCxcbiAgICAgICAgICAgICAgICB0aGlzLndlZWsoKSxcbiAgICAgICAgICAgICAgICB0aGlzLndlZWtkYXkoKSxcbiAgICAgICAgICAgICAgICB0aGlzLmxvY2FsZURhdGEoKS5fd2Vlay5kb3csXG4gICAgICAgICAgICAgICAgdGhpcy5sb2NhbGVEYXRhKCkuX3dlZWsuZG95KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTZXRJU09XZWVrWWVhciAoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGdldFNldFdlZWtZZWFySGVscGVyLmNhbGwodGhpcyxcbiAgICAgICAgICAgICAgICBpbnB1dCwgdGhpcy5pc29XZWVrKCksIHRoaXMuaXNvV2Vla2RheSgpLCAxLCA0KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRJU09XZWVrc0luWWVhciAoKSB7XG4gICAgICAgIHJldHVybiB3ZWVrc0luWWVhcih0aGlzLnllYXIoKSwgMSwgNCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0V2Vla3NJblllYXIgKCkge1xuICAgICAgICB2YXIgd2Vla0luZm8gPSB0aGlzLmxvY2FsZURhdGEoKS5fd2VlaztcbiAgICAgICAgcmV0dXJuIHdlZWtzSW5ZZWFyKHRoaXMueWVhcigpLCB3ZWVrSW5mby5kb3csIHdlZWtJbmZvLmRveSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U2V0V2Vla1llYXJIZWxwZXIoaW5wdXQsIHdlZWssIHdlZWtkYXksIGRvdywgZG95KSB7XG4gICAgICAgIHZhciB3ZWVrc1RhcmdldDtcbiAgICAgICAgaWYgKGlucHV0ID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiB3ZWVrT2ZZZWFyKHRoaXMsIGRvdywgZG95KS55ZWFyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd2Vla3NUYXJnZXQgPSB3ZWVrc0luWWVhcihpbnB1dCwgZG93LCBkb3kpO1xuICAgICAgICAgICAgaWYgKHdlZWsgPiB3ZWVrc1RhcmdldCkge1xuICAgICAgICAgICAgICAgIHdlZWsgPSB3ZWVrc1RhcmdldDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzZXRXZWVrQWxsLmNhbGwodGhpcywgaW5wdXQsIHdlZWssIHdlZWtkYXksIGRvdywgZG95KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldFdlZWtBbGwod2Vla1llYXIsIHdlZWssIHdlZWtkYXksIGRvdywgZG95KSB7XG4gICAgICAgIHZhciBkYXlPZlllYXJEYXRhID0gZGF5T2ZZZWFyRnJvbVdlZWtzKHdlZWtZZWFyLCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSksXG4gICAgICAgICAgICBkYXRlID0gY3JlYXRlVVRDRGF0ZShkYXlPZlllYXJEYXRhLnllYXIsIDAsIGRheU9mWWVhckRhdGEuZGF5T2ZZZWFyKTtcblxuICAgICAgICAvLyBjb25zb2xlLmxvZyhcImdvdFwiLCB3ZWVrWWVhciwgd2Vlaywgd2Vla2RheSwgXCJzZXRcIiwgZGF0ZS50b0lTT1N0cmluZygpKTtcbiAgICAgICAgdGhpcy55ZWFyKGRhdGUuZ2V0VVRDRnVsbFllYXIoKSk7XG4gICAgICAgIHRoaXMubW9udGgoZGF0ZS5nZXRVVENNb250aCgpKTtcbiAgICAgICAgdGhpcy5kYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ1EnLCAwLCAnUW8nLCAncXVhcnRlcicpO1xuXG4gICAgLy8gQUxJQVNFU1xuXG4gICAgYWRkVW5pdEFsaWFzKCdxdWFydGVyJywgJ1EnKTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ1EnLCBtYXRjaDEpO1xuICAgIGFkZFBhcnNlVG9rZW4oJ1EnLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgICAgIGFycmF5W01PTlRIXSA9ICh0b0ludChpbnB1dCkgLSAxKSAqIDM7XG4gICAgfSk7XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICBmdW5jdGlvbiBnZXRTZXRRdWFydGVyIChpbnB1dCkge1xuICAgICAgICByZXR1cm4gaW5wdXQgPT0gbnVsbCA/IE1hdGguY2VpbCgodGhpcy5tb250aCgpICsgMSkgLyAzKSA6IHRoaXMubW9udGgoKGlucHV0IC0gMSkgKiAzICsgdGhpcy5tb250aCgpICUgMyk7XG4gICAgfVxuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ3cnLCBbJ3d3JywgMl0sICd3bycsICd3ZWVrJyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oJ1cnLCBbJ1dXJywgMl0sICdXbycsICdpc29XZWVrJyk7XG5cbiAgICAvLyBBTElBU0VTXG5cbiAgICBhZGRVbml0QWxpYXMoJ3dlZWsnLCAndycpO1xuICAgIGFkZFVuaXRBbGlhcygnaXNvV2VlaycsICdXJyk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCd3JywgIG1hdGNoMXRvMik7XG4gICAgYWRkUmVnZXhUb2tlbignd3cnLCBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUmVnZXhUb2tlbignVycsICBtYXRjaDF0bzIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1dXJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuXG4gICAgYWRkV2Vla1BhcnNlVG9rZW4oWyd3JywgJ3d3JywgJ1cnLCAnV1cnXSwgZnVuY3Rpb24gKGlucHV0LCB3ZWVrLCBjb25maWcsIHRva2VuKSB7XG4gICAgICAgIHdlZWtbdG9rZW4uc3Vic3RyKDAsIDEpXSA9IHRvSW50KGlucHV0KTtcbiAgICB9KTtcblxuICAgIC8vIEhFTFBFUlNcblxuICAgIC8vIExPQ0FMRVNcblxuICAgIGZ1bmN0aW9uIGxvY2FsZVdlZWsgKG1vbSkge1xuICAgICAgICByZXR1cm4gd2Vla09mWWVhcihtb20sIHRoaXMuX3dlZWsuZG93LCB0aGlzLl93ZWVrLmRveSkud2VlaztcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdExvY2FsZVdlZWsgPSB7XG4gICAgICAgIGRvdyA6IDAsIC8vIFN1bmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICBkb3kgOiA2ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiAxc3QgaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGxvY2FsZUZpcnN0RGF5T2ZXZWVrICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWsuZG93O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvY2FsZUZpcnN0RGF5T2ZZZWFyICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWsuZG95O1xuICAgIH1cblxuICAgIC8vIE1PTUVOVFNcblxuICAgIGZ1bmN0aW9uIGdldFNldFdlZWsgKGlucHV0KSB7XG4gICAgICAgIHZhciB3ZWVrID0gdGhpcy5sb2NhbGVEYXRhKCkud2Vlayh0aGlzKTtcbiAgICAgICAgcmV0dXJuIGlucHV0ID09IG51bGwgPyB3ZWVrIDogdGhpcy5hZGQoKGlucHV0IC0gd2VlaykgKiA3LCAnZCcpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFNldElTT1dlZWsgKGlucHV0KSB7XG4gICAgICAgIHZhciB3ZWVrID0gd2Vla09mWWVhcih0aGlzLCAxLCA0KS53ZWVrO1xuICAgICAgICByZXR1cm4gaW5wdXQgPT0gbnVsbCA/IHdlZWsgOiB0aGlzLmFkZCgoaW5wdXQgLSB3ZWVrKSAqIDcsICdkJyk7XG4gICAgfVxuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ0QnLCBbJ0REJywgMl0sICdEbycsICdkYXRlJyk7XG5cbiAgICAvLyBBTElBU0VTXG5cbiAgICBhZGRVbml0QWxpYXMoJ2RhdGUnLCAnRCcpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignRCcsICBtYXRjaDF0bzIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0REJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0RvJywgZnVuY3Rpb24gKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIGlzU3RyaWN0ID8gbG9jYWxlLl9vcmRpbmFsUGFyc2UgOiBsb2NhbGUuX29yZGluYWxQYXJzZUxlbmllbnQ7XG4gICAgfSk7XG5cbiAgICBhZGRQYXJzZVRva2VuKFsnRCcsICdERCddLCBEQVRFKTtcbiAgICBhZGRQYXJzZVRva2VuKCdEbycsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICAgICAgYXJyYXlbREFURV0gPSB0b0ludChpbnB1dC5tYXRjaChtYXRjaDF0bzIpWzBdLCAxMCk7XG4gICAgfSk7XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICB2YXIgZ2V0U2V0RGF5T2ZNb250aCA9IG1ha2VHZXRTZXQoJ0RhdGUnLCB0cnVlKTtcblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCdkJywgMCwgJ2RvJywgJ2RheScpO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ2RkJywgMCwgMCwgZnVuY3Rpb24gKGZvcm1hdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkud2Vla2RheXNNaW4odGhpcywgZm9ybWF0KTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdkZGQnLCAwLCAwLCBmdW5jdGlvbiAoZm9ybWF0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS53ZWVrZGF5c1Nob3J0KHRoaXMsIGZvcm1hdCk7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignZGRkZCcsIDAsIDAsIGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLndlZWtkYXlzKHRoaXMsIGZvcm1hdCk7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignZScsIDAsIDAsICd3ZWVrZGF5Jyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oJ0UnLCAwLCAwLCAnaXNvV2Vla2RheScpO1xuXG4gICAgLy8gQUxJQVNFU1xuXG4gICAgYWRkVW5pdEFsaWFzKCdkYXknLCAnZCcpO1xuICAgIGFkZFVuaXRBbGlhcygnd2Vla2RheScsICdlJyk7XG4gICAgYWRkVW5pdEFsaWFzKCdpc29XZWVrZGF5JywgJ0UnKTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ2QnLCAgICBtYXRjaDF0bzIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2UnLCAgICBtYXRjaDF0bzIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0UnLCAgICBtYXRjaDF0bzIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2RkJywgICBtYXRjaFdvcmQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2RkZCcsICBtYXRjaFdvcmQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2RkZGQnLCBtYXRjaFdvcmQpO1xuXG4gICAgYWRkV2Vla1BhcnNlVG9rZW4oWydkZCcsICdkZGQnLCAnZGRkZCddLCBmdW5jdGlvbiAoaW5wdXQsIHdlZWssIGNvbmZpZywgdG9rZW4pIHtcbiAgICAgICAgdmFyIHdlZWtkYXkgPSBjb25maWcuX2xvY2FsZS53ZWVrZGF5c1BhcnNlKGlucHV0LCB0b2tlbiwgY29uZmlnLl9zdHJpY3QpO1xuICAgICAgICAvLyBpZiB3ZSBkaWRuJ3QgZ2V0IGEgd2Vla2RheSBuYW1lLCBtYXJrIHRoZSBkYXRlIGFzIGludmFsaWRcbiAgICAgICAgaWYgKHdlZWtkYXkgIT0gbnVsbCkge1xuICAgICAgICAgICAgd2Vlay5kID0gd2Vla2RheTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmludmFsaWRXZWVrZGF5ID0gaW5wdXQ7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIGFkZFdlZWtQYXJzZVRva2VuKFsnZCcsICdlJywgJ0UnXSwgZnVuY3Rpb24gKGlucHV0LCB3ZWVrLCBjb25maWcsIHRva2VuKSB7XG4gICAgICAgIHdlZWtbdG9rZW5dID0gdG9JbnQoaW5wdXQpO1xuICAgIH0pO1xuXG4gICAgLy8gSEVMUEVSU1xuXG4gICAgZnVuY3Rpb24gcGFyc2VXZWVrZGF5KGlucHV0LCBsb2NhbGUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghaXNOYU4oaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VJbnQoaW5wdXQsIDEwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlucHV0ID0gbG9jYWxlLndlZWtkYXlzUGFyc2UoaW5wdXQpO1xuICAgICAgICBpZiAodHlwZW9mIGlucHV0ID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgLy8gTE9DQUxFU1xuXG4gICAgdmFyIGRlZmF1bHRMb2NhbGVXZWVrZGF5cyA9ICdTdW5kYXlfTW9uZGF5X1R1ZXNkYXlfV2VkbmVzZGF5X1RodXJzZGF5X0ZyaWRheV9TYXR1cmRheScuc3BsaXQoJ18nKTtcbiAgICBmdW5jdGlvbiBsb2NhbGVXZWVrZGF5cyAobSwgZm9ybWF0KSB7XG4gICAgICAgIHJldHVybiBpc0FycmF5KHRoaXMuX3dlZWtkYXlzKSA/IHRoaXMuX3dlZWtkYXlzW20uZGF5KCldIDpcbiAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzW3RoaXMuX3dlZWtkYXlzLmlzRm9ybWF0LnRlc3QoZm9ybWF0KSA/ICdmb3JtYXQnIDogJ3N0YW5kYWxvbmUnXVttLmRheSgpXTtcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdExvY2FsZVdlZWtkYXlzU2hvcnQgPSAnU3VuX01vbl9UdWVfV2VkX1RodV9GcmlfU2F0Jy5zcGxpdCgnXycpO1xuICAgIGZ1bmN0aW9uIGxvY2FsZVdlZWtkYXlzU2hvcnQgKG0pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzU2hvcnRbbS5kYXkoKV07XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRMb2NhbGVXZWVrZGF5c01pbiA9ICdTdV9Nb19UdV9XZV9UaF9Gcl9TYScuc3BsaXQoJ18nKTtcbiAgICBmdW5jdGlvbiBsb2NhbGVXZWVrZGF5c01pbiAobSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNNaW5bbS5kYXkoKV07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9jYWxlV2Vla2RheXNQYXJzZSAod2Vla2RheU5hbWUsIGZvcm1hdCwgc3RyaWN0KSB7XG4gICAgICAgIHZhciBpLCBtb20sIHJlZ2V4O1xuXG4gICAgICAgIGlmICghdGhpcy5fd2Vla2RheXNQYXJzZSkge1xuICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNQYXJzZSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fbWluV2Vla2RheXNQYXJzZSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlID0gW107XG4gICAgICAgICAgICB0aGlzLl9mdWxsV2Vla2RheXNQYXJzZSA9IFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDc7IGkrKykge1xuICAgICAgICAgICAgLy8gbWFrZSB0aGUgcmVnZXggaWYgd2UgZG9uJ3QgaGF2ZSBpdCBhbHJlYWR5XG5cbiAgICAgICAgICAgIG1vbSA9IGxvY2FsX19jcmVhdGVMb2NhbChbMjAwMCwgMV0pLmRheShpKTtcbiAgICAgICAgICAgIGlmIChzdHJpY3QgJiYgIXRoaXMuX2Z1bGxXZWVrZGF5c1BhcnNlW2ldKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZnVsbFdlZWtkYXlzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKCdeJyArIHRoaXMud2Vla2RheXMobW9tLCAnJykucmVwbGFjZSgnLicsICdcXC4/JykgKyAnJCcsICdpJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlW2ldID0gbmV3IFJlZ0V4cCgnXicgKyB0aGlzLndlZWtkYXlzU2hvcnQobW9tLCAnJykucmVwbGFjZSgnLicsICdcXC4/JykgKyAnJCcsICdpJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5fbWluV2Vla2RheXNQYXJzZVtpXSA9IG5ldyBSZWdFeHAoJ14nICsgdGhpcy53ZWVrZGF5c01pbihtb20sICcnKS5yZXBsYWNlKCcuJywgJ1xcLj8nKSArICckJywgJ2knKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghdGhpcy5fd2Vla2RheXNQYXJzZVtpXSkge1xuICAgICAgICAgICAgICAgIHJlZ2V4ID0gJ14nICsgdGhpcy53ZWVrZGF5cyhtb20sICcnKSArICd8XicgKyB0aGlzLndlZWtkYXlzU2hvcnQobW9tLCAnJykgKyAnfF4nICsgdGhpcy53ZWVrZGF5c01pbihtb20sICcnKTtcbiAgICAgICAgICAgICAgICB0aGlzLl93ZWVrZGF5c1BhcnNlW2ldID0gbmV3IFJlZ0V4cChyZWdleC5yZXBsYWNlKCcuJywgJycpLCAnaScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gdGVzdCB0aGUgcmVnZXhcbiAgICAgICAgICAgIGlmIChzdHJpY3QgJiYgZm9ybWF0ID09PSAnZGRkZCcgJiYgdGhpcy5fZnVsbFdlZWtkYXlzUGFyc2VbaV0udGVzdCh3ZWVrZGF5TmFtZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RyaWN0ICYmIGZvcm1hdCA9PT0gJ2RkZCcgJiYgdGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlW2ldLnRlc3Qod2Vla2RheU5hbWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHN0cmljdCAmJiBmb3JtYXQgPT09ICdkZCcgJiYgdGhpcy5fbWluV2Vla2RheXNQYXJzZVtpXS50ZXN0KHdlZWtkYXlOYW1lKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICghc3RyaWN0ICYmIHRoaXMuX3dlZWtkYXlzUGFyc2VbaV0udGVzdCh3ZWVrZGF5TmFtZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIE1PTUVOVFNcblxuICAgIGZ1bmN0aW9uIGdldFNldERheU9mV2VlayAoaW5wdXQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0ICE9IG51bGwgPyB0aGlzIDogTmFOO1xuICAgICAgICB9XG4gICAgICAgIHZhciBkYXkgPSB0aGlzLl9pc1VUQyA/IHRoaXMuX2QuZ2V0VVRDRGF5KCkgOiB0aGlzLl9kLmdldERheSgpO1xuICAgICAgICBpZiAoaW5wdXQgIT0gbnVsbCkge1xuICAgICAgICAgICAgaW5wdXQgPSBwYXJzZVdlZWtkYXkoaW5wdXQsIHRoaXMubG9jYWxlRGF0YSgpKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFkZChpbnB1dCAtIGRheSwgJ2QnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBkYXk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTZXRMb2NhbGVEYXlPZldlZWsgKGlucHV0KSB7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dCAhPSBudWxsID8gdGhpcyA6IE5hTjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgd2Vla2RheSA9ICh0aGlzLmRheSgpICsgNyAtIHRoaXMubG9jYWxlRGF0YSgpLl93ZWVrLmRvdykgJSA3O1xuICAgICAgICByZXR1cm4gaW5wdXQgPT0gbnVsbCA/IHdlZWtkYXkgOiB0aGlzLmFkZChpbnB1dCAtIHdlZWtkYXksICdkJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U2V0SVNPRGF5T2ZXZWVrIChpbnB1dCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQgIT0gbnVsbCA/IHRoaXMgOiBOYU47XG4gICAgICAgIH1cbiAgICAgICAgLy8gYmVoYXZlcyB0aGUgc2FtZSBhcyBtb21lbnQjZGF5IGV4Y2VwdFxuICAgICAgICAvLyBhcyBhIGdldHRlciwgcmV0dXJucyA3IGluc3RlYWQgb2YgMCAoMS03IHJhbmdlIGluc3RlYWQgb2YgMC02KVxuICAgICAgICAvLyBhcyBhIHNldHRlciwgc3VuZGF5IHNob3VsZCBiZWxvbmcgdG8gdGhlIHByZXZpb3VzIHdlZWsuXG4gICAgICAgIHJldHVybiBpbnB1dCA9PSBudWxsID8gdGhpcy5kYXkoKSB8fCA3IDogdGhpcy5kYXkodGhpcy5kYXkoKSAlIDcgPyBpbnB1dCA6IGlucHV0IC0gNyk7XG4gICAgfVxuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ0RERCcsIFsnRERERCcsIDNdLCAnREREbycsICdkYXlPZlllYXInKTtcblxuICAgIC8vIEFMSUFTRVNcblxuICAgIGFkZFVuaXRBbGlhcygnZGF5T2ZZZWFyJywgJ0RERCcpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignREREJywgIG1hdGNoMXRvMyk7XG4gICAgYWRkUmVnZXhUb2tlbignRERERCcsIG1hdGNoMyk7XG4gICAgYWRkUGFyc2VUb2tlbihbJ0RERCcsICdEREREJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICBjb25maWcuX2RheU9mWWVhciA9IHRvSW50KGlucHV0KTtcbiAgICB9KTtcblxuICAgIC8vIEhFTFBFUlNcblxuICAgIC8vIE1PTUVOVFNcblxuICAgIGZ1bmN0aW9uIGdldFNldERheU9mWWVhciAoaW5wdXQpIHtcbiAgICAgICAgdmFyIGRheU9mWWVhciA9IE1hdGgucm91bmQoKHRoaXMuY2xvbmUoKS5zdGFydE9mKCdkYXknKSAtIHRoaXMuY2xvbmUoKS5zdGFydE9mKCd5ZWFyJykpIC8gODY0ZTUpICsgMTtcbiAgICAgICAgcmV0dXJuIGlucHV0ID09IG51bGwgPyBkYXlPZlllYXIgOiB0aGlzLmFkZCgoaW5wdXQgLSBkYXlPZlllYXIpLCAnZCcpO1xuICAgIH1cblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGZ1bmN0aW9uIGhGb3JtYXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhvdXJzKCkgJSAxMiB8fCAxMjtcbiAgICB9XG5cbiAgICBhZGRGb3JtYXRUb2tlbignSCcsIFsnSEgnLCAyXSwgMCwgJ2hvdXInKTtcbiAgICBhZGRGb3JtYXRUb2tlbignaCcsIFsnaGgnLCAyXSwgMCwgaEZvcm1hdCk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignaG1tJywgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gJycgKyBoRm9ybWF0LmFwcGx5KHRoaXMpICsgemVyb0ZpbGwodGhpcy5taW51dGVzKCksIDIpO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ2htbXNzJywgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gJycgKyBoRm9ybWF0LmFwcGx5KHRoaXMpICsgemVyb0ZpbGwodGhpcy5taW51dGVzKCksIDIpICtcbiAgICAgICAgICAgIHplcm9GaWxsKHRoaXMuc2Vjb25kcygpLCAyKTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdIbW0nLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAnJyArIHRoaXMuaG91cnMoKSArIHplcm9GaWxsKHRoaXMubWludXRlcygpLCAyKTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdIbW1zcycsIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICcnICsgdGhpcy5ob3VycygpICsgemVyb0ZpbGwodGhpcy5taW51dGVzKCksIDIpICtcbiAgICAgICAgICAgIHplcm9GaWxsKHRoaXMuc2Vjb25kcygpLCAyKTtcbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIG1lcmlkaWVtICh0b2tlbiwgbG93ZXJjYXNlKSB7XG4gICAgICAgIGFkZEZvcm1hdFRva2VuKHRva2VuLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkubWVyaWRpZW0odGhpcy5ob3VycygpLCB0aGlzLm1pbnV0ZXMoKSwgbG93ZXJjYXNlKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgbWVyaWRpZW0oJ2EnLCB0cnVlKTtcbiAgICBtZXJpZGllbSgnQScsIGZhbHNlKTtcblxuICAgIC8vIEFMSUFTRVNcblxuICAgIGFkZFVuaXRBbGlhcygnaG91cicsICdoJyk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBmdW5jdGlvbiBtYXRjaE1lcmlkaWVtIChpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUuX21lcmlkaWVtUGFyc2U7XG4gICAgfVxuXG4gICAgYWRkUmVnZXhUb2tlbignYScsICBtYXRjaE1lcmlkaWVtKTtcbiAgICBhZGRSZWdleFRva2VuKCdBJywgIG1hdGNoTWVyaWRpZW0pO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0gnLCAgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCdoJywgIG1hdGNoMXRvMik7XG4gICAgYWRkUmVnZXhUb2tlbignSEgnLCBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUmVnZXhUb2tlbignaGgnLCBtYXRjaDF0bzIsIG1hdGNoMik7XG5cbiAgICBhZGRSZWdleFRva2VuKCdobW0nLCBtYXRjaDN0bzQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2htbXNzJywgbWF0Y2g1dG82KTtcbiAgICBhZGRSZWdleFRva2VuKCdIbW0nLCBtYXRjaDN0bzQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0htbXNzJywgbWF0Y2g1dG82KTtcblxuICAgIGFkZFBhcnNlVG9rZW4oWydIJywgJ0hIJ10sIEhPVVIpO1xuICAgIGFkZFBhcnNlVG9rZW4oWydhJywgJ0EnXSwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIGNvbmZpZy5faXNQbSA9IGNvbmZpZy5fbG9jYWxlLmlzUE0oaW5wdXQpO1xuICAgICAgICBjb25maWcuX21lcmlkaWVtID0gaW5wdXQ7XG4gICAgfSk7XG4gICAgYWRkUGFyc2VUb2tlbihbJ2gnLCAnaGgnXSwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIGFycmF5W0hPVVJdID0gdG9JbnQoaW5wdXQpO1xuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5iaWdIb3VyID0gdHJ1ZTtcbiAgICB9KTtcbiAgICBhZGRQYXJzZVRva2VuKCdobW0nLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgdmFyIHBvcyA9IGlucHV0Lmxlbmd0aCAtIDI7XG4gICAgICAgIGFycmF5W0hPVVJdID0gdG9JbnQoaW5wdXQuc3Vic3RyKDAsIHBvcykpO1xuICAgICAgICBhcnJheVtNSU5VVEVdID0gdG9JbnQoaW5wdXQuc3Vic3RyKHBvcykpO1xuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5iaWdIb3VyID0gdHJ1ZTtcbiAgICB9KTtcbiAgICBhZGRQYXJzZVRva2VuKCdobW1zcycsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICB2YXIgcG9zMSA9IGlucHV0Lmxlbmd0aCAtIDQ7XG4gICAgICAgIHZhciBwb3MyID0gaW5wdXQubGVuZ3RoIC0gMjtcbiAgICAgICAgYXJyYXlbSE9VUl0gPSB0b0ludChpbnB1dC5zdWJzdHIoMCwgcG9zMSkpO1xuICAgICAgICBhcnJheVtNSU5VVEVdID0gdG9JbnQoaW5wdXQuc3Vic3RyKHBvczEsIDIpKTtcbiAgICAgICAgYXJyYXlbU0VDT05EXSA9IHRvSW50KGlucHV0LnN1YnN0cihwb3MyKSk7XG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmJpZ0hvdXIgPSB0cnVlO1xuICAgIH0pO1xuICAgIGFkZFBhcnNlVG9rZW4oJ0htbScsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICB2YXIgcG9zID0gaW5wdXQubGVuZ3RoIC0gMjtcbiAgICAgICAgYXJyYXlbSE9VUl0gPSB0b0ludChpbnB1dC5zdWJzdHIoMCwgcG9zKSk7XG4gICAgICAgIGFycmF5W01JTlVURV0gPSB0b0ludChpbnB1dC5zdWJzdHIocG9zKSk7XG4gICAgfSk7XG4gICAgYWRkUGFyc2VUb2tlbignSG1tc3MnLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgdmFyIHBvczEgPSBpbnB1dC5sZW5ndGggLSA0O1xuICAgICAgICB2YXIgcG9zMiA9IGlucHV0Lmxlbmd0aCAtIDI7XG4gICAgICAgIGFycmF5W0hPVVJdID0gdG9JbnQoaW5wdXQuc3Vic3RyKDAsIHBvczEpKTtcbiAgICAgICAgYXJyYXlbTUlOVVRFXSA9IHRvSW50KGlucHV0LnN1YnN0cihwb3MxLCAyKSk7XG4gICAgICAgIGFycmF5W1NFQ09ORF0gPSB0b0ludChpbnB1dC5zdWJzdHIocG9zMikpO1xuICAgIH0pO1xuXG4gICAgLy8gTE9DQUxFU1xuXG4gICAgZnVuY3Rpb24gbG9jYWxlSXNQTSAoaW5wdXQpIHtcbiAgICAgICAgLy8gSUU4IFF1aXJrcyBNb2RlICYgSUU3IFN0YW5kYXJkcyBNb2RlIGRvIG5vdCBhbGxvdyBhY2Nlc3Npbmcgc3RyaW5ncyBsaWtlIGFycmF5c1xuICAgICAgICAvLyBVc2luZyBjaGFyQXQgc2hvdWxkIGJlIG1vcmUgY29tcGF0aWJsZS5cbiAgICAgICAgcmV0dXJuICgoaW5wdXQgKyAnJykudG9Mb3dlckNhc2UoKS5jaGFyQXQoMCkgPT09ICdwJyk7XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRMb2NhbGVNZXJpZGllbVBhcnNlID0gL1thcF1cXC4/bT9cXC4/L2k7XG4gICAgZnVuY3Rpb24gbG9jYWxlTWVyaWRpZW0gKGhvdXJzLCBtaW51dGVzLCBpc0xvd2VyKSB7XG4gICAgICAgIGlmIChob3VycyA+IDExKSB7XG4gICAgICAgICAgICByZXR1cm4gaXNMb3dlciA/ICdwbScgOiAnUE0nO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGlzTG93ZXIgPyAnYW0nIDogJ0FNJztcbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgLy8gU2V0dGluZyB0aGUgaG91ciBzaG91bGQga2VlcCB0aGUgdGltZSwgYmVjYXVzZSB0aGUgdXNlciBleHBsaWNpdGx5XG4gICAgLy8gc3BlY2lmaWVkIHdoaWNoIGhvdXIgaGUgd2FudHMuIFNvIHRyeWluZyB0byBtYWludGFpbiB0aGUgc2FtZSBob3VyIChpblxuICAgIC8vIGEgbmV3IHRpbWV6b25lKSBtYWtlcyBzZW5zZS4gQWRkaW5nL3N1YnRyYWN0aW5nIGhvdXJzIGRvZXMgbm90IGZvbGxvd1xuICAgIC8vIHRoaXMgcnVsZS5cbiAgICB2YXIgZ2V0U2V0SG91ciA9IG1ha2VHZXRTZXQoJ0hvdXJzJywgdHJ1ZSk7XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbignbScsIFsnbW0nLCAyXSwgMCwgJ21pbnV0ZScpO1xuXG4gICAgLy8gQUxJQVNFU1xuXG4gICAgYWRkVW5pdEFsaWFzKCdtaW51dGUnLCAnbScpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignbScsICBtYXRjaDF0bzIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ21tJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFBhcnNlVG9rZW4oWydtJywgJ21tJ10sIE1JTlVURSk7XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICB2YXIgZ2V0U2V0TWludXRlID0gbWFrZUdldFNldCgnTWludXRlcycsIGZhbHNlKTtcblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCdzJywgWydzcycsIDJdLCAwLCAnc2Vjb25kJyk7XG5cbiAgICAvLyBBTElBU0VTXG5cbiAgICBhZGRVbml0QWxpYXMoJ3NlY29uZCcsICdzJyk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdzJywgIG1hdGNoMXRvMik7XG4gICAgYWRkUmVnZXhUb2tlbignc3MnLCBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUGFyc2VUb2tlbihbJ3MnLCAnc3MnXSwgU0VDT05EKTtcblxuICAgIC8vIE1PTUVOVFNcblxuICAgIHZhciBnZXRTZXRTZWNvbmQgPSBtYWtlR2V0U2V0KCdTZWNvbmRzJywgZmFsc2UpO1xuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ1MnLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB+fih0aGlzLm1pbGxpc2Vjb25kKCkgLyAxMDApO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydTUycsIDJdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB+fih0aGlzLm1pbGxpc2Vjb25kKCkgLyAxMCk7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1NTUycsIDNdLCAwLCAnbWlsbGlzZWNvbmQnKTtcbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1NTU1MnLCA0XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZCgpICogMTA7XG4gICAgfSk7XG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTUycsIDVdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1pbGxpc2Vjb25kKCkgKiAxMDA7XG4gICAgfSk7XG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTU1MnLCA2XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZCgpICogMTAwMDtcbiAgICB9KTtcbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1NTU1NTU1MnLCA3XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZCgpICogMTAwMDA7XG4gICAgfSk7XG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTU1NTUycsIDhdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1pbGxpc2Vjb25kKCkgKiAxMDAwMDA7XG4gICAgfSk7XG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTU1NTU1MnLCA5XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZCgpICogMTAwMDAwMDtcbiAgICB9KTtcblxuXG4gICAgLy8gQUxJQVNFU1xuXG4gICAgYWRkVW5pdEFsaWFzKCdtaWxsaXNlY29uZCcsICdtcycpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignUycsICAgIG1hdGNoMXRvMywgbWF0Y2gxKTtcbiAgICBhZGRSZWdleFRva2VuKCdTUycsICAgbWF0Y2gxdG8zLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1NTUycsICBtYXRjaDF0bzMsIG1hdGNoMyk7XG5cbiAgICB2YXIgdG9rZW47XG4gICAgZm9yICh0b2tlbiA9ICdTU1NTJzsgdG9rZW4ubGVuZ3RoIDw9IDk7IHRva2VuICs9ICdTJykge1xuICAgICAgICBhZGRSZWdleFRva2VuKHRva2VuLCBtYXRjaFVuc2lnbmVkKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZU1zKGlucHV0LCBhcnJheSkge1xuICAgICAgICBhcnJheVtNSUxMSVNFQ09ORF0gPSB0b0ludCgoJzAuJyArIGlucHV0KSAqIDEwMDApO1xuICAgIH1cblxuICAgIGZvciAodG9rZW4gPSAnUyc7IHRva2VuLmxlbmd0aCA8PSA5OyB0b2tlbiArPSAnUycpIHtcbiAgICAgICAgYWRkUGFyc2VUb2tlbih0b2tlbiwgcGFyc2VNcyk7XG4gICAgfVxuICAgIC8vIE1PTUVOVFNcblxuICAgIHZhciBnZXRTZXRNaWxsaXNlY29uZCA9IG1ha2VHZXRTZXQoJ01pbGxpc2Vjb25kcycsIGZhbHNlKTtcblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCd6JywgIDAsIDAsICd6b25lQWJicicpO1xuICAgIGFkZEZvcm1hdFRva2VuKCd6eicsIDAsIDAsICd6b25lTmFtZScpO1xuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgZnVuY3Rpb24gZ2V0Wm9uZUFiYnIgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNVVEMgPyAnVVRDJyA6ICcnO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFpvbmVOYW1lICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzVVRDID8gJ0Nvb3JkaW5hdGVkIFVuaXZlcnNhbCBUaW1lJyA6ICcnO1xuICAgIH1cblxuICAgIHZhciBtb21lbnRQcm90b3R5cGVfX3Byb3RvID0gTW9tZW50LnByb3RvdHlwZTtcblxuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8uYWRkICAgICAgICAgICAgICAgPSBhZGRfc3VidHJhY3RfX2FkZDtcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLmNhbGVuZGFyICAgICAgICAgID0gbW9tZW50X2NhbGVuZGFyX19jYWxlbmRhcjtcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLmNsb25lICAgICAgICAgICAgID0gY2xvbmU7XG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by5kaWZmICAgICAgICAgICAgICA9IGRpZmY7XG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by5lbmRPZiAgICAgICAgICAgICA9IGVuZE9mO1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8uZm9ybWF0ICAgICAgICAgICAgPSBmb3JtYXQ7XG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by5mcm9tICAgICAgICAgICAgICA9IGZyb207XG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by5mcm9tTm93ICAgICAgICAgICA9IGZyb21Ob3c7XG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by50byAgICAgICAgICAgICAgICA9IHRvO1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8udG9Ob3cgICAgICAgICAgICAgPSB0b05vdztcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLmdldCAgICAgICAgICAgICAgID0gZ2V0U2V0O1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8uaW52YWxpZEF0ICAgICAgICAgPSBpbnZhbGlkQXQ7XG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by5pc0FmdGVyICAgICAgICAgICA9IGlzQWZ0ZXI7XG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by5pc0JlZm9yZSAgICAgICAgICA9IGlzQmVmb3JlO1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8uaXNCZXR3ZWVuICAgICAgICAgPSBpc0JldHdlZW47XG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by5pc1NhbWUgICAgICAgICAgICA9IGlzU2FtZTtcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLmlzU2FtZU9yQWZ0ZXIgICAgID0gaXNTYW1lT3JBZnRlcjtcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLmlzU2FtZU9yQmVmb3JlICAgID0gaXNTYW1lT3JCZWZvcmU7XG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by5pc1ZhbGlkICAgICAgICAgICA9IG1vbWVudF92YWxpZF9faXNWYWxpZDtcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLmxhbmcgICAgICAgICAgICAgID0gbGFuZztcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLmxvY2FsZSAgICAgICAgICAgID0gbG9jYWxlO1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8ubG9jYWxlRGF0YSAgICAgICAgPSBsb2NhbGVEYXRhO1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8ubWF4ICAgICAgICAgICAgICAgPSBwcm90b3R5cGVNYXg7XG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by5taW4gICAgICAgICAgICAgICA9IHByb3RvdHlwZU1pbjtcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLnBhcnNpbmdGbGFncyAgICAgID0gcGFyc2luZ0ZsYWdzO1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8uc2V0ICAgICAgICAgICAgICAgPSBnZXRTZXQ7XG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by5zdGFydE9mICAgICAgICAgICA9IHN0YXJ0T2Y7XG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by5zdWJ0cmFjdCAgICAgICAgICA9IGFkZF9zdWJ0cmFjdF9fc3VidHJhY3Q7XG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by50b0FycmF5ICAgICAgICAgICA9IHRvQXJyYXk7XG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by50b09iamVjdCAgICAgICAgICA9IHRvT2JqZWN0O1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8udG9EYXRlICAgICAgICAgICAgPSB0b0RhdGU7XG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by50b0lTT1N0cmluZyAgICAgICA9IG1vbWVudF9mb3JtYXRfX3RvSVNPU3RyaW5nO1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8udG9KU09OICAgICAgICAgICAgPSB0b0pTT047XG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by50b1N0cmluZyAgICAgICAgICA9IHRvU3RyaW5nO1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8udW5peCAgICAgICAgICAgICAgPSB1bml4O1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8udmFsdWVPZiAgICAgICAgICAgPSB0b190eXBlX192YWx1ZU9mO1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8uY3JlYXRpb25EYXRhICAgICAgPSBjcmVhdGlvbkRhdGE7XG5cbiAgICAvLyBZZWFyXG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by55ZWFyICAgICAgID0gZ2V0U2V0WWVhcjtcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLmlzTGVhcFllYXIgPSBnZXRJc0xlYXBZZWFyO1xuXG4gICAgLy8gV2VlayBZZWFyXG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by53ZWVrWWVhciAgICA9IGdldFNldFdlZWtZZWFyO1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8uaXNvV2Vla1llYXIgPSBnZXRTZXRJU09XZWVrWWVhcjtcblxuICAgIC8vIFF1YXJ0ZXJcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLnF1YXJ0ZXIgPSBtb21lbnRQcm90b3R5cGVfX3Byb3RvLnF1YXJ0ZXJzID0gZ2V0U2V0UXVhcnRlcjtcblxuICAgIC8vIE1vbnRoXG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by5tb250aCAgICAgICA9IGdldFNldE1vbnRoO1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8uZGF5c0luTW9udGggPSBnZXREYXlzSW5Nb250aDtcblxuICAgIC8vIFdlZWtcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLndlZWsgICAgICAgICAgID0gbW9tZW50UHJvdG90eXBlX19wcm90by53ZWVrcyAgICAgICAgPSBnZXRTZXRXZWVrO1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8uaXNvV2VlayAgICAgICAgPSBtb21lbnRQcm90b3R5cGVfX3Byb3RvLmlzb1dlZWtzICAgICA9IGdldFNldElTT1dlZWs7XG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by53ZWVrc0luWWVhciAgICA9IGdldFdlZWtzSW5ZZWFyO1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8uaXNvV2Vla3NJblllYXIgPSBnZXRJU09XZWVrc0luWWVhcjtcblxuICAgIC8vIERheVxuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8uZGF0ZSAgICAgICA9IGdldFNldERheU9mTW9udGg7XG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by5kYXkgICAgICAgID0gbW9tZW50UHJvdG90eXBlX19wcm90by5kYXlzICAgICAgICAgICAgID0gZ2V0U2V0RGF5T2ZXZWVrO1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8ud2Vla2RheSAgICA9IGdldFNldExvY2FsZURheU9mV2VlaztcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLmlzb1dlZWtkYXkgPSBnZXRTZXRJU09EYXlPZldlZWs7XG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by5kYXlPZlllYXIgID0gZ2V0U2V0RGF5T2ZZZWFyO1xuXG4gICAgLy8gSG91clxuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8uaG91ciA9IG1vbWVudFByb3RvdHlwZV9fcHJvdG8uaG91cnMgPSBnZXRTZXRIb3VyO1xuXG4gICAgLy8gTWludXRlXG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by5taW51dGUgPSBtb21lbnRQcm90b3R5cGVfX3Byb3RvLm1pbnV0ZXMgPSBnZXRTZXRNaW51dGU7XG5cbiAgICAvLyBTZWNvbmRcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLnNlY29uZCA9IG1vbWVudFByb3RvdHlwZV9fcHJvdG8uc2Vjb25kcyA9IGdldFNldFNlY29uZDtcblxuICAgIC8vIE1pbGxpc2Vjb25kXG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by5taWxsaXNlY29uZCA9IG1vbWVudFByb3RvdHlwZV9fcHJvdG8ubWlsbGlzZWNvbmRzID0gZ2V0U2V0TWlsbGlzZWNvbmQ7XG5cbiAgICAvLyBPZmZzZXRcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLnV0Y09mZnNldCAgICAgICAgICAgID0gZ2V0U2V0T2Zmc2V0O1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8udXRjICAgICAgICAgICAgICAgICAgPSBzZXRPZmZzZXRUb1VUQztcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLmxvY2FsICAgICAgICAgICAgICAgID0gc2V0T2Zmc2V0VG9Mb2NhbDtcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLnBhcnNlWm9uZSAgICAgICAgICAgID0gc2V0T2Zmc2V0VG9QYXJzZWRPZmZzZXQ7XG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by5oYXNBbGlnbmVkSG91ck9mZnNldCA9IGhhc0FsaWduZWRIb3VyT2Zmc2V0O1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8uaXNEU1QgICAgICAgICAgICAgICAgPSBpc0RheWxpZ2h0U2F2aW5nVGltZTtcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLmlzRFNUU2hpZnRlZCAgICAgICAgID0gaXNEYXlsaWdodFNhdmluZ1RpbWVTaGlmdGVkO1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8uaXNMb2NhbCAgICAgICAgICAgICAgPSBpc0xvY2FsO1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8uaXNVdGNPZmZzZXQgICAgICAgICAgPSBpc1V0Y09mZnNldDtcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLmlzVXRjICAgICAgICAgICAgICAgID0gaXNVdGM7XG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by5pc1VUQyAgICAgICAgICAgICAgICA9IGlzVXRjO1xuXG4gICAgLy8gVGltZXpvbmVcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLnpvbmVBYmJyID0gZ2V0Wm9uZUFiYnI7XG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by56b25lTmFtZSA9IGdldFpvbmVOYW1lO1xuXG4gICAgLy8gRGVwcmVjYXRpb25zXG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by5kYXRlcyAgPSBkZXByZWNhdGUoJ2RhdGVzIGFjY2Vzc29yIGlzIGRlcHJlY2F0ZWQuIFVzZSBkYXRlIGluc3RlYWQuJywgZ2V0U2V0RGF5T2ZNb250aCk7XG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by5tb250aHMgPSBkZXByZWNhdGUoJ21vbnRocyBhY2Nlc3NvciBpcyBkZXByZWNhdGVkLiBVc2UgbW9udGggaW5zdGVhZCcsIGdldFNldE1vbnRoKTtcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLnllYXJzICA9IGRlcHJlY2F0ZSgneWVhcnMgYWNjZXNzb3IgaXMgZGVwcmVjYXRlZC4gVXNlIHllYXIgaW5zdGVhZCcsIGdldFNldFllYXIpO1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8uem9uZSAgID0gZGVwcmVjYXRlKCdtb21lbnQoKS56b25lIGlzIGRlcHJlY2F0ZWQsIHVzZSBtb21lbnQoKS51dGNPZmZzZXQgaW5zdGVhZC4gaHR0cHM6Ly9naXRodWIuY29tL21vbWVudC9tb21lbnQvaXNzdWVzLzE3NzknLCBnZXRTZXRab25lKTtcblxuICAgIHZhciBtb21lbnRQcm90b3R5cGUgPSBtb21lbnRQcm90b3R5cGVfX3Byb3RvO1xuXG4gICAgZnVuY3Rpb24gbW9tZW50X19jcmVhdGVVbml4IChpbnB1dCkge1xuICAgICAgICByZXR1cm4gbG9jYWxfX2NyZWF0ZUxvY2FsKGlucHV0ICogMTAwMCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbW9tZW50X19jcmVhdGVJblpvbmUgKCkge1xuICAgICAgICByZXR1cm4gbG9jYWxfX2NyZWF0ZUxvY2FsLmFwcGx5KG51bGwsIGFyZ3VtZW50cykucGFyc2Vab25lKCk7XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRDYWxlbmRhciA9IHtcbiAgICAgICAgc2FtZURheSA6ICdbVG9kYXkgYXRdIExUJyxcbiAgICAgICAgbmV4dERheSA6ICdbVG9tb3Jyb3cgYXRdIExUJyxcbiAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBbYXRdIExUJyxcbiAgICAgICAgbGFzdERheSA6ICdbWWVzdGVyZGF5IGF0XSBMVCcsXG4gICAgICAgIGxhc3RXZWVrIDogJ1tMYXN0XSBkZGRkIFthdF0gTFQnLFxuICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBsb2NhbGVfY2FsZW5kYXJfX2NhbGVuZGFyIChrZXksIG1vbSwgbm93KSB7XG4gICAgICAgIHZhciBvdXRwdXQgPSB0aGlzLl9jYWxlbmRhcltrZXldO1xuICAgICAgICByZXR1cm4gaXNGdW5jdGlvbihvdXRwdXQpID8gb3V0cHV0LmNhbGwobW9tLCBub3cpIDogb3V0cHV0O1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0TG9uZ0RhdGVGb3JtYXQgPSB7XG4gICAgICAgIExUUyAgOiAnaDptbTpzcyBBJyxcbiAgICAgICAgTFQgICA6ICdoOm1tIEEnLFxuICAgICAgICBMICAgIDogJ01NL0REL1lZWVknLFxuICAgICAgICBMTCAgIDogJ01NTU0gRCwgWVlZWScsXG4gICAgICAgIExMTCAgOiAnTU1NTSBELCBZWVlZIGg6bW0gQScsXG4gICAgICAgIExMTEwgOiAnZGRkZCwgTU1NTSBELCBZWVlZIGg6bW0gQSdcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gbG9uZ0RhdGVGb3JtYXQgKGtleSkge1xuICAgICAgICB2YXIgZm9ybWF0ID0gdGhpcy5fbG9uZ0RhdGVGb3JtYXRba2V5XSxcbiAgICAgICAgICAgIGZvcm1hdFVwcGVyID0gdGhpcy5fbG9uZ0RhdGVGb3JtYXRba2V5LnRvVXBwZXJDYXNlKCldO1xuXG4gICAgICAgIGlmIChmb3JtYXQgfHwgIWZvcm1hdFVwcGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gZm9ybWF0O1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fbG9uZ0RhdGVGb3JtYXRba2V5XSA9IGZvcm1hdFVwcGVyLnJlcGxhY2UoL01NTU18TU18RER8ZGRkZC9nLCBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsLnNsaWNlKDEpO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gdGhpcy5fbG9uZ0RhdGVGb3JtYXRba2V5XTtcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdEludmFsaWREYXRlID0gJ0ludmFsaWQgZGF0ZSc7XG5cbiAgICBmdW5jdGlvbiBpbnZhbGlkRGF0ZSAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnZhbGlkRGF0ZTtcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdE9yZGluYWwgPSAnJWQnO1xuICAgIHZhciBkZWZhdWx0T3JkaW5hbFBhcnNlID0gL1xcZHsxLDJ9LztcblxuICAgIGZ1bmN0aW9uIG9yZGluYWwgKG51bWJlcikge1xuICAgICAgICByZXR1cm4gdGhpcy5fb3JkaW5hbC5yZXBsYWNlKCclZCcsIG51bWJlcik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcHJlUGFyc2VQb3N0Rm9ybWF0IChzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdFJlbGF0aXZlVGltZSA9IHtcbiAgICAgICAgZnV0dXJlIDogJ2luICVzJyxcbiAgICAgICAgcGFzdCAgIDogJyVzIGFnbycsXG4gICAgICAgIHMgIDogJ2EgZmV3IHNlY29uZHMnLFxuICAgICAgICBtICA6ICdhIG1pbnV0ZScsXG4gICAgICAgIG1tIDogJyVkIG1pbnV0ZXMnLFxuICAgICAgICBoICA6ICdhbiBob3VyJyxcbiAgICAgICAgaGggOiAnJWQgaG91cnMnLFxuICAgICAgICBkICA6ICdhIGRheScsXG4gICAgICAgIGRkIDogJyVkIGRheXMnLFxuICAgICAgICBNICA6ICdhIG1vbnRoJyxcbiAgICAgICAgTU0gOiAnJWQgbW9udGhzJyxcbiAgICAgICAgeSAgOiAnYSB5ZWFyJyxcbiAgICAgICAgeXkgOiAnJWQgeWVhcnMnXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHJlbGF0aXZlX19yZWxhdGl2ZVRpbWUgKG51bWJlciwgd2l0aG91dFN1ZmZpeCwgc3RyaW5nLCBpc0Z1dHVyZSkge1xuICAgICAgICB2YXIgb3V0cHV0ID0gdGhpcy5fcmVsYXRpdmVUaW1lW3N0cmluZ107XG4gICAgICAgIHJldHVybiAoaXNGdW5jdGlvbihvdXRwdXQpKSA/XG4gICAgICAgICAgICBvdXRwdXQobnVtYmVyLCB3aXRob3V0U3VmZml4LCBzdHJpbmcsIGlzRnV0dXJlKSA6XG4gICAgICAgICAgICBvdXRwdXQucmVwbGFjZSgvJWQvaSwgbnVtYmVyKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXN0RnV0dXJlIChkaWZmLCBvdXRwdXQpIHtcbiAgICAgICAgdmFyIGZvcm1hdCA9IHRoaXMuX3JlbGF0aXZlVGltZVtkaWZmID4gMCA/ICdmdXR1cmUnIDogJ3Bhc3QnXTtcbiAgICAgICAgcmV0dXJuIGlzRnVuY3Rpb24oZm9ybWF0KSA/IGZvcm1hdChvdXRwdXQpIDogZm9ybWF0LnJlcGxhY2UoLyVzL2ksIG91dHB1dCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9jYWxlX3NldF9fc2V0IChjb25maWcpIHtcbiAgICAgICAgdmFyIHByb3AsIGk7XG4gICAgICAgIGZvciAoaSBpbiBjb25maWcpIHtcbiAgICAgICAgICAgIHByb3AgPSBjb25maWdbaV07XG4gICAgICAgICAgICBpZiAoaXNGdW5jdGlvbihwcm9wKSkge1xuICAgICAgICAgICAgICAgIHRoaXNbaV0gPSBwcm9wO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzWydfJyArIGldID0gcHJvcDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBMZW5pZW50IG9yZGluYWwgcGFyc2luZyBhY2NlcHRzIGp1c3QgYSBudW1iZXIgaW4gYWRkaXRpb24gdG9cbiAgICAgICAgLy8gbnVtYmVyICsgKHBvc3NpYmx5KSBzdHVmZiBjb21pbmcgZnJvbSBfb3JkaW5hbFBhcnNlTGVuaWVudC5cbiAgICAgICAgdGhpcy5fb3JkaW5hbFBhcnNlTGVuaWVudCA9IG5ldyBSZWdFeHAodGhpcy5fb3JkaW5hbFBhcnNlLnNvdXJjZSArICd8JyArICgvXFxkezEsMn0vKS5zb3VyY2UpO1xuICAgIH1cblxuICAgIHZhciBwcm90b3R5cGVfX3Byb3RvID0gTG9jYWxlLnByb3RvdHlwZTtcblxuICAgIHByb3RvdHlwZV9fcHJvdG8uX2NhbGVuZGFyICAgICAgID0gZGVmYXVsdENhbGVuZGFyO1xuICAgIHByb3RvdHlwZV9fcHJvdG8uY2FsZW5kYXIgICAgICAgID0gbG9jYWxlX2NhbGVuZGFyX19jYWxlbmRhcjtcbiAgICBwcm90b3R5cGVfX3Byb3RvLl9sb25nRGF0ZUZvcm1hdCA9IGRlZmF1bHRMb25nRGF0ZUZvcm1hdDtcbiAgICBwcm90b3R5cGVfX3Byb3RvLmxvbmdEYXRlRm9ybWF0ICA9IGxvbmdEYXRlRm9ybWF0O1xuICAgIHByb3RvdHlwZV9fcHJvdG8uX2ludmFsaWREYXRlICAgID0gZGVmYXVsdEludmFsaWREYXRlO1xuICAgIHByb3RvdHlwZV9fcHJvdG8uaW52YWxpZERhdGUgICAgID0gaW52YWxpZERhdGU7XG4gICAgcHJvdG90eXBlX19wcm90by5fb3JkaW5hbCAgICAgICAgPSBkZWZhdWx0T3JkaW5hbDtcbiAgICBwcm90b3R5cGVfX3Byb3RvLm9yZGluYWwgICAgICAgICA9IG9yZGluYWw7XG4gICAgcHJvdG90eXBlX19wcm90by5fb3JkaW5hbFBhcnNlICAgPSBkZWZhdWx0T3JkaW5hbFBhcnNlO1xuICAgIHByb3RvdHlwZV9fcHJvdG8ucHJlcGFyc2UgICAgICAgID0gcHJlUGFyc2VQb3N0Rm9ybWF0O1xuICAgIHByb3RvdHlwZV9fcHJvdG8ucG9zdGZvcm1hdCAgICAgID0gcHJlUGFyc2VQb3N0Rm9ybWF0O1xuICAgIHByb3RvdHlwZV9fcHJvdG8uX3JlbGF0aXZlVGltZSAgID0gZGVmYXVsdFJlbGF0aXZlVGltZTtcbiAgICBwcm90b3R5cGVfX3Byb3RvLnJlbGF0aXZlVGltZSAgICA9IHJlbGF0aXZlX19yZWxhdGl2ZVRpbWU7XG4gICAgcHJvdG90eXBlX19wcm90by5wYXN0RnV0dXJlICAgICAgPSBwYXN0RnV0dXJlO1xuICAgIHByb3RvdHlwZV9fcHJvdG8uc2V0ICAgICAgICAgICAgID0gbG9jYWxlX3NldF9fc2V0O1xuXG4gICAgLy8gTW9udGhcbiAgICBwcm90b3R5cGVfX3Byb3RvLm1vbnRocyAgICAgICAgICAgID0gICAgICAgIGxvY2FsZU1vbnRocztcbiAgICBwcm90b3R5cGVfX3Byb3RvLl9tb250aHMgICAgICAgICAgID0gZGVmYXVsdExvY2FsZU1vbnRocztcbiAgICBwcm90b3R5cGVfX3Byb3RvLm1vbnRoc1Nob3J0ICAgICAgID0gICAgICAgIGxvY2FsZU1vbnRoc1Nob3J0O1xuICAgIHByb3RvdHlwZV9fcHJvdG8uX21vbnRoc1Nob3J0ICAgICAgPSBkZWZhdWx0TG9jYWxlTW9udGhzU2hvcnQ7XG4gICAgcHJvdG90eXBlX19wcm90by5tb250aHNQYXJzZSAgICAgICA9ICAgICAgICBsb2NhbGVNb250aHNQYXJzZTtcbiAgICBwcm90b3R5cGVfX3Byb3RvLl9tb250aHNSZWdleCAgICAgID0gZGVmYXVsdE1vbnRoc1JlZ2V4O1xuICAgIHByb3RvdHlwZV9fcHJvdG8ubW9udGhzUmVnZXggICAgICAgPSBtb250aHNSZWdleDtcbiAgICBwcm90b3R5cGVfX3Byb3RvLl9tb250aHNTaG9ydFJlZ2V4ID0gZGVmYXVsdE1vbnRoc1Nob3J0UmVnZXg7XG4gICAgcHJvdG90eXBlX19wcm90by5tb250aHNTaG9ydFJlZ2V4ICA9IG1vbnRoc1Nob3J0UmVnZXg7XG5cbiAgICAvLyBXZWVrXG4gICAgcHJvdG90eXBlX19wcm90by53ZWVrID0gbG9jYWxlV2VlaztcbiAgICBwcm90b3R5cGVfX3Byb3RvLl93ZWVrID0gZGVmYXVsdExvY2FsZVdlZWs7XG4gICAgcHJvdG90eXBlX19wcm90by5maXJzdERheU9mWWVhciA9IGxvY2FsZUZpcnN0RGF5T2ZZZWFyO1xuICAgIHByb3RvdHlwZV9fcHJvdG8uZmlyc3REYXlPZldlZWsgPSBsb2NhbGVGaXJzdERheU9mV2VlaztcblxuICAgIC8vIERheSBvZiBXZWVrXG4gICAgcHJvdG90eXBlX19wcm90by53ZWVrZGF5cyAgICAgICA9ICAgICAgICBsb2NhbGVXZWVrZGF5cztcbiAgICBwcm90b3R5cGVfX3Byb3RvLl93ZWVrZGF5cyAgICAgID0gZGVmYXVsdExvY2FsZVdlZWtkYXlzO1xuICAgIHByb3RvdHlwZV9fcHJvdG8ud2Vla2RheXNNaW4gICAgPSAgICAgICAgbG9jYWxlV2Vla2RheXNNaW47XG4gICAgcHJvdG90eXBlX19wcm90by5fd2Vla2RheXNNaW4gICA9IGRlZmF1bHRMb2NhbGVXZWVrZGF5c01pbjtcbiAgICBwcm90b3R5cGVfX3Byb3RvLndlZWtkYXlzU2hvcnQgID0gICAgICAgIGxvY2FsZVdlZWtkYXlzU2hvcnQ7XG4gICAgcHJvdG90eXBlX19wcm90by5fd2Vla2RheXNTaG9ydCA9IGRlZmF1bHRMb2NhbGVXZWVrZGF5c1Nob3J0O1xuICAgIHByb3RvdHlwZV9fcHJvdG8ud2Vla2RheXNQYXJzZSAgPSAgICAgICAgbG9jYWxlV2Vla2RheXNQYXJzZTtcblxuICAgIC8vIEhvdXJzXG4gICAgcHJvdG90eXBlX19wcm90by5pc1BNID0gbG9jYWxlSXNQTTtcbiAgICBwcm90b3R5cGVfX3Byb3RvLl9tZXJpZGllbVBhcnNlID0gZGVmYXVsdExvY2FsZU1lcmlkaWVtUGFyc2U7XG4gICAgcHJvdG90eXBlX19wcm90by5tZXJpZGllbSA9IGxvY2FsZU1lcmlkaWVtO1xuXG4gICAgZnVuY3Rpb24gbGlzdHNfX2dldCAoZm9ybWF0LCBpbmRleCwgZmllbGQsIHNldHRlcikge1xuICAgICAgICB2YXIgbG9jYWxlID0gbG9jYWxlX2xvY2FsZXNfX2dldExvY2FsZSgpO1xuICAgICAgICB2YXIgdXRjID0gY3JlYXRlX3V0Y19fY3JlYXRlVVRDKCkuc2V0KHNldHRlciwgaW5kZXgpO1xuICAgICAgICByZXR1cm4gbG9jYWxlW2ZpZWxkXSh1dGMsIGZvcm1hdCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGlzdCAoZm9ybWF0LCBpbmRleCwgZmllbGQsIGNvdW50LCBzZXR0ZXIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBmb3JtYXQgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBpbmRleCA9IGZvcm1hdDtcbiAgICAgICAgICAgIGZvcm1hdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvcm1hdCA9IGZvcm1hdCB8fCAnJztcblxuICAgICAgICBpZiAoaW5kZXggIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGxpc3RzX19nZXQoZm9ybWF0LCBpbmRleCwgZmllbGQsIHNldHRlcik7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaTtcbiAgICAgICAgdmFyIG91dCA9IFtdO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgICAgICAgb3V0W2ldID0gbGlzdHNfX2dldChmb3JtYXQsIGksIGZpZWxkLCBzZXR0ZXIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGlzdHNfX2xpc3RNb250aHMgKGZvcm1hdCwgaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGxpc3QoZm9ybWF0LCBpbmRleCwgJ21vbnRocycsIDEyLCAnbW9udGgnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaXN0c19fbGlzdE1vbnRoc1Nob3J0IChmb3JtYXQsIGluZGV4KSB7XG4gICAgICAgIHJldHVybiBsaXN0KGZvcm1hdCwgaW5kZXgsICdtb250aHNTaG9ydCcsIDEyLCAnbW9udGgnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaXN0c19fbGlzdFdlZWtkYXlzIChmb3JtYXQsIGluZGV4KSB7XG4gICAgICAgIHJldHVybiBsaXN0KGZvcm1hdCwgaW5kZXgsICd3ZWVrZGF5cycsIDcsICdkYXknKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaXN0c19fbGlzdFdlZWtkYXlzU2hvcnQgKGZvcm1hdCwgaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGxpc3QoZm9ybWF0LCBpbmRleCwgJ3dlZWtkYXlzU2hvcnQnLCA3LCAnZGF5Jyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGlzdHNfX2xpc3RXZWVrZGF5c01pbiAoZm9ybWF0LCBpbmRleCkge1xuICAgICAgICByZXR1cm4gbGlzdChmb3JtYXQsIGluZGV4LCAnd2Vla2RheXNNaW4nLCA3LCAnZGF5Jyk7XG4gICAgfVxuXG4gICAgbG9jYWxlX2xvY2FsZXNfX2dldFNldEdsb2JhbExvY2FsZSgnZW4nLCB7XG4gICAgICAgIG9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KHRofHN0fG5kfHJkKS8sXG4gICAgICAgIG9yZGluYWwgOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICB2YXIgYiA9IG51bWJlciAlIDEwLFxuICAgICAgICAgICAgICAgIG91dHB1dCA9ICh0b0ludChudW1iZXIgJSAxMDAgLyAxMCkgPT09IDEpID8gJ3RoJyA6XG4gICAgICAgICAgICAgICAgKGIgPT09IDEpID8gJ3N0JyA6XG4gICAgICAgICAgICAgICAgKGIgPT09IDIpID8gJ25kJyA6XG4gICAgICAgICAgICAgICAgKGIgPT09IDMpID8gJ3JkJyA6ICd0aCc7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgb3V0cHV0O1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBTaWRlIGVmZmVjdCBpbXBvcnRzXG4gICAgdXRpbHNfaG9va3NfX2hvb2tzLmxhbmcgPSBkZXByZWNhdGUoJ21vbWVudC5sYW5nIGlzIGRlcHJlY2F0ZWQuIFVzZSBtb21lbnQubG9jYWxlIGluc3RlYWQuJywgbG9jYWxlX2xvY2FsZXNfX2dldFNldEdsb2JhbExvY2FsZSk7XG4gICAgdXRpbHNfaG9va3NfX2hvb2tzLmxhbmdEYXRhID0gZGVwcmVjYXRlKCdtb21lbnQubGFuZ0RhdGEgaXMgZGVwcmVjYXRlZC4gVXNlIG1vbWVudC5sb2NhbGVEYXRhIGluc3RlYWQuJywgbG9jYWxlX2xvY2FsZXNfX2dldExvY2FsZSk7XG5cbiAgICB2YXIgbWF0aEFicyA9IE1hdGguYWJzO1xuXG4gICAgZnVuY3Rpb24gZHVyYXRpb25fYWJzX19hYnMgKCkge1xuICAgICAgICB2YXIgZGF0YSAgICAgICAgICAgPSB0aGlzLl9kYXRhO1xuXG4gICAgICAgIHRoaXMuX21pbGxpc2Vjb25kcyA9IG1hdGhBYnModGhpcy5fbWlsbGlzZWNvbmRzKTtcbiAgICAgICAgdGhpcy5fZGF5cyAgICAgICAgID0gbWF0aEFicyh0aGlzLl9kYXlzKTtcbiAgICAgICAgdGhpcy5fbW9udGhzICAgICAgID0gbWF0aEFicyh0aGlzLl9tb250aHMpO1xuXG4gICAgICAgIGRhdGEubWlsbGlzZWNvbmRzICA9IG1hdGhBYnMoZGF0YS5taWxsaXNlY29uZHMpO1xuICAgICAgICBkYXRhLnNlY29uZHMgICAgICAgPSBtYXRoQWJzKGRhdGEuc2Vjb25kcyk7XG4gICAgICAgIGRhdGEubWludXRlcyAgICAgICA9IG1hdGhBYnMoZGF0YS5taW51dGVzKTtcbiAgICAgICAgZGF0YS5ob3VycyAgICAgICAgID0gbWF0aEFicyhkYXRhLmhvdXJzKTtcbiAgICAgICAgZGF0YS5tb250aHMgICAgICAgID0gbWF0aEFicyhkYXRhLm1vbnRocyk7XG4gICAgICAgIGRhdGEueWVhcnMgICAgICAgICA9IG1hdGhBYnMoZGF0YS55ZWFycyk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZHVyYXRpb25fYWRkX3N1YnRyYWN0X19hZGRTdWJ0cmFjdCAoZHVyYXRpb24sIGlucHV0LCB2YWx1ZSwgZGlyZWN0aW9uKSB7XG4gICAgICAgIHZhciBvdGhlciA9IGNyZWF0ZV9fY3JlYXRlRHVyYXRpb24oaW5wdXQsIHZhbHVlKTtcblxuICAgICAgICBkdXJhdGlvbi5fbWlsbGlzZWNvbmRzICs9IGRpcmVjdGlvbiAqIG90aGVyLl9taWxsaXNlY29uZHM7XG4gICAgICAgIGR1cmF0aW9uLl9kYXlzICAgICAgICAgKz0gZGlyZWN0aW9uICogb3RoZXIuX2RheXM7XG4gICAgICAgIGR1cmF0aW9uLl9tb250aHMgICAgICAgKz0gZGlyZWN0aW9uICogb3RoZXIuX21vbnRocztcblxuICAgICAgICByZXR1cm4gZHVyYXRpb24uX2J1YmJsZSgpO1xuICAgIH1cblxuICAgIC8vIHN1cHBvcnRzIG9ubHkgMi4wLXN0eWxlIGFkZCgxLCAncycpIG9yIGFkZChkdXJhdGlvbilcbiAgICBmdW5jdGlvbiBkdXJhdGlvbl9hZGRfc3VidHJhY3RfX2FkZCAoaW5wdXQsIHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBkdXJhdGlvbl9hZGRfc3VidHJhY3RfX2FkZFN1YnRyYWN0KHRoaXMsIGlucHV0LCB2YWx1ZSwgMSk7XG4gICAgfVxuXG4gICAgLy8gc3VwcG9ydHMgb25seSAyLjAtc3R5bGUgc3VidHJhY3QoMSwgJ3MnKSBvciBzdWJ0cmFjdChkdXJhdGlvbilcbiAgICBmdW5jdGlvbiBkdXJhdGlvbl9hZGRfc3VidHJhY3RfX3N1YnRyYWN0IChpbnB1dCwgdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGR1cmF0aW9uX2FkZF9zdWJ0cmFjdF9fYWRkU3VidHJhY3QodGhpcywgaW5wdXQsIHZhbHVlLCAtMSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWJzQ2VpbCAobnVtYmVyKSB7XG4gICAgICAgIGlmIChudW1iZXIgPCAwKSB7XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihudW1iZXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGguY2VpbChudW1iZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYnViYmxlICgpIHtcbiAgICAgICAgdmFyIG1pbGxpc2Vjb25kcyA9IHRoaXMuX21pbGxpc2Vjb25kcztcbiAgICAgICAgdmFyIGRheXMgICAgICAgICA9IHRoaXMuX2RheXM7XG4gICAgICAgIHZhciBtb250aHMgICAgICAgPSB0aGlzLl9tb250aHM7XG4gICAgICAgIHZhciBkYXRhICAgICAgICAgPSB0aGlzLl9kYXRhO1xuICAgICAgICB2YXIgc2Vjb25kcywgbWludXRlcywgaG91cnMsIHllYXJzLCBtb250aHNGcm9tRGF5cztcblxuICAgICAgICAvLyBpZiB3ZSBoYXZlIGEgbWl4IG9mIHBvc2l0aXZlIGFuZCBuZWdhdGl2ZSB2YWx1ZXMsIGJ1YmJsZSBkb3duIGZpcnN0XG4gICAgICAgIC8vIGNoZWNrOiBodHRwczovL2dpdGh1Yi5jb20vbW9tZW50L21vbWVudC9pc3N1ZXMvMjE2NlxuICAgICAgICBpZiAoISgobWlsbGlzZWNvbmRzID49IDAgJiYgZGF5cyA+PSAwICYmIG1vbnRocyA+PSAwKSB8fFxuICAgICAgICAgICAgICAgIChtaWxsaXNlY29uZHMgPD0gMCAmJiBkYXlzIDw9IDAgJiYgbW9udGhzIDw9IDApKSkge1xuICAgICAgICAgICAgbWlsbGlzZWNvbmRzICs9IGFic0NlaWwobW9udGhzVG9EYXlzKG1vbnRocykgKyBkYXlzKSAqIDg2NGU1O1xuICAgICAgICAgICAgZGF5cyA9IDA7XG4gICAgICAgICAgICBtb250aHMgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGhlIGZvbGxvd2luZyBjb2RlIGJ1YmJsZXMgdXAgdmFsdWVzLCBzZWUgdGhlIHRlc3RzIGZvclxuICAgICAgICAvLyBleGFtcGxlcyBvZiB3aGF0IHRoYXQgbWVhbnMuXG4gICAgICAgIGRhdGEubWlsbGlzZWNvbmRzID0gbWlsbGlzZWNvbmRzICUgMTAwMDtcblxuICAgICAgICBzZWNvbmRzICAgICAgICAgICA9IGFic0Zsb29yKG1pbGxpc2Vjb25kcyAvIDEwMDApO1xuICAgICAgICBkYXRhLnNlY29uZHMgICAgICA9IHNlY29uZHMgJSA2MDtcblxuICAgICAgICBtaW51dGVzICAgICAgICAgICA9IGFic0Zsb29yKHNlY29uZHMgLyA2MCk7XG4gICAgICAgIGRhdGEubWludXRlcyAgICAgID0gbWludXRlcyAlIDYwO1xuXG4gICAgICAgIGhvdXJzICAgICAgICAgICAgID0gYWJzRmxvb3IobWludXRlcyAvIDYwKTtcbiAgICAgICAgZGF0YS5ob3VycyAgICAgICAgPSBob3VycyAlIDI0O1xuXG4gICAgICAgIGRheXMgKz0gYWJzRmxvb3IoaG91cnMgLyAyNCk7XG5cbiAgICAgICAgLy8gY29udmVydCBkYXlzIHRvIG1vbnRoc1xuICAgICAgICBtb250aHNGcm9tRGF5cyA9IGFic0Zsb29yKGRheXNUb01vbnRocyhkYXlzKSk7XG4gICAgICAgIG1vbnRocyArPSBtb250aHNGcm9tRGF5cztcbiAgICAgICAgZGF5cyAtPSBhYnNDZWlsKG1vbnRoc1RvRGF5cyhtb250aHNGcm9tRGF5cykpO1xuXG4gICAgICAgIC8vIDEyIG1vbnRocyAtPiAxIHllYXJcbiAgICAgICAgeWVhcnMgPSBhYnNGbG9vcihtb250aHMgLyAxMik7XG4gICAgICAgIG1vbnRocyAlPSAxMjtcblxuICAgICAgICBkYXRhLmRheXMgICA9IGRheXM7XG4gICAgICAgIGRhdGEubW9udGhzID0gbW9udGhzO1xuICAgICAgICBkYXRhLnllYXJzICA9IHllYXJzO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRheXNUb01vbnRocyAoZGF5cykge1xuICAgICAgICAvLyA0MDAgeWVhcnMgaGF2ZSAxNDYwOTcgZGF5cyAodGFraW5nIGludG8gYWNjb3VudCBsZWFwIHllYXIgcnVsZXMpXG4gICAgICAgIC8vIDQwMCB5ZWFycyBoYXZlIDEyIG1vbnRocyA9PT0gNDgwMFxuICAgICAgICByZXR1cm4gZGF5cyAqIDQ4MDAgLyAxNDYwOTc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbW9udGhzVG9EYXlzIChtb250aHMpIHtcbiAgICAgICAgLy8gdGhlIHJldmVyc2Ugb2YgZGF5c1RvTW9udGhzXG4gICAgICAgIHJldHVybiBtb250aHMgKiAxNDYwOTcgLyA0ODAwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFzICh1bml0cykge1xuICAgICAgICB2YXIgZGF5cztcbiAgICAgICAgdmFyIG1vbnRocztcbiAgICAgICAgdmFyIG1pbGxpc2Vjb25kcyA9IHRoaXMuX21pbGxpc2Vjb25kcztcblxuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTtcblxuICAgICAgICBpZiAodW5pdHMgPT09ICdtb250aCcgfHwgdW5pdHMgPT09ICd5ZWFyJykge1xuICAgICAgICAgICAgZGF5cyAgID0gdGhpcy5fZGF5cyAgICsgbWlsbGlzZWNvbmRzIC8gODY0ZTU7XG4gICAgICAgICAgICBtb250aHMgPSB0aGlzLl9tb250aHMgKyBkYXlzVG9Nb250aHMoZGF5cyk7XG4gICAgICAgICAgICByZXR1cm4gdW5pdHMgPT09ICdtb250aCcgPyBtb250aHMgOiBtb250aHMgLyAxMjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGhhbmRsZSBtaWxsaXNlY29uZHMgc2VwYXJhdGVseSBiZWNhdXNlIG9mIGZsb2F0aW5nIHBvaW50IG1hdGggZXJyb3JzIChpc3N1ZSAjMTg2NylcbiAgICAgICAgICAgIGRheXMgPSB0aGlzLl9kYXlzICsgTWF0aC5yb3VuZChtb250aHNUb0RheXModGhpcy5fbW9udGhzKSk7XG4gICAgICAgICAgICBzd2l0Y2ggKHVuaXRzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnd2VlaycgICA6IHJldHVybiBkYXlzIC8gNyAgICAgKyBtaWxsaXNlY29uZHMgLyA2MDQ4ZTU7XG4gICAgICAgICAgICAgICAgY2FzZSAnZGF5JyAgICA6IHJldHVybiBkYXlzICAgICAgICAgKyBtaWxsaXNlY29uZHMgLyA4NjRlNTtcbiAgICAgICAgICAgICAgICBjYXNlICdob3VyJyAgIDogcmV0dXJuIGRheXMgKiAyNCAgICArIG1pbGxpc2Vjb25kcyAvIDM2ZTU7XG4gICAgICAgICAgICAgICAgY2FzZSAnbWludXRlJyA6IHJldHVybiBkYXlzICogMTQ0MCAgKyBtaWxsaXNlY29uZHMgLyA2ZTQ7XG4gICAgICAgICAgICAgICAgY2FzZSAnc2Vjb25kJyA6IHJldHVybiBkYXlzICogODY0MDAgKyBtaWxsaXNlY29uZHMgLyAxMDAwO1xuICAgICAgICAgICAgICAgIC8vIE1hdGguZmxvb3IgcHJldmVudHMgZmxvYXRpbmcgcG9pbnQgbWF0aCBlcnJvcnMgaGVyZVxuICAgICAgICAgICAgICAgIGNhc2UgJ21pbGxpc2Vjb25kJzogcmV0dXJuIE1hdGguZmxvb3IoZGF5cyAqIDg2NGU1KSArIG1pbGxpc2Vjb25kcztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gdW5pdCAnICsgdW5pdHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gVE9ETzogVXNlIHRoaXMuYXMoJ21zJyk/XG4gICAgZnVuY3Rpb24gZHVyYXRpb25fYXNfX3ZhbHVlT2YgKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgdGhpcy5fbWlsbGlzZWNvbmRzICtcbiAgICAgICAgICAgIHRoaXMuX2RheXMgKiA4NjRlNSArXG4gICAgICAgICAgICAodGhpcy5fbW9udGhzICUgMTIpICogMjU5MmU2ICtcbiAgICAgICAgICAgIHRvSW50KHRoaXMuX21vbnRocyAvIDEyKSAqIDMxNTM2ZTZcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYWtlQXMgKGFsaWFzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hcyhhbGlhcyk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIGFzTWlsbGlzZWNvbmRzID0gbWFrZUFzKCdtcycpO1xuICAgIHZhciBhc1NlY29uZHMgICAgICA9IG1ha2VBcygncycpO1xuICAgIHZhciBhc01pbnV0ZXMgICAgICA9IG1ha2VBcygnbScpO1xuICAgIHZhciBhc0hvdXJzICAgICAgICA9IG1ha2VBcygnaCcpO1xuICAgIHZhciBhc0RheXMgICAgICAgICA9IG1ha2VBcygnZCcpO1xuICAgIHZhciBhc1dlZWtzICAgICAgICA9IG1ha2VBcygndycpO1xuICAgIHZhciBhc01vbnRocyAgICAgICA9IG1ha2VBcygnTScpO1xuICAgIHZhciBhc1llYXJzICAgICAgICA9IG1ha2VBcygneScpO1xuXG4gICAgZnVuY3Rpb24gZHVyYXRpb25fZ2V0X19nZXQgKHVuaXRzKSB7XG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuICAgICAgICByZXR1cm4gdGhpc1t1bml0cyArICdzJ10oKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYWtlR2V0dGVyKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9kYXRhW25hbWVdO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIHZhciBtaWxsaXNlY29uZHMgPSBtYWtlR2V0dGVyKCdtaWxsaXNlY29uZHMnKTtcbiAgICB2YXIgc2Vjb25kcyAgICAgID0gbWFrZUdldHRlcignc2Vjb25kcycpO1xuICAgIHZhciBtaW51dGVzICAgICAgPSBtYWtlR2V0dGVyKCdtaW51dGVzJyk7XG4gICAgdmFyIGhvdXJzICAgICAgICA9IG1ha2VHZXR0ZXIoJ2hvdXJzJyk7XG4gICAgdmFyIGRheXMgICAgICAgICA9IG1ha2VHZXR0ZXIoJ2RheXMnKTtcbiAgICB2YXIgbW9udGhzICAgICAgID0gbWFrZUdldHRlcignbW9udGhzJyk7XG4gICAgdmFyIHllYXJzICAgICAgICA9IG1ha2VHZXR0ZXIoJ3llYXJzJyk7XG5cbiAgICBmdW5jdGlvbiB3ZWVrcyAoKSB7XG4gICAgICAgIHJldHVybiBhYnNGbG9vcih0aGlzLmRheXMoKSAvIDcpO1xuICAgIH1cblxuICAgIHZhciByb3VuZCA9IE1hdGgucm91bmQ7XG4gICAgdmFyIHRocmVzaG9sZHMgPSB7XG4gICAgICAgIHM6IDQ1LCAgLy8gc2Vjb25kcyB0byBtaW51dGVcbiAgICAgICAgbTogNDUsICAvLyBtaW51dGVzIHRvIGhvdXJcbiAgICAgICAgaDogMjIsICAvLyBob3VycyB0byBkYXlcbiAgICAgICAgZDogMjYsICAvLyBkYXlzIHRvIG1vbnRoXG4gICAgICAgIE06IDExICAgLy8gbW9udGhzIHRvIHllYXJcbiAgICB9O1xuXG4gICAgLy8gaGVscGVyIGZ1bmN0aW9uIGZvciBtb21lbnQuZm4uZnJvbSwgbW9tZW50LmZuLmZyb21Ob3csIGFuZCBtb21lbnQuZHVyYXRpb24uZm4uaHVtYW5pemVcbiAgICBmdW5jdGlvbiBzdWJzdGl0dXRlVGltZUFnbyhzdHJpbmcsIG51bWJlciwgd2l0aG91dFN1ZmZpeCwgaXNGdXR1cmUsIGxvY2FsZSkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLnJlbGF0aXZlVGltZShudW1iZXIgfHwgMSwgISF3aXRob3V0U3VmZml4LCBzdHJpbmcsIGlzRnV0dXJlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkdXJhdGlvbl9odW1hbml6ZV9fcmVsYXRpdmVUaW1lIChwb3NOZWdEdXJhdGlvbiwgd2l0aG91dFN1ZmZpeCwgbG9jYWxlKSB7XG4gICAgICAgIHZhciBkdXJhdGlvbiA9IGNyZWF0ZV9fY3JlYXRlRHVyYXRpb24ocG9zTmVnRHVyYXRpb24pLmFicygpO1xuICAgICAgICB2YXIgc2Vjb25kcyAgPSByb3VuZChkdXJhdGlvbi5hcygncycpKTtcbiAgICAgICAgdmFyIG1pbnV0ZXMgID0gcm91bmQoZHVyYXRpb24uYXMoJ20nKSk7XG4gICAgICAgIHZhciBob3VycyAgICA9IHJvdW5kKGR1cmF0aW9uLmFzKCdoJykpO1xuICAgICAgICB2YXIgZGF5cyAgICAgPSByb3VuZChkdXJhdGlvbi5hcygnZCcpKTtcbiAgICAgICAgdmFyIG1vbnRocyAgID0gcm91bmQoZHVyYXRpb24uYXMoJ00nKSk7XG4gICAgICAgIHZhciB5ZWFycyAgICA9IHJvdW5kKGR1cmF0aW9uLmFzKCd5JykpO1xuXG4gICAgICAgIHZhciBhID0gc2Vjb25kcyA8IHRocmVzaG9sZHMucyAmJiBbJ3MnLCBzZWNvbmRzXSAgfHxcbiAgICAgICAgICAgICAgICBtaW51dGVzIDw9IDEgICAgICAgICAgICYmIFsnbSddICAgICAgICAgICB8fFxuICAgICAgICAgICAgICAgIG1pbnV0ZXMgPCB0aHJlc2hvbGRzLm0gJiYgWydtbScsIG1pbnV0ZXNdIHx8XG4gICAgICAgICAgICAgICAgaG91cnMgICA8PSAxICAgICAgICAgICAmJiBbJ2gnXSAgICAgICAgICAgfHxcbiAgICAgICAgICAgICAgICBob3VycyAgIDwgdGhyZXNob2xkcy5oICYmIFsnaGgnLCBob3Vyc10gICB8fFxuICAgICAgICAgICAgICAgIGRheXMgICAgPD0gMSAgICAgICAgICAgJiYgWydkJ10gICAgICAgICAgIHx8XG4gICAgICAgICAgICAgICAgZGF5cyAgICA8IHRocmVzaG9sZHMuZCAmJiBbJ2RkJywgZGF5c10gICAgfHxcbiAgICAgICAgICAgICAgICBtb250aHMgIDw9IDEgICAgICAgICAgICYmIFsnTSddICAgICAgICAgICB8fFxuICAgICAgICAgICAgICAgIG1vbnRocyAgPCB0aHJlc2hvbGRzLk0gJiYgWydNTScsIG1vbnRoc10gIHx8XG4gICAgICAgICAgICAgICAgeWVhcnMgICA8PSAxICAgICAgICAgICAmJiBbJ3knXSAgICAgICAgICAgfHwgWyd5eScsIHllYXJzXTtcblxuICAgICAgICBhWzJdID0gd2l0aG91dFN1ZmZpeDtcbiAgICAgICAgYVszXSA9ICtwb3NOZWdEdXJhdGlvbiA+IDA7XG4gICAgICAgIGFbNF0gPSBsb2NhbGU7XG4gICAgICAgIHJldHVybiBzdWJzdGl0dXRlVGltZUFnby5hcHBseShudWxsLCBhKTtcbiAgICB9XG5cbiAgICAvLyBUaGlzIGZ1bmN0aW9uIGFsbG93cyB5b3UgdG8gc2V0IGEgdGhyZXNob2xkIGZvciByZWxhdGl2ZSB0aW1lIHN0cmluZ3NcbiAgICBmdW5jdGlvbiBkdXJhdGlvbl9odW1hbml6ZV9fZ2V0U2V0UmVsYXRpdmVUaW1lVGhyZXNob2xkICh0aHJlc2hvbGQsIGxpbWl0KSB7XG4gICAgICAgIGlmICh0aHJlc2hvbGRzW3RocmVzaG9sZF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsaW1pdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhyZXNob2xkc1t0aHJlc2hvbGRdO1xuICAgICAgICB9XG4gICAgICAgIHRocmVzaG9sZHNbdGhyZXNob2xkXSA9IGxpbWl0O1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBodW1hbml6ZSAod2l0aFN1ZmZpeCkge1xuICAgICAgICB2YXIgbG9jYWxlID0gdGhpcy5sb2NhbGVEYXRhKCk7XG4gICAgICAgIHZhciBvdXRwdXQgPSBkdXJhdGlvbl9odW1hbml6ZV9fcmVsYXRpdmVUaW1lKHRoaXMsICF3aXRoU3VmZml4LCBsb2NhbGUpO1xuXG4gICAgICAgIGlmICh3aXRoU3VmZml4KSB7XG4gICAgICAgICAgICBvdXRwdXQgPSBsb2NhbGUucGFzdEZ1dHVyZSgrdGhpcywgb3V0cHV0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBsb2NhbGUucG9zdGZvcm1hdChvdXRwdXQpO1xuICAgIH1cblxuICAgIHZhciBpc29fc3RyaW5nX19hYnMgPSBNYXRoLmFicztcblxuICAgIGZ1bmN0aW9uIGlzb19zdHJpbmdfX3RvSVNPU3RyaW5nKCkge1xuICAgICAgICAvLyBmb3IgSVNPIHN0cmluZ3Mgd2UgZG8gbm90IHVzZSB0aGUgbm9ybWFsIGJ1YmJsaW5nIHJ1bGVzOlxuICAgICAgICAvLyAgKiBtaWxsaXNlY29uZHMgYnViYmxlIHVwIHVudGlsIHRoZXkgYmVjb21lIGhvdXJzXG4gICAgICAgIC8vICAqIGRheXMgZG8gbm90IGJ1YmJsZSBhdCBhbGxcbiAgICAgICAgLy8gICogbW9udGhzIGJ1YmJsZSB1cCB1bnRpbCB0aGV5IGJlY29tZSB5ZWFyc1xuICAgICAgICAvLyBUaGlzIGlzIGJlY2F1c2UgdGhlcmUgaXMgbm8gY29udGV4dC1mcmVlIGNvbnZlcnNpb24gYmV0d2VlbiBob3VycyBhbmQgZGF5c1xuICAgICAgICAvLyAodGhpbmsgb2YgY2xvY2sgY2hhbmdlcylcbiAgICAgICAgLy8gYW5kIGFsc28gbm90IGJldHdlZW4gZGF5cyBhbmQgbW9udGhzICgyOC0zMSBkYXlzIHBlciBtb250aClcbiAgICAgICAgdmFyIHNlY29uZHMgPSBpc29fc3RyaW5nX19hYnModGhpcy5fbWlsbGlzZWNvbmRzKSAvIDEwMDA7XG4gICAgICAgIHZhciBkYXlzICAgICAgICAgPSBpc29fc3RyaW5nX19hYnModGhpcy5fZGF5cyk7XG4gICAgICAgIHZhciBtb250aHMgICAgICAgPSBpc29fc3RyaW5nX19hYnModGhpcy5fbW9udGhzKTtcbiAgICAgICAgdmFyIG1pbnV0ZXMsIGhvdXJzLCB5ZWFycztcblxuICAgICAgICAvLyAzNjAwIHNlY29uZHMgLT4gNjAgbWludXRlcyAtPiAxIGhvdXJcbiAgICAgICAgbWludXRlcyAgICAgICAgICAgPSBhYnNGbG9vcihzZWNvbmRzIC8gNjApO1xuICAgICAgICBob3VycyAgICAgICAgICAgICA9IGFic0Zsb29yKG1pbnV0ZXMgLyA2MCk7XG4gICAgICAgIHNlY29uZHMgJT0gNjA7XG4gICAgICAgIG1pbnV0ZXMgJT0gNjA7XG5cbiAgICAgICAgLy8gMTIgbW9udGhzIC0+IDEgeWVhclxuICAgICAgICB5ZWFycyAgPSBhYnNGbG9vcihtb250aHMgLyAxMik7XG4gICAgICAgIG1vbnRocyAlPSAxMjtcblxuXG4gICAgICAgIC8vIGluc3BpcmVkIGJ5IGh0dHBzOi8vZ2l0aHViLmNvbS9kb3JkaWxsZS9tb21lbnQtaXNvZHVyYXRpb24vYmxvYi9tYXN0ZXIvbW9tZW50Lmlzb2R1cmF0aW9uLmpzXG4gICAgICAgIHZhciBZID0geWVhcnM7XG4gICAgICAgIHZhciBNID0gbW9udGhzO1xuICAgICAgICB2YXIgRCA9IGRheXM7XG4gICAgICAgIHZhciBoID0gaG91cnM7XG4gICAgICAgIHZhciBtID0gbWludXRlcztcbiAgICAgICAgdmFyIHMgPSBzZWNvbmRzO1xuICAgICAgICB2YXIgdG90YWwgPSB0aGlzLmFzU2Vjb25kcygpO1xuXG4gICAgICAgIGlmICghdG90YWwpIHtcbiAgICAgICAgICAgIC8vIHRoaXMgaXMgdGhlIHNhbWUgYXMgQyMncyAoTm9kYSkgYW5kIHB5dGhvbiAoaXNvZGF0ZSkuLi5cbiAgICAgICAgICAgIC8vIGJ1dCBub3Qgb3RoZXIgSlMgKGdvb2cuZGF0ZSlcbiAgICAgICAgICAgIHJldHVybiAnUDBEJztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAodG90YWwgPCAwID8gJy0nIDogJycpICtcbiAgICAgICAgICAgICdQJyArXG4gICAgICAgICAgICAoWSA/IFkgKyAnWScgOiAnJykgK1xuICAgICAgICAgICAgKE0gPyBNICsgJ00nIDogJycpICtcbiAgICAgICAgICAgIChEID8gRCArICdEJyA6ICcnKSArXG4gICAgICAgICAgICAoKGggfHwgbSB8fCBzKSA/ICdUJyA6ICcnKSArXG4gICAgICAgICAgICAoaCA/IGggKyAnSCcgOiAnJykgK1xuICAgICAgICAgICAgKG0gPyBtICsgJ00nIDogJycpICtcbiAgICAgICAgICAgIChzID8gcyArICdTJyA6ICcnKTtcbiAgICB9XG5cbiAgICB2YXIgZHVyYXRpb25fcHJvdG90eXBlX19wcm90byA9IER1cmF0aW9uLnByb3RvdHlwZTtcblxuICAgIGR1cmF0aW9uX3Byb3RvdHlwZV9fcHJvdG8uYWJzICAgICAgICAgICAgPSBkdXJhdGlvbl9hYnNfX2FicztcbiAgICBkdXJhdGlvbl9wcm90b3R5cGVfX3Byb3RvLmFkZCAgICAgICAgICAgID0gZHVyYXRpb25fYWRkX3N1YnRyYWN0X19hZGQ7XG4gICAgZHVyYXRpb25fcHJvdG90eXBlX19wcm90by5zdWJ0cmFjdCAgICAgICA9IGR1cmF0aW9uX2FkZF9zdWJ0cmFjdF9fc3VidHJhY3Q7XG4gICAgZHVyYXRpb25fcHJvdG90eXBlX19wcm90by5hcyAgICAgICAgICAgICA9IGFzO1xuICAgIGR1cmF0aW9uX3Byb3RvdHlwZV9fcHJvdG8uYXNNaWxsaXNlY29uZHMgPSBhc01pbGxpc2Vjb25kcztcbiAgICBkdXJhdGlvbl9wcm90b3R5cGVfX3Byb3RvLmFzU2Vjb25kcyAgICAgID0gYXNTZWNvbmRzO1xuICAgIGR1cmF0aW9uX3Byb3RvdHlwZV9fcHJvdG8uYXNNaW51dGVzICAgICAgPSBhc01pbnV0ZXM7XG4gICAgZHVyYXRpb25fcHJvdG90eXBlX19wcm90by5hc0hvdXJzICAgICAgICA9IGFzSG91cnM7XG4gICAgZHVyYXRpb25fcHJvdG90eXBlX19wcm90by5hc0RheXMgICAgICAgICA9IGFzRGF5cztcbiAgICBkdXJhdGlvbl9wcm90b3R5cGVfX3Byb3RvLmFzV2Vla3MgICAgICAgID0gYXNXZWVrcztcbiAgICBkdXJhdGlvbl9wcm90b3R5cGVfX3Byb3RvLmFzTW9udGhzICAgICAgID0gYXNNb250aHM7XG4gICAgZHVyYXRpb25fcHJvdG90eXBlX19wcm90by5hc1llYXJzICAgICAgICA9IGFzWWVhcnM7XG4gICAgZHVyYXRpb25fcHJvdG90eXBlX19wcm90by52YWx1ZU9mICAgICAgICA9IGR1cmF0aW9uX2FzX192YWx1ZU9mO1xuICAgIGR1cmF0aW9uX3Byb3RvdHlwZV9fcHJvdG8uX2J1YmJsZSAgICAgICAgPSBidWJibGU7XG4gICAgZHVyYXRpb25fcHJvdG90eXBlX19wcm90by5nZXQgICAgICAgICAgICA9IGR1cmF0aW9uX2dldF9fZ2V0O1xuICAgIGR1cmF0aW9uX3Byb3RvdHlwZV9fcHJvdG8ubWlsbGlzZWNvbmRzICAgPSBtaWxsaXNlY29uZHM7XG4gICAgZHVyYXRpb25fcHJvdG90eXBlX19wcm90by5zZWNvbmRzICAgICAgICA9IHNlY29uZHM7XG4gICAgZHVyYXRpb25fcHJvdG90eXBlX19wcm90by5taW51dGVzICAgICAgICA9IG1pbnV0ZXM7XG4gICAgZHVyYXRpb25fcHJvdG90eXBlX19wcm90by5ob3VycyAgICAgICAgICA9IGhvdXJzO1xuICAgIGR1cmF0aW9uX3Byb3RvdHlwZV9fcHJvdG8uZGF5cyAgICAgICAgICAgPSBkYXlzO1xuICAgIGR1cmF0aW9uX3Byb3RvdHlwZV9fcHJvdG8ud2Vla3MgICAgICAgICAgPSB3ZWVrcztcbiAgICBkdXJhdGlvbl9wcm90b3R5cGVfX3Byb3RvLm1vbnRocyAgICAgICAgID0gbW9udGhzO1xuICAgIGR1cmF0aW9uX3Byb3RvdHlwZV9fcHJvdG8ueWVhcnMgICAgICAgICAgPSB5ZWFycztcbiAgICBkdXJhdGlvbl9wcm90b3R5cGVfX3Byb3RvLmh1bWFuaXplICAgICAgID0gaHVtYW5pemU7XG4gICAgZHVyYXRpb25fcHJvdG90eXBlX19wcm90by50b0lTT1N0cmluZyAgICA9IGlzb19zdHJpbmdfX3RvSVNPU3RyaW5nO1xuICAgIGR1cmF0aW9uX3Byb3RvdHlwZV9fcHJvdG8udG9TdHJpbmcgICAgICAgPSBpc29fc3RyaW5nX190b0lTT1N0cmluZztcbiAgICBkdXJhdGlvbl9wcm90b3R5cGVfX3Byb3RvLnRvSlNPTiAgICAgICAgID0gaXNvX3N0cmluZ19fdG9JU09TdHJpbmc7XG4gICAgZHVyYXRpb25fcHJvdG90eXBlX19wcm90by5sb2NhbGUgICAgICAgICA9IGxvY2FsZTtcbiAgICBkdXJhdGlvbl9wcm90b3R5cGVfX3Byb3RvLmxvY2FsZURhdGEgICAgID0gbG9jYWxlRGF0YTtcblxuICAgIC8vIERlcHJlY2F0aW9uc1xuICAgIGR1cmF0aW9uX3Byb3RvdHlwZV9fcHJvdG8udG9Jc29TdHJpbmcgPSBkZXByZWNhdGUoJ3RvSXNvU3RyaW5nKCkgaXMgZGVwcmVjYXRlZC4gUGxlYXNlIHVzZSB0b0lTT1N0cmluZygpIGluc3RlYWQgKG5vdGljZSB0aGUgY2FwaXRhbHMpJywgaXNvX3N0cmluZ19fdG9JU09TdHJpbmcpO1xuICAgIGR1cmF0aW9uX3Byb3RvdHlwZV9fcHJvdG8ubGFuZyA9IGxhbmc7XG5cbiAgICAvLyBTaWRlIGVmZmVjdCBpbXBvcnRzXG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbignWCcsIDAsIDAsICd1bml4Jyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oJ3gnLCAwLCAwLCAndmFsdWVPZicpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbigneCcsIG1hdGNoU2lnbmVkKTtcbiAgICBhZGRSZWdleFRva2VuKCdYJywgbWF0Y2hUaW1lc3RhbXApO1xuICAgIGFkZFBhcnNlVG9rZW4oJ1gnLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUocGFyc2VGbG9hdChpbnB1dCwgMTApICogMTAwMCk7XG4gICAgfSk7XG4gICAgYWRkUGFyc2VUb2tlbigneCcsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZSh0b0ludChpbnB1dCkpO1xuICAgIH0pO1xuXG4gICAgLy8gU2lkZSBlZmZlY3QgaW1wb3J0c1xuXG5cbiAgICB1dGlsc19ob29rc19faG9va3MudmVyc2lvbiA9ICcyLjExLjEnO1xuXG4gICAgc2V0SG9va0NhbGxiYWNrKGxvY2FsX19jcmVhdGVMb2NhbCk7XG5cbiAgICB1dGlsc19ob29rc19faG9va3MuZm4gICAgICAgICAgICAgICAgICAgID0gbW9tZW50UHJvdG90eXBlO1xuICAgIHV0aWxzX2hvb2tzX19ob29rcy5taW4gICAgICAgICAgICAgICAgICAgPSBtaW47XG4gICAgdXRpbHNfaG9va3NfX2hvb2tzLm1heCAgICAgICAgICAgICAgICAgICA9IG1heDtcbiAgICB1dGlsc19ob29rc19faG9va3Mubm93ICAgICAgICAgICAgICAgICAgID0gbm93O1xuICAgIHV0aWxzX2hvb2tzX19ob29rcy51dGMgICAgICAgICAgICAgICAgICAgPSBjcmVhdGVfdXRjX19jcmVhdGVVVEM7XG4gICAgdXRpbHNfaG9va3NfX2hvb2tzLnVuaXggICAgICAgICAgICAgICAgICA9IG1vbWVudF9fY3JlYXRlVW5peDtcbiAgICB1dGlsc19ob29rc19faG9va3MubW9udGhzICAgICAgICAgICAgICAgID0gbGlzdHNfX2xpc3RNb250aHM7XG4gICAgdXRpbHNfaG9va3NfX2hvb2tzLmlzRGF0ZSAgICAgICAgICAgICAgICA9IGlzRGF0ZTtcbiAgICB1dGlsc19ob29rc19faG9va3MubG9jYWxlICAgICAgICAgICAgICAgID0gbG9jYWxlX2xvY2FsZXNfX2dldFNldEdsb2JhbExvY2FsZTtcbiAgICB1dGlsc19ob29rc19faG9va3MuaW52YWxpZCAgICAgICAgICAgICAgID0gdmFsaWRfX2NyZWF0ZUludmFsaWQ7XG4gICAgdXRpbHNfaG9va3NfX2hvb2tzLmR1cmF0aW9uICAgICAgICAgICAgICA9IGNyZWF0ZV9fY3JlYXRlRHVyYXRpb247XG4gICAgdXRpbHNfaG9va3NfX2hvb2tzLmlzTW9tZW50ICAgICAgICAgICAgICA9IGlzTW9tZW50O1xuICAgIHV0aWxzX2hvb2tzX19ob29rcy53ZWVrZGF5cyAgICAgICAgICAgICAgPSBsaXN0c19fbGlzdFdlZWtkYXlzO1xuICAgIHV0aWxzX2hvb2tzX19ob29rcy5wYXJzZVpvbmUgICAgICAgICAgICAgPSBtb21lbnRfX2NyZWF0ZUluWm9uZTtcbiAgICB1dGlsc19ob29rc19faG9va3MubG9jYWxlRGF0YSAgICAgICAgICAgID0gbG9jYWxlX2xvY2FsZXNfX2dldExvY2FsZTtcbiAgICB1dGlsc19ob29rc19faG9va3MuaXNEdXJhdGlvbiAgICAgICAgICAgID0gaXNEdXJhdGlvbjtcbiAgICB1dGlsc19ob29rc19faG9va3MubW9udGhzU2hvcnQgICAgICAgICAgID0gbGlzdHNfX2xpc3RNb250aHNTaG9ydDtcbiAgICB1dGlsc19ob29rc19faG9va3Mud2Vla2RheXNNaW4gICAgICAgICAgID0gbGlzdHNfX2xpc3RXZWVrZGF5c01pbjtcbiAgICB1dGlsc19ob29rc19faG9va3MuZGVmaW5lTG9jYWxlICAgICAgICAgID0gZGVmaW5lTG9jYWxlO1xuICAgIHV0aWxzX2hvb2tzX19ob29rcy53ZWVrZGF5c1Nob3J0ICAgICAgICAgPSBsaXN0c19fbGlzdFdlZWtkYXlzU2hvcnQ7XG4gICAgdXRpbHNfaG9va3NfX2hvb2tzLm5vcm1hbGl6ZVVuaXRzICAgICAgICA9IG5vcm1hbGl6ZVVuaXRzO1xuICAgIHV0aWxzX2hvb2tzX19ob29rcy5yZWxhdGl2ZVRpbWVUaHJlc2hvbGQgPSBkdXJhdGlvbl9odW1hbml6ZV9fZ2V0U2V0UmVsYXRpdmVUaW1lVGhyZXNob2xkO1xuICAgIHV0aWxzX2hvb2tzX19ob29rcy5wcm90b3R5cGUgICAgICAgICAgICAgPSBtb21lbnRQcm90b3R5cGU7XG5cbiAgICB2YXIgX21vbWVudCA9IHV0aWxzX2hvb2tzX19ob29rcztcblxuICAgIHJldHVybiBfbW9tZW50O1xuXG59KSk7XG4vKiBleHBvcnRlZCBjb25maWcgKi9cbmlmICh0eXBlb2YgYW5ndWxhciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICBhbmd1bGFyLm1vZHVsZShcInJpc2V2aXNpb24uY29tbW9uLmkxOG4uY29uZmlnXCIsIFtdKVxuICAgIC5jb25zdGFudChcIkxPQ0FMRVNfUFJFRklYXCIsIFwibG9jYWxlcy90cmFuc2xhdGlvbl9cIilcbiAgICAuY29uc3RhbnQoXCJMT0NBTEVTX1NVRklYXCIsIFwiLmpzb25cIik7XG59XG5cbnZhciBjb25maWcgPSB7fTtcblxuLyogZ2xvYmFsIGdhZGdldHMsIG1vbWVudCAqL1xuXG52YXIgUmlzZVZpc2lvbiA9IFJpc2VWaXNpb24gfHwge307XG5SaXNlVmlzaW9uLlRpbWVEYXRlID0ge307XG5cblJpc2VWaXNpb24uVGltZURhdGUgPSAoZnVuY3Rpb24gKGdhZGdldHMpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIF9wcmVmcyA9IG5ldyBnYWRnZXRzLlByZWZzKCksXG4gICAgX2FkZGl0aW9uYWxQYXJhbXMgPSBudWxsO1xuXG4gIHZhciBfbWVzc2FnZSA9IG51bGw7XG4gIHZhciBfdGltZW91dElkO1xuICB2YXIgX3RpbWVBbmREYXRlQ29udGFpbmVyO1xuICB2YXIgX2Zvcm1hdDtcbiAgdmFyIF9jb25maWd1cmF0aW9uTG9nZ2VkID0gZmFsc2U7XG5cbiAgLypcbiAgICogIFByaXZhdGUgTWV0aG9kc1xuICAgKi9cbiAgZnVuY3Rpb24gX2luaXQoKSB7XG5cbiAgICAvLyBMb2FkIGZvbnRzLlxuICAgIHZhciBmb250U2V0dGluZ3MgPSBbXG4gICAgICB7XG4gICAgICAgIFwiY2xhc3NcIjogXCJ0aW1lLWFuZC1kYXRlXCIsXG4gICAgICAgIFwiZm9udFNldHRpbmdcIjogX2FkZGl0aW9uYWxQYXJhbXMuZm9udFN0eWxlXG4gICAgICB9XG4gICAgXTtcblxuICAgIFJpc2VWaXNpb24uQ29tbW9uLlV0aWxpdGllcy5sb2FkRm9udHMoZm9udFNldHRpbmdzKTtcblxuICAgIF9mb3JtYXQgPSAoX2FkZGl0aW9uYWxQYXJhbXMuc2hvd1RpbWUpID8gX2FkZGl0aW9uYWxQYXJhbXMudGltZUZvcm1hdCA6IFwiXCI7XG4gICAgX2Zvcm1hdCArPSAoX2FkZGl0aW9uYWxQYXJhbXMuc2hvd1RpbWUgJiYgX2FkZGl0aW9uYWxQYXJhbXMuc2hvd0RhdGUpPyBcIiBcIiA6IFwiXCI7XG4gICAgX2Zvcm1hdCArPSAoX2FkZGl0aW9uYWxQYXJhbXMuc2hvd0RhdGUpID8gX2FkZGl0aW9uYWxQYXJhbXMuZGF0ZUZvcm1hdCA6IFwiXCI7XG5cblxuICAgIF90aW1lQW5kRGF0ZUNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpO1xuICAgIF90aW1lQW5kRGF0ZUNvbnRhaW5lci5jbGFzc05hbWUgPSBcInRpbWUtYW5kLWRhdGVcIjtcbiAgICBfdGltZUFuZERhdGVDb250YWluZXIuc3R5bGUudGV4dEFsaWduID0gX2FkZGl0aW9uYWxQYXJhbXMuZm9udFN0eWxlLmFsaWduO1xuXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjb250YWluZXJcIikuYXBwZW5kQ2hpbGQoX3RpbWVBbmREYXRlQ29udGFpbmVyKTtcblxuICAgIF9yZWFkeSgpO1xuICB9XG5cbiAgLypcbiAgICogIFByaXZhdGUgTWV0aG9kc1xuICAgKi9cbiAgZnVuY3Rpb24gX3JlYWR5KCkge1xuICAgIGdhZGdldHMucnBjLmNhbGwoXCJcIiwgXCJyc2V2ZW50X3JlYWR5XCIsIG51bGwsIF9wcmVmcy5nZXRTdHJpbmcoXCJpZFwiKSxcbiAgICAgIHRydWUsIHRydWUsIHRydWUsIHRydWUsIGZhbHNlKTtcbiAgfVxuXG4gIC8qXG4gICAqICBQdWJsaWMgTWV0aG9kc1xuICAgKi9cblxuICBmdW5jdGlvbiBzZXRBZGRpdGlvbmFsUGFyYW1zKGFkZGl0aW9uYWxQYXJhbXMpIHtcbiAgICBfYWRkaXRpb25hbFBhcmFtcyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoYWRkaXRpb25hbFBhcmFtcykpO1xuXG4gICAgX2FkZGl0aW9uYWxQYXJhbXMud2lkdGggPSBfcHJlZnMuZ2V0SW50KFwicnNXXCIpO1xuICAgIF9hZGRpdGlvbmFsUGFyYW1zLmhlaWdodCA9IF9wcmVmcy5nZXRJbnQoXCJyc0hcIik7XG5cbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNvbnRhaW5lclwiKS5zdHlsZS53aWR0aCA9IF9hZGRpdGlvbmFsUGFyYW1zLndpZHRoICsgXCJweFwiO1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY29udGFpbmVyXCIpLnN0eWxlLmhlaWdodCA9IF9hZGRpdGlvbmFsUGFyYW1zLmhlaWdodCArIFwicHhcIjtcblxuICAgIF9tZXNzYWdlID0gbmV3IFJpc2VWaXNpb24uQ29tbW9uLk1lc3NhZ2UoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjb250YWluZXJcIiksXG4gICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm1lc3NhZ2VDb250YWluZXJcIikpO1xuXG4gICAgX2luaXQoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9kcmF3KCkge1xuXG4gICAgaWYgKF9mb3JtYXQpIHtcbiAgICAgIHZhciBub3cgPSBuZXcgRGF0ZSgpO1xuXG4gICAgICBfdGltZUFuZERhdGVDb250YWluZXIuaW5uZXJIVE1MID0gbW9tZW50KG5vdykuZm9ybWF0KF9mb3JtYXQpO1xuXG4gICAgICBfdGltZW91dElkID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgX2RyYXcoKTtcbiAgICAgIH0sIDEwMDApO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHBhdXNlKCkge1xuICAgIGNsZWFyVGltZW91dChfdGltZW91dElkKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBsYXkoKSB7XG5cbiAgICBpZiAoIV9jb25maWd1cmF0aW9uTG9nZ2VkKSB7XG4gICAgICBsb2dFdmVudCh7IFwiZXZlbnRcIjogXCJjb25maWd1cmF0aW9uXCIsIFwiZXZlbnRfZGV0YWlsc1wiOiBKU09OLnN0cmluZ2lmeShfYWRkaXRpb25hbFBhcmFtcyl9KTtcbiAgICAgIF9jb25maWd1cmF0aW9uTG9nZ2VkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBfZHJhdygpO1xuXG4gICAgbG9nRXZlbnQoeyBcImV2ZW50XCI6IFwicGxheVwiLCBcImV2ZW50X2RldGFpbHNcIjogX2Zvcm1hdCB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgcGF1c2UoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFRhYmxlTmFtZSgpIHtcbiAgICByZXR1cm4gXCJ0aW1lX2RhdGVfZXZlbnRzXCI7XG4gIH1cblxuICBmdW5jdGlvbiBsb2dFdmVudChwYXJhbXMpIHtcbiAgICBSaXNlVmlzaW9uLkNvbW1vbi5Mb2dnZXJVdGlscy5sb2dFdmVudChnZXRUYWJsZU5hbWUoKSwgcGFyYW1zKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgXCJwYXVzZVwiOiBwYXVzZSxcbiAgICBcInBsYXlcIjogcGxheSxcbiAgICBcInNldEFkZGl0aW9uYWxQYXJhbXNcIjogc2V0QWRkaXRpb25hbFBhcmFtcyxcbiAgICBcInN0b3BcIjogc3RvcCxcbiAgICBcImxvZ0V2ZW50XCI6IGxvZ0V2ZW50LFxuICAgIFwiZ2V0VGFibGVOYW1lXCI6IGdldFRhYmxlTmFtZVxuICB9O1xufSkoZ2FkZ2V0cyk7XG5cbnZhciBSaXNlVmlzaW9uID0gUmlzZVZpc2lvbiB8fCB7fTtcblJpc2VWaXNpb24uQ29tbW9uID0gUmlzZVZpc2lvbi5Db21tb24gfHwge307XG5cblJpc2VWaXNpb24uQ29tbW9uLk1lc3NhZ2UgPSBmdW5jdGlvbiAobWFpbkNvbnRhaW5lciwgbWVzc2FnZUNvbnRhaW5lcikge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgX2FjdGl2ZSA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIF9pbml0KCkge1xuICAgIHRyeSB7XG4gICAgICBtZXNzYWdlQ29udGFpbmVyLnN0eWxlLmhlaWdodCA9IG1haW5Db250YWluZXIuc3R5bGUuaGVpZ2h0O1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnNvbGUud2FybihcIkNhbid0IGluaXRpYWxpemUgTWVzc2FnZSAtIFwiLCBlLm1lc3NhZ2UpO1xuICAgIH1cbiAgfVxuXG4gIC8qXG4gICAqICBQdWJsaWMgTWV0aG9kc1xuICAgKi9cbiAgZnVuY3Rpb24gaGlkZSgpIHtcbiAgICBpZiAoX2FjdGl2ZSkge1xuICAgICAgLy8gY2xlYXIgY29udGVudCBvZiBtZXNzYWdlIGNvbnRhaW5lclxuICAgICAgd2hpbGUgKG1lc3NhZ2VDb250YWluZXIuZmlyc3RDaGlsZCkge1xuICAgICAgICBtZXNzYWdlQ29udGFpbmVyLnJlbW92ZUNoaWxkKG1lc3NhZ2VDb250YWluZXIuZmlyc3RDaGlsZCk7XG4gICAgICB9XG5cbiAgICAgIC8vIGhpZGUgbWVzc2FnZSBjb250YWluZXJcbiAgICAgIG1lc3NhZ2VDb250YWluZXIuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuXG4gICAgICAvLyBzaG93IG1haW4gY29udGFpbmVyXG4gICAgICBtYWluQ29udGFpbmVyLnN0eWxlLnZpc2liaWxpdHkgPSBcInZpc2libGVcIjtcblxuICAgICAgX2FjdGl2ZSA9IGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNob3cobWVzc2FnZSkge1xuICAgIHZhciBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcbiAgICAgIHA7XG5cbiAgICBpZiAoIV9hY3RpdmUpIHtcbiAgICAgIC8vIGhpZGUgbWFpbiBjb250YWluZXJcbiAgICAgIG1haW5Db250YWluZXIuc3R5bGUudmlzaWJpbGl0eSA9IFwiaGlkZGVuXCI7XG5cbiAgICAgIG1lc3NhZ2VDb250YWluZXIuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcblxuICAgICAgLy8gY3JlYXRlIG1lc3NhZ2UgZWxlbWVudFxuICAgICAgcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpO1xuICAgICAgcC5pbm5lckhUTUwgPSBtZXNzYWdlO1xuICAgICAgcC5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcIm1lc3NhZ2VcIik7XG5cbiAgICAgIGZyYWdtZW50LmFwcGVuZENoaWxkKHApO1xuICAgICAgbWVzc2FnZUNvbnRhaW5lci5hcHBlbmRDaGlsZChmcmFnbWVudCk7XG5cbiAgICAgIF9hY3RpdmUgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBtZXNzYWdlIGFscmVhZHkgYmVpbmcgc2hvd24sIHVwZGF0ZSBtZXNzYWdlIHRleHRcbiAgICAgIHAgPSBtZXNzYWdlQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoXCIubWVzc2FnZVwiKTtcbiAgICAgIHAuaW5uZXJIVE1MID0gbWVzc2FnZTtcbiAgICB9XG4gIH1cblxuICBfaW5pdCgpO1xuXG4gIHJldHVybiB7XG4gICAgXCJoaWRlXCI6IGhpZGUsXG4gICAgXCJzaG93XCI6IHNob3dcbiAgfTtcbn07XG5cbi8qIGdsb2JhbCBSaXNlVmlzaW9uLCBnYWRnZXRzICovXG4oZnVuY3Rpb24gKHdpbmRvdywgZG9jdW1lbnQsIGdhZGdldHMpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIGlkID0gbmV3IGdhZGdldHMuUHJlZnMoKS5nZXRTdHJpbmcoXCJpZFwiKTtcblxuICB3aW5kb3cub25jb250ZXh0bWVudSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG5cbiAgZG9jdW1lbnQuYm9keS5vbm1vdXNlZG93biA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxuICBmdW5jdGlvbiBjb25maWd1cmUobmFtZXMsIHZhbHVlcykge1xuICAgIHZhciBhZGRpdGlvbmFsUGFyYW1zLFxuICAgICAgICBjb21wYW55SWQgPSBcIlwiLFxuICAgICAgICBkaXNwbGF5SWQgPSBcIlwiO1xuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkobmFtZXMpICYmIG5hbWVzLmxlbmd0aCA+IDAgJiYgQXJyYXkuaXNBcnJheSh2YWx1ZXMpICYmIHZhbHVlcy5sZW5ndGggPiAwKSB7XG4gICAgICAvLyBjb21wYW55IGlkXG4gICAgICBpZiAobmFtZXNbMF0gPT09IFwiY29tcGFueUlkXCIpIHtcbiAgICAgICAgY29tcGFueUlkID0gdmFsdWVzWzBdO1xuICAgICAgfVxuXG4gICAgICAvLyBkaXNwbGF5IGlkXG4gICAgICBpZiAobmFtZXNbMV0gPT09IFwiZGlzcGxheUlkXCIpIHtcbiAgICAgICAgaWYgKHZhbHVlc1sxXSkge1xuICAgICAgICAgIGRpc3BsYXlJZCA9IHZhbHVlc1sxXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBkaXNwbGF5SWQgPSBcInByZXZpZXdcIjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBwcm92aWRlIExvZ2dlclV0aWxzIHRoZSBpZHMgdG8gdXNlXG4gICAgICBSaXNlVmlzaW9uLkNvbW1vbi5Mb2dnZXJVdGlscy5zZXRJZHMoY29tcGFueUlkLCBkaXNwbGF5SWQpO1xuXG4gICAgICAvLyBhZGRpdGlvbmFsIHBhcmFtc1xuICAgICAgaWYgKG5hbWVzWzJdID09PSBcImFkZGl0aW9uYWxQYXJhbXNcIikge1xuICAgICAgICBhZGRpdGlvbmFsUGFyYW1zID0gSlNPTi5wYXJzZSh2YWx1ZXNbMl0pO1xuXG4gICAgICAgIFJpc2VWaXNpb24uVGltZURhdGUuc2V0QWRkaXRpb25hbFBhcmFtcyhhZGRpdGlvbmFsUGFyYW1zKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwYXVzZSgpIHtcbiAgICBSaXNlVmlzaW9uLlRpbWVEYXRlLnBhdXNlKCk7XG4gIH1cblxuICBmdW5jdGlvbiBwbGF5KCkge1xuICAgIFJpc2VWaXNpb24uVGltZURhdGUucGxheSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gc3RvcCgpIHtcbiAgICBSaXNlVmlzaW9uLlRpbWVEYXRlLnN0b3AoKTtcbiAgfVxuXG4gIGlmIChpZCAmJiBpZCAhPT0gXCJcIikge1xuICAgIGdhZGdldHMucnBjLnJlZ2lzdGVyKFwicnNjbWRfcGxheV9cIiArIGlkLCBwbGF5KTtcbiAgICBnYWRnZXRzLnJwYy5yZWdpc3RlcihcInJzY21kX3BhdXNlX1wiICsgaWQsIHBhdXNlKTtcbiAgICBnYWRnZXRzLnJwYy5yZWdpc3RlcihcInJzY21kX3N0b3BfXCIgKyBpZCwgc3RvcCk7XG4gICAgZ2FkZ2V0cy5ycGMucmVnaXN0ZXIoXCJyc3BhcmFtX3NldF9cIiArIGlkLCBjb25maWd1cmUpO1xuICAgIGdhZGdldHMucnBjLmNhbGwoXCJcIiwgXCJyc3BhcmFtX2dldFwiLCBudWxsLCBpZCwgW1wiY29tcGFueUlkXCIsIFwiZGlzcGxheUlkXCIsIFwiYWRkaXRpb25hbFBhcmFtc1wiXSk7XG4gIH1cblxufSkod2luZG93LCBkb2N1bWVudCwgZ2FkZ2V0cyk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
