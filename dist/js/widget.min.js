var WIDGET_COMMON_CONFIG={AUTH_PATH_URL:"v1/widget/auth",LOGGER_CLIENT_ID:"1088527147109-6q1o2vtihn34292pjt4ckhmhck0rk0o7.apps.googleusercontent.com",LOGGER_CLIENT_SECRET:"nlZyrcPLg6oEwO9f9Wfn29Wh",LOGGER_REFRESH_TOKEN:"1/xzt4kwzE1H7W9VnKB8cAaCx6zb4Es4nKEoqaYHdTD15IgOrJDtdun6zK6XiATCKT",STORAGE_ENV:"prod",STORE_URL:"https://store-dot-rvaserver2.appspot.com/"},RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.LoggerUtils=function(){"use strict";function e(e,a){var t=null;e.event?(t=e,t.file_url&&(t.file_format=i(t.file_url)),t.company_id=s,t.display_id=o,a(t)):a(t)}function a(){var e=new Date,a=e.getUTCFullYear(),i=e.getUTCMonth()+1,t=e.getUTCDate();return 10>i&&(i="0"+i),10>t&&(t="0"+t),a+i+t}function i(e){var a,i=/[?#&]/;return e&&"string"==typeof e?(a=e.substr(e.lastIndexOf(".")+1),i.test(a)&&(a=a.substr(0,-1!==a.indexOf("?")?a.indexOf("?"):a.length),a=a.substr(0,-1!==a.indexOf("#")?a.indexOf("#"):a.length),a=a.substr(0,-1!==a.indexOf("&")?a.indexOf("&"):a.length)),a.toLowerCase()):null}function t(e){var i={kind:"bigquery#tableDataInsertAllRequest",skipInvalidRows:!1,ignoreUnknownValues:!1,templateSuffix:a(),rows:[{insertId:""}]},t=JSON.parse(JSON.stringify(i));return t.rows[0].insertId=Math.random().toString(36).substr(2).toUpperCase(),t.rows[0].json=JSON.parse(JSON.stringify(e)),t.rows[0].json.ts=(new Date).toISOString(),t}function n(a,i){e(i,function(e){null!==e&&RiseVision.Common.Logger.log(a,e)})}function r(e,a){s=e,o=a}var o="",s="";return{getInsertData:t,getFileFormat:i,logEvent:n,setIds:r}}(),RiseVision.Common.Logger=function(e){"use strict";function a(e){var a=new XMLHttpRequest;return new Date-u<358e4?e({}):(a.open("POST",n,!0),a.onloadend=function(){var i=JSON.parse(a.response);e({token:i.access_token,refreshedAt:new Date})},a.send(),void 0)}function i(e){return o&&c===e}function t(t,n){function d(a){var i,o,s=new XMLHttpRequest;o=r.replace("TABLE_ID",t),u=a.refreshedAt||u,l=a.token||l,i=e.getInsertData(n),s.open("POST",o,!0),s.setRequestHeader("Content-Type","application/json"),s.setRequestHeader("Authorization","Bearer "+l),n.cb&&"function"==typeof n.cb&&(s.onloadend=function(){n.cb(s.response)}),s.send(JSON.stringify(i))}if(!(!t||!n||n.hasOwnProperty("event")&&!n.event||n.hasOwnProperty("event")&&i(n.event)))return o=!0,c=n.event,setTimeout(function(){o=!1},s),a(d)}var n="https://www.googleapis.com/oauth2/v3/token?client_id="+WIDGET_COMMON_CONFIG.LOGGER_CLIENT_ID+"&client_secret="+WIDGET_COMMON_CONFIG.LOGGER_CLIENT_SECRET+"&refresh_token="+WIDGET_COMMON_CONFIG.LOGGER_REFRESH_TOKEN+"&grant_type=refresh_token",r="https://www.googleapis.com/bigquery/v2/projects/client-side-events/datasets/Widget_Events/tables/TABLE_ID/insertAll",o=!1,s=1e3,c="",u=0,l="";return{log:t}}(RiseVision.Common.LoggerUtils);var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.RiseCache=function(){"use strict";function e(e){var a=new XMLHttpRequest;e&&"function"==typeof e&&(a.open("GET",i+"ping?callback=_",!0),a.onreadystatechange=function(){try{4===a.readyState&&(t=!0,200===a.status?(n=!0,e(!0,a.responseText)):(console.debug("Rise Cache is not running"),n=!1,e(!1,null)))}catch(i){console.debug("Caught exception: ",i.description)}},a.send())}function a(e,a,r){function o(){var a,t,o;n?a=r?i+"?url="+encodeURIComponent(e):i+"cb="+(new Date).getTime()+"?url="+encodeURIComponent(e):r?a=e:(t=e.split("?"),o=1===t.length?"?":"&",a=e+o+"cb="+(new Date).getTime()),s("HEAD",a)}function s(e,i){var t=new XMLHttpRequest,r={xhr:t,url:i};n?(t.open(e,i,!0),t.addEventListener("loadend",function(){var n=t.status||0;n>=200&&300>n?a(r):"HEAD"===e?s("GET",i):a(r,new Error("The request failed with status code: "+n))}),t.send()):a(r)}if(e&&a&&"function"==typeof a)return t?o():this.ping(o)}var i="//localhost:9494/",t=!1,n=!1;return{getFile:a,ping:e}}();var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.Utilities=function(){function e(e,a){var i="font-family:"+a.font.family+"; ",t="color: "+(a.color?a.color:a.forecolor)+"; ",n="font-size: "+(-1===a.size.indexOf("px")?a.size+"px; ":a.size+"; "),r="font-weight: "+(a.bold?"bold":"normal")+"; ",o="font-style: "+(a.italic?"italic":"normal")+"; ",s="text-decoration: "+(a.underline?"underline":"none")+"; ",c="background-color: "+(a.highlightColor?a.highlightColor:a.backcolor)+"; ";return"."+e+" {"+i+t+n+r+o+s+c+"}"}function a(e){for(var a=document.createElement("style"),i=0,t=e.length;t>i;i++)a.appendChild(document.createTextNode(e[i]));document.head.appendChild(a)}function i(i,r){i.forEach(function(i){i.class&&i.fontSetting&&a([e(i.class,i.fontSetting)]),i.fontSetting.font.type&&("custom"===i.fontSetting.font.type&&i.fontSetting.font.family&&i.fontSetting.font.url?t(i.fontSetting.font.family,i.fontSetting.font.url,r):"google"===i.fontSetting.font.type&&i.fontSetting.font.family&&n(i.fontSetting.font.family,r))})}function t(e,a,i){var t=null,n="font-family: "+e+"; src: url('"+a+"');";i=i||document,t=i.styleSheets[0],null!==t&&t.addRule("@font-face",n)}function n(e,a){var i,t=document.createElement("link");a=a||document,t.setAttribute("rel","stylesheet"),t.setAttribute("type","text/css"),i=e.split(",")[0],i=i.replace(/'/g,""),t.setAttribute("href","https://fonts.googleapis.com/css?family="+i),null!==t&&a.getElementsByTagName("head")[0].appendChild(t)}function r(e){for(var a=e.length,i=[],t=0;a>t;t++)i[t]=new Image,i[t].src=e[t]}function o(e){for(var a,i=window.location.search.substring(1),t=i.split("&"),n=0;n<t.length;n++)if(a=t[n].split("="),a[0]==e)return decodeURIComponent(a[1]);return""}function s(e){var a="";switch(e){case 404:a="The file does not exist or cannot be accessed.";break;case 507:a="There is not enough disk space to save the file on Rise Cache.";break;default:a="There was a problem retrieving the file from Rise Cache."}return a}return{getQueryParameter:o,getFontCssStyle:e,addCSSRules:a,loadFonts:i,loadCustomFont:t,loadGoogleFont:n,preloadImages:r,getRiseCacheErrorMessage:s}}(),function(e,a){"object"==typeof exports&&"undefined"!=typeof module?module.exports=a():"function"==typeof define&&define.amd?define(a):e.moment=a()}(this,function(){"use strict";function e(){return Ft.apply(null,arguments)}function a(e){Ft=e}function i(e){return"[object Array]"===Object.prototype.toString.call(e)}function t(e){return e instanceof Date||"[object Date]"===Object.prototype.toString.call(e)}function n(e,a){var i,t=[];for(i=0;i<e.length;++i)t.push(a(e[i],i));return t}function r(e,a){return Object.prototype.hasOwnProperty.call(e,a)}function o(e,a){for(var i in a)r(a,i)&&(e[i]=a[i]);return r(a,"toString")&&(e.toString=a.toString),r(a,"valueOf")&&(e.valueOf=a.valueOf),e}function s(e,a,i,t){return wa(e,a,i,t,!0).utc()}function c(){return{empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1}}function u(e){return null==e._pf&&(e._pf=c()),e._pf}function l(e){if(null==e._isValid){var a=u(e);e._isValid=!(isNaN(e._d.getTime())||!(a.overflow<0)||a.empty||a.invalidMonth||a.invalidWeekday||a.nullInput||a.invalidFormat||a.userInvalidated),e._strict&&(e._isValid=e._isValid&&0===a.charsLeftOver&&0===a.unusedTokens.length&&void 0===a.bigHour)}return e._isValid}function d(e){var a=s(0/0);return null!=e?o(u(a),e):u(a).userInvalidated=!0,a}function m(e){return void 0===e}function f(e,a){var i,t,n;if(m(a._isAMomentObject)||(e._isAMomentObject=a._isAMomentObject),m(a._i)||(e._i=a._i),m(a._f)||(e._f=a._f),m(a._l)||(e._l=a._l),m(a._strict)||(e._strict=a._strict),m(a._tzm)||(e._tzm=a._tzm),m(a._isUTC)||(e._isUTC=a._isUTC),m(a._offset)||(e._offset=a._offset),m(a._pf)||(e._pf=u(a)),m(a._locale)||(e._locale=a._locale),jt.length>0)for(i in jt)t=jt[i],n=a[t],m(n)||(e[t]=n);return e}function A(a){f(this,a),this._d=new Date(null!=a._d?a._d.getTime():0/0),Xt===!1&&(Xt=!0,e.updateOffset(this),Xt=!1)}function h(e){return e instanceof A||null!=e&&null!=e._isAMomentObject}function p(e){return 0>e?Math.ceil(e):Math.floor(e)}function _(e){var a=+e,i=0;return 0!==a&&isFinite(a)&&(i=p(a)),i}function M(e,a,i){var t,n=Math.min(e.length,a.length),r=Math.abs(e.length-a.length),o=0;for(t=0;n>t;t++)(i&&e[t]!==a[t]||!i&&_(e[t])!==_(a[t]))&&o++;return o+r}function g(){}function T(e){return e?e.toLowerCase().replace("_","-"):e}function S(e){for(var a,i,t,n,r=0;r<e.length;){for(n=T(e[r]).split("-"),a=n.length,i=T(e[r+1]),i=i?i.split("-"):null;a>0;){if(t=b(n.slice(0,a).join("-")))return t;if(i&&i.length>=a&&M(n,i,!0)>=a-1)break;a--}r++}return null}function b(e){var a=null;if(!Jt[e]&&"undefined"!=typeof module&&module&&module.exports)try{a=Kt._abbr,require("./locale/"+e),y(a)}catch(i){}return Jt[e]}function y(e,a){var i;return e&&(i=m(a)?v(e):E(e,a),i&&(Kt=i)),Kt._abbr}function E(e,a){return null!==a?(a.abbr=e,Jt[e]=Jt[e]||new g,Jt[e].set(a),y(e),Jt[e]):(delete Jt[e],null)}function v(e){var a;if(e&&e._locale&&e._locale._abbr&&(e=e._locale._abbr),!e)return Kt;if(!i(e)){if(a=b(e))return a;e=[e]}return S(e)}function D(e,a){var i=e.toLowerCase();Zt[i]=Zt[i+"s"]=Zt[a]=e}function z(e){return"string"==typeof e?Zt[e]||Zt[e.toLowerCase()]:void 0}function O(e){var a,i,t={};for(i in e)r(e,i)&&(a=z(i),a&&(t[a]=e[i]));return t}function w(e){return e instanceof Function||"[object Function]"===Object.prototype.toString.call(e)}function C(a,i){return function(t){return null!=t?(P(this,a,t),e.updateOffset(this,i),this):k(this,a)}}function k(e,a){return e.isValid()?e._d["get"+(e._isUTC?"UTC":"")+a]():0/0}function P(e,a,i){e.isValid()&&e._d["set"+(e._isUTC?"UTC":"")+a](i)}function W(e,a){var i;if("object"==typeof e)for(i in e)this.set(i,e[i]);else if(e=z(e),w(this[e]))return this[e](a);return this}function Y(e,a,i){var t=""+Math.abs(e),n=a-t.length,r=e>=0;return(r?i?"+":"":"-")+Math.pow(10,Math.max(0,n)).toString().substr(1)+t}function B(e,a,i,t){var n=t;"string"==typeof t&&(n=function(){return this[t]()}),e&&(an[e]=n),a&&(an[a[0]]=function(){return Y(n.apply(this,arguments),a[1],a[2])}),i&&(an[i]=function(){return this.localeData().ordinal(n.apply(this,arguments),e)})}function G(e){return e.match(/\[[\s\S]/)?e.replace(/^\[|\]$/g,""):e.replace(/\\/g,"")}function L(e){var a,i,t=e.match(Qt);for(a=0,i=t.length;i>a;a++)t[a]=an[t[a]]?an[t[a]]:G(t[a]);return function(n){var r="";for(a=0;i>a;a++)r+=t[a]instanceof Function?t[a].call(n,e):t[a];return r}}function R(e,a){return e.isValid()?(a=N(a,e.localeData()),en[a]=en[a]||L(a),en[a](e)):e.localeData().invalidDate()}function N(e,a){function i(e){return a.longDateFormat(e)||e}var t=5;for($t.lastIndex=0;t>=0&&$t.test(e);)e=e.replace($t,i),$t.lastIndex=0,t-=1;return e}function q(e,a,i){Tn[e]=w(a)?a:function(e){return e&&i?i:a}}function I(e,a){return r(Tn,e)?Tn[e](a._strict,a._locale):new RegExp(V(e))}function V(e){return H(e.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(e,a,i,t,n){return a||i||t||n}))}function H(e){return e.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}function U(e,a){var i,t=a;for("string"==typeof e&&(e=[e]),"number"==typeof a&&(t=function(e,i){i[a]=_(e)}),i=0;i<e.length;i++)Sn[e[i]]=t}function x(e,a){U(e,function(e,i,t,n){t._w=t._w||{},a(e,t._w,t,n)})}function F(e,a,i){null!=a&&r(Sn,e)&&Sn[e](a,i._a,i,e)}function K(e,a){return new Date(Date.UTC(e,a+1,0)).getUTCDate()}function j(e,a){return i(this._months)?this._months[e.month()]:this._months[kn.test(a)?"format":"standalone"][e.month()]}function X(e,a){return i(this._monthsShort)?this._monthsShort[e.month()]:this._monthsShort[kn.test(a)?"format":"standalone"][e.month()]}function J(e,a,i){var t,n,r;for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),t=0;12>t;t++){if(n=s([2e3,t]),i&&!this._longMonthsParse[t]&&(this._longMonthsParse[t]=new RegExp("^"+this.months(n,"").replace(".","")+"$","i"),this._shortMonthsParse[t]=new RegExp("^"+this.monthsShort(n,"").replace(".","")+"$","i")),i||this._monthsParse[t]||(r="^"+this.months(n,"")+"|^"+this.monthsShort(n,""),this._monthsParse[t]=new RegExp(r.replace(".",""),"i")),i&&"MMMM"===a&&this._longMonthsParse[t].test(e))return t;if(i&&"MMM"===a&&this._shortMonthsParse[t].test(e))return t;if(!i&&this._monthsParse[t].test(e))return t}}function Z(e,a){var i;return e.isValid()?"string"==typeof a&&(a=e.localeData().monthsParse(a),"number"!=typeof a)?e:(i=Math.min(e.date(),K(e.year(),a)),e._d["set"+(e._isUTC?"UTC":"")+"Month"](a,i),e):e}function Q(a){return null!=a?(Z(this,a),e.updateOffset(this,!0),this):k(this,"Month")}function $(){return K(this.year(),this.month())}function ea(e){return this._monthsParseExact?(r(this,"_monthsRegex")||ia.call(this),e?this._monthsShortStrictRegex:this._monthsShortRegex):this._monthsShortStrictRegex&&e?this._monthsShortStrictRegex:this._monthsShortRegex}function aa(e){return this._monthsParseExact?(r(this,"_monthsRegex")||ia.call(this),e?this._monthsStrictRegex:this._monthsRegex):this._monthsStrictRegex&&e?this._monthsStrictRegex:this._monthsRegex}function ia(){function e(e,a){return a.length-e.length}var a,i,t=[],n=[],r=[];for(a=0;12>a;a++)i=s([2e3,a]),t.push(this.monthsShort(i,"")),n.push(this.months(i,"")),r.push(this.months(i,"")),r.push(this.monthsShort(i,""));for(t.sort(e),n.sort(e),r.sort(e),a=0;12>a;a++)t[a]=H(t[a]),n[a]=H(n[a]),r[a]=H(r[a]);this._monthsRegex=new RegExp("^("+r.join("|")+")","i"),this._monthsShortRegex=this._monthsRegex,this._monthsStrictRegex=new RegExp("^("+n.join("|")+")$","i"),this._monthsShortStrictRegex=new RegExp("^("+t.join("|")+")$","i")}function ta(e){var a,i=e._a;return i&&-2===u(e).overflow&&(a=i[yn]<0||i[yn]>11?yn:i[En]<1||i[En]>K(i[bn],i[yn])?En:i[vn]<0||i[vn]>24||24===i[vn]&&(0!==i[Dn]||0!==i[zn]||0!==i[On])?vn:i[Dn]<0||i[Dn]>59?Dn:i[zn]<0||i[zn]>59?zn:i[On]<0||i[On]>999?On:-1,u(e)._overflowDayOfYear&&(bn>a||a>En)&&(a=En),u(e)._overflowWeeks&&-1===a&&(a=wn),u(e)._overflowWeekday&&-1===a&&(a=Cn),u(e).overflow=a),e}function na(a){e.suppressDeprecationWarnings===!1&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+a)}function ra(e,a){var i=!0;return o(function(){return i&&(na(e+"\nArguments: "+Array.prototype.slice.call(arguments).join(", ")+"\n"+(new Error).stack),i=!1),a.apply(this,arguments)},a)}function oa(e,a){Gn[e]||(na(a),Gn[e]=!0)}function sa(e){var a,i,t,n,r,o,s=e._i,c=Ln.exec(s)||Rn.exec(s);if(c){for(u(e).iso=!0,a=0,i=qn.length;i>a;a++)if(qn[a][1].exec(c[1])){n=qn[a][0],t=qn[a][2]!==!1;break}if(null==n)return e._isValid=!1,void 0;if(c[3]){for(a=0,i=In.length;i>a;a++)if(In[a][1].exec(c[3])){r=(c[2]||" ")+In[a][0];break}if(null==r)return e._isValid=!1,void 0}if(!t&&null!=r)return e._isValid=!1,void 0;if(c[4]){if(!Nn.exec(c[4]))return e._isValid=!1,void 0;o="Z"}e._f=n+(r||"")+(o||""),ba(e)}else e._isValid=!1}function ca(a){var i=Vn.exec(a._i);return null!==i?(a._d=new Date(+i[1]),void 0):(sa(a),a._isValid===!1&&(delete a._isValid,e.createFromInputFallback(a)),void 0)}function ua(e,a,i,t,n,r,o){var s=new Date(e,a,i,t,n,r,o);return 100>e&&e>=0&&isFinite(s.getFullYear())&&s.setFullYear(e),s}function la(e){var a=new Date(Date.UTC.apply(null,arguments));return 100>e&&e>=0&&isFinite(a.getUTCFullYear())&&a.setUTCFullYear(e),a}function da(e){return ma(e)?366:365}function ma(e){return e%4===0&&e%100!==0||e%400===0}function fa(){return ma(this.year())}function Aa(e,a,i){var t=7+a-i,n=(7+la(e,0,t).getUTCDay()-a)%7;return-n+t-1}function ha(e,a,i,t,n){var r,o,s=(7+i-t)%7,c=Aa(e,t,n),u=1+7*(a-1)+s+c;return 0>=u?(r=e-1,o=da(r)+u):u>da(e)?(r=e+1,o=u-da(e)):(r=e,o=u),{year:r,dayOfYear:o}}function pa(e,a,i){var t,n,r=Aa(e.year(),a,i),o=Math.floor((e.dayOfYear()-r-1)/7)+1;return 1>o?(n=e.year()-1,t=o+_a(n,a,i)):o>_a(e.year(),a,i)?(t=o-_a(e.year(),a,i),n=e.year()+1):(n=e.year(),t=o),{week:t,year:n}}function _a(e,a,i){var t=Aa(e,a,i),n=Aa(e+1,a,i);return(da(e)-t+n)/7}function Ma(e,a,i){return null!=e?e:null!=a?a:i}function ga(a){var i=new Date(e.now());return a._useUTC?[i.getUTCFullYear(),i.getUTCMonth(),i.getUTCDate()]:[i.getFullYear(),i.getMonth(),i.getDate()]}function Ta(e){var a,i,t,n,r=[];if(!e._d){for(t=ga(e),e._w&&null==e._a[En]&&null==e._a[yn]&&Sa(e),e._dayOfYear&&(n=Ma(e._a[bn],t[bn]),e._dayOfYear>da(n)&&(u(e)._overflowDayOfYear=!0),i=la(n,0,e._dayOfYear),e._a[yn]=i.getUTCMonth(),e._a[En]=i.getUTCDate()),a=0;3>a&&null==e._a[a];++a)e._a[a]=r[a]=t[a];for(;7>a;a++)e._a[a]=r[a]=null==e._a[a]?2===a?1:0:e._a[a];24===e._a[vn]&&0===e._a[Dn]&&0===e._a[zn]&&0===e._a[On]&&(e._nextDay=!0,e._a[vn]=0),e._d=(e._useUTC?la:ua).apply(null,r),null!=e._tzm&&e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),e._nextDay&&(e._a[vn]=24)}}function Sa(e){var a,i,t,n,r,o,s,c;a=e._w,null!=a.GG||null!=a.W||null!=a.E?(r=1,o=4,i=Ma(a.GG,e._a[bn],pa(Ca(),1,4).year),t=Ma(a.W,1),n=Ma(a.E,1),(1>n||n>7)&&(c=!0)):(r=e._locale._week.dow,o=e._locale._week.doy,i=Ma(a.gg,e._a[bn],pa(Ca(),r,o).year),t=Ma(a.w,1),null!=a.d?(n=a.d,(0>n||n>6)&&(c=!0)):null!=a.e?(n=a.e+r,(a.e<0||a.e>6)&&(c=!0)):n=r),1>t||t>_a(i,r,o)?u(e)._overflowWeeks=!0:null!=c?u(e)._overflowWeekday=!0:(s=ha(i,t,n,r,o),e._a[bn]=s.year,e._dayOfYear=s.dayOfYear)}function ba(a){if(a._f===e.ISO_8601)return sa(a),void 0;a._a=[],u(a).empty=!0;var i,t,n,r,o,s=""+a._i,c=s.length,l=0;for(n=N(a._f,a._locale).match(Qt)||[],i=0;i<n.length;i++)r=n[i],t=(s.match(I(r,a))||[])[0],t&&(o=s.substr(0,s.indexOf(t)),o.length>0&&u(a).unusedInput.push(o),s=s.slice(s.indexOf(t)+t.length),l+=t.length),an[r]?(t?u(a).empty=!1:u(a).unusedTokens.push(r),F(r,t,a)):a._strict&&!t&&u(a).unusedTokens.push(r);u(a).charsLeftOver=c-l,s.length>0&&u(a).unusedInput.push(s),u(a).bigHour===!0&&a._a[vn]<=12&&a._a[vn]>0&&(u(a).bigHour=void 0),a._a[vn]=ya(a._locale,a._a[vn],a._meridiem),Ta(a),ta(a)}function ya(e,a,i){var t;return null==i?a:null!=e.meridiemHour?e.meridiemHour(a,i):null!=e.isPM?(t=e.isPM(i),t&&12>a&&(a+=12),t||12!==a||(a=0),a):a}function Ea(e){var a,i,t,n,r;if(0===e._f.length)return u(e).invalidFormat=!0,e._d=new Date(0/0),void 0;for(n=0;n<e._f.length;n++)r=0,a=f({},e),null!=e._useUTC&&(a._useUTC=e._useUTC),a._f=e._f[n],ba(a),l(a)&&(r+=u(a).charsLeftOver,r+=10*u(a).unusedTokens.length,u(a).score=r,(null==t||t>r)&&(t=r,i=a));o(e,i||a)}function va(e){if(!e._d){var a=O(e._i);e._a=n([a.year,a.month,a.day||a.date,a.hour,a.minute,a.second,a.millisecond],function(e){return e&&parseInt(e,10)}),Ta(e)}}function Da(e){var a=new A(ta(za(e)));return a._nextDay&&(a.add(1,"d"),a._nextDay=void 0),a}function za(e){var a=e._i,n=e._f;return e._locale=e._locale||v(e._l),null===a||void 0===n&&""===a?d({nullInput:!0}):("string"==typeof a&&(e._i=a=e._locale.preparse(a)),h(a)?new A(ta(a)):(i(n)?Ea(e):n?ba(e):t(a)?e._d=a:Oa(e),l(e)||(e._d=null),e))}function Oa(a){var r=a._i;void 0===r?a._d=new Date(e.now()):t(r)?a._d=new Date(+r):"string"==typeof r?ca(a):i(r)?(a._a=n(r.slice(0),function(e){return parseInt(e,10)}),Ta(a)):"object"==typeof r?va(a):"number"==typeof r?a._d=new Date(r):e.createFromInputFallback(a)}function wa(e,a,i,t,n){var r={};return"boolean"==typeof i&&(t=i,i=void 0),r._isAMomentObject=!0,r._useUTC=r._isUTC=n,r._l=i,r._i=e,r._f=a,r._strict=t,Da(r)}function Ca(e,a,i,t){return wa(e,a,i,t,!1)}function ka(e,a){var t,n;if(1===a.length&&i(a[0])&&(a=a[0]),!a.length)return Ca();for(t=a[0],n=1;n<a.length;++n)(!a[n].isValid()||a[n][e](t))&&(t=a[n]);return t}function Pa(){var e=[].slice.call(arguments,0);return ka("isBefore",e)}function Wa(){var e=[].slice.call(arguments,0);return ka("isAfter",e)}function Ya(e){var a=O(e),i=a.year||0,t=a.quarter||0,n=a.month||0,r=a.week||0,o=a.day||0,s=a.hour||0,c=a.minute||0,u=a.second||0,l=a.millisecond||0;this._milliseconds=+l+1e3*u+6e4*c+36e5*s,this._days=+o+7*r,this._months=+n+3*t+12*i,this._data={},this._locale=v(),this._bubble()}function Ba(e){return e instanceof Ya}function Ga(e,a){B(e,0,0,function(){var e=this.utcOffset(),i="+";return 0>e&&(e=-e,i="-"),i+Y(~~(e/60),2)+a+Y(~~e%60,2)})}function La(e,a){var i=(a||"").match(e)||[],t=i[i.length-1]||[],n=(t+"").match(Kn)||["-",0,0],r=+(60*n[1])+_(n[2]);return"+"===n[0]?r:-r}function Ra(a,i){var n,r;return i._isUTC?(n=i.clone(),r=(h(a)||t(a)?+a:+Ca(a))-+n,n._d.setTime(+n._d+r),e.updateOffset(n,!1),n):Ca(a).local()}function Na(e){return 15*-Math.round(e._d.getTimezoneOffset()/15)}function qa(a,i){var t,n=this._offset||0;return this.isValid()?null!=a?("string"==typeof a?a=La(_n,a):Math.abs(a)<16&&(a=60*a),!this._isUTC&&i&&(t=Na(this)),this._offset=a,this._isUTC=!0,null!=t&&this.add(t,"m"),n!==a&&(!i||this._changeInProgress?ii(this,Za(a-n,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,e.updateOffset(this,!0),this._changeInProgress=null)),this):this._isUTC?n:Na(this):null!=a?this:0/0}function Ia(e,a){return null!=e?("string"!=typeof e&&(e=-e),this.utcOffset(e,a),this):-this.utcOffset()}function Va(e){return this.utcOffset(0,e)}function Ha(e){return this._isUTC&&(this.utcOffset(0,e),this._isUTC=!1,e&&this.subtract(Na(this),"m")),this}function Ua(){return this._tzm?this.utcOffset(this._tzm):"string"==typeof this._i&&this.utcOffset(La(pn,this._i)),this}function xa(e){return this.isValid()?(e=e?Ca(e).utcOffset():0,(this.utcOffset()-e)%60===0):!1}function Fa(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()}function Ka(){if(!m(this._isDSTShifted))return this._isDSTShifted;var e={};if(f(e,this),e=za(e),e._a){var a=e._isUTC?s(e._a):Ca(e._a);this._isDSTShifted=this.isValid()&&M(e._a,a.toArray())>0}else this._isDSTShifted=!1;return this._isDSTShifted}function ja(){return this.isValid()?!this._isUTC:!1}function Xa(){return this.isValid()?this._isUTC:!1}function Ja(){return this.isValid()?this._isUTC&&0===this._offset:!1}function Za(e,a){var i,t,n,o=e,s=null;return Ba(e)?o={ms:e._milliseconds,d:e._days,M:e._months}:"number"==typeof e?(o={},a?o[a]=e:o.milliseconds=e):(s=jn.exec(e))?(i="-"===s[1]?-1:1,o={y:0,d:_(s[En])*i,h:_(s[vn])*i,m:_(s[Dn])*i,s:_(s[zn])*i,ms:_(s[On])*i}):(s=Xn.exec(e))?(i="-"===s[1]?-1:1,o={y:Qa(s[2],i),M:Qa(s[3],i),d:Qa(s[4],i),h:Qa(s[5],i),m:Qa(s[6],i),s:Qa(s[7],i),w:Qa(s[8],i)}):null==o?o={}:"object"==typeof o&&("from"in o||"to"in o)&&(n=ei(Ca(o.from),Ca(o.to)),o={},o.ms=n.milliseconds,o.M=n.months),t=new Ya(o),Ba(e)&&r(e,"_locale")&&(t._locale=e._locale),t}function Qa(e,a){var i=e&&parseFloat(e.replace(",","."));return(isNaN(i)?0:i)*a}function $a(e,a){var i={milliseconds:0,months:0};return i.months=a.month()-e.month()+12*(a.year()-e.year()),e.clone().add(i.months,"M").isAfter(a)&&--i.months,i.milliseconds=+a-+e.clone().add(i.months,"M"),i}function ei(e,a){var i;return e.isValid()&&a.isValid()?(a=Ra(a,e),e.isBefore(a)?i=$a(e,a):(i=$a(a,e),i.milliseconds=-i.milliseconds,i.months=-i.months),i):{milliseconds:0,months:0}}function ai(e,a){return function(i,t){var n,r;return null===t||isNaN(+t)||(oa(a,"moment()."+a+"(period, number) is deprecated. Please use moment()."+a+"(number, period)."),r=i,i=t,t=r),i="string"==typeof i?+i:i,n=Za(i,t),ii(this,n,e),this}}function ii(a,i,t,n){var r=i._milliseconds,o=i._days,s=i._months;a.isValid()&&(n=null==n?!0:n,r&&a._d.setTime(+a._d+r*t),o&&P(a,"Date",k(a,"Date")+o*t),s&&Z(a,k(a,"Month")+s*t),n&&e.updateOffset(a,o||s))}function ti(e,a){var i=e||Ca(),t=Ra(i,this).startOf("day"),n=this.diff(t,"days",!0),r=-6>n?"sameElse":-1>n?"lastWeek":0>n?"lastDay":1>n?"sameDay":2>n?"nextDay":7>n?"nextWeek":"sameElse",o=a&&(w(a[r])?a[r]():a[r]);return this.format(o||this.localeData().calendar(r,this,Ca(i)))}function ni(){return new A(this)}function ri(e,a){var i=h(e)?e:Ca(e);return this.isValid()&&i.isValid()?(a=z(m(a)?"millisecond":a),"millisecond"===a?+this>+i:+i<+this.clone().startOf(a)):!1}function oi(e,a){var i=h(e)?e:Ca(e);return this.isValid()&&i.isValid()?(a=z(m(a)?"millisecond":a),"millisecond"===a?+i>+this:+this.clone().endOf(a)<+i):!1}function si(e,a,i){return this.isAfter(e,i)&&this.isBefore(a,i)}function ci(e,a){var i,t=h(e)?e:Ca(e);return this.isValid()&&t.isValid()?(a=z(a||"millisecond"),"millisecond"===a?+this===+t:(i=+t,+this.clone().startOf(a)<=i&&i<=+this.clone().endOf(a))):!1}function ui(e,a){return this.isSame(e,a)||this.isAfter(e,a)}function li(e,a){return this.isSame(e,a)||this.isBefore(e,a)}function di(e,a,i){var t,n,r,o;return this.isValid()?(t=Ra(e,this),t.isValid()?(n=6e4*(t.utcOffset()-this.utcOffset()),a=z(a),"year"===a||"month"===a||"quarter"===a?(o=mi(this,t),"quarter"===a?o/=3:"year"===a&&(o/=12)):(r=this-t,o="second"===a?r/1e3:"minute"===a?r/6e4:"hour"===a?r/36e5:"day"===a?(r-n)/864e5:"week"===a?(r-n)/6048e5:r),i?o:p(o)):0/0):0/0}function mi(e,a){var i,t,n=12*(a.year()-e.year())+(a.month()-e.month()),r=e.clone().add(n,"months");return 0>a-r?(i=e.clone().add(n-1,"months"),t=(a-r)/(r-i)):(i=e.clone().add(n+1,"months"),t=(a-r)/(i-r)),-(n+t)}function fi(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")}function Ai(){var e=this.clone().utc();return 0<e.year()&&e.year()<=9999?w(Date.prototype.toISOString)?this.toDate().toISOString():R(e,"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]"):R(e,"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]")}function hi(a){var i=R(this,a||e.defaultFormat);return this.localeData().postformat(i)}function pi(e,a){return this.isValid()&&(h(e)&&e.isValid()||Ca(e).isValid())?Za({to:this,from:e}).locale(this.locale()).humanize(!a):this.localeData().invalidDate()}function _i(e){return this.from(Ca(),e)}function Mi(e,a){return this.isValid()&&(h(e)&&e.isValid()||Ca(e).isValid())?Za({from:this,to:e}).locale(this.locale()).humanize(!a):this.localeData().invalidDate()}function gi(e){return this.to(Ca(),e)}function Ti(e){var a;return void 0===e?this._locale._abbr:(a=v(e),null!=a&&(this._locale=a),this)}function Si(){return this._locale}function bi(e){switch(e=z(e)){case"year":this.month(0);case"quarter":case"month":this.date(1);case"week":case"isoWeek":case"day":this.hours(0);case"hour":this.minutes(0);case"minute":this.seconds(0);case"second":this.milliseconds(0)}return"week"===e&&this.weekday(0),"isoWeek"===e&&this.isoWeekday(1),"quarter"===e&&this.month(3*Math.floor(this.month()/3)),this}function yi(e){return e=z(e),void 0===e||"millisecond"===e?this:this.startOf(e).add(1,"isoWeek"===e?"week":e).subtract(1,"ms")}function Ei(){return+this._d-6e4*(this._offset||0)}function vi(){return Math.floor(+this/1e3)}function Di(){return this._offset?new Date(+this):this._d}function zi(){var e=this;return[e.year(),e.month(),e.date(),e.hour(),e.minute(),e.second(),e.millisecond()]}function Oi(){var e=this;return{years:e.year(),months:e.month(),date:e.date(),hours:e.hours(),minutes:e.minutes(),seconds:e.seconds(),milliseconds:e.milliseconds()}}function wi(){return this.isValid()?this.toISOString():"null"}function Ci(){return l(this)}function ki(){return o({},u(this))}function Pi(){return u(this).overflow}function Wi(){return{input:this._i,format:this._f,locale:this._locale,isUTC:this._isUTC,strict:this._strict}}function Yi(e,a){B(0,[e,e.length],0,a)}function Bi(e){return Ni.call(this,e,this.week(),this.weekday(),this.localeData()._week.dow,this.localeData()._week.doy)}function Gi(e){return Ni.call(this,e,this.isoWeek(),this.isoWeekday(),1,4)}function Li(){return _a(this.year(),1,4)}function Ri(){var e=this.localeData()._week;return _a(this.year(),e.dow,e.doy)}function Ni(e,a,i,t,n){var r;return null==e?pa(this,t,n).year:(r=_a(e,t,n),a>r&&(a=r),qi.call(this,e,a,i,t,n))}function qi(e,a,i,t,n){var r=ha(e,a,i,t,n),o=la(r.year,0,r.dayOfYear);return this.year(o.getUTCFullYear()),this.month(o.getUTCMonth()),this.date(o.getUTCDate()),this}function Ii(e){return null==e?Math.ceil((this.month()+1)/3):this.month(3*(e-1)+this.month()%3)}function Vi(e){return pa(e,this._week.dow,this._week.doy).week}function Hi(){return this._week.dow}function Ui(){return this._week.doy}function xi(e){var a=this.localeData().week(this);return null==e?a:this.add(7*(e-a),"d")}function Fi(e){var a=pa(this,1,4).week;return null==e?a:this.add(7*(e-a),"d")}function Ki(e,a){return"string"!=typeof e?e:isNaN(e)?(e=a.weekdaysParse(e),"number"==typeof e?e:null):parseInt(e,10)}function ji(e,a){return i(this._weekdays)?this._weekdays[e.day()]:this._weekdays[this._weekdays.isFormat.test(a)?"format":"standalone"][e.day()]}function Xi(e){return this._weekdaysShort[e.day()]}function Ji(e){return this._weekdaysMin[e.day()]}function Zi(e,a,i){var t,n,r;for(this._weekdaysParse||(this._weekdaysParse=[],this._minWeekdaysParse=[],this._shortWeekdaysParse=[],this._fullWeekdaysParse=[]),t=0;7>t;t++){if(n=Ca([2e3,1]).day(t),i&&!this._fullWeekdaysParse[t]&&(this._fullWeekdaysParse[t]=new RegExp("^"+this.weekdays(n,"").replace(".",".?")+"$","i"),this._shortWeekdaysParse[t]=new RegExp("^"+this.weekdaysShort(n,"").replace(".",".?")+"$","i"),this._minWeekdaysParse[t]=new RegExp("^"+this.weekdaysMin(n,"").replace(".",".?")+"$","i")),this._weekdaysParse[t]||(r="^"+this.weekdays(n,"")+"|^"+this.weekdaysShort(n,"")+"|^"+this.weekdaysMin(n,""),this._weekdaysParse[t]=new RegExp(r.replace(".",""),"i")),i&&"dddd"===a&&this._fullWeekdaysParse[t].test(e))return t;if(i&&"ddd"===a&&this._shortWeekdaysParse[t].test(e))return t;if(i&&"dd"===a&&this._minWeekdaysParse[t].test(e))return t;if(!i&&this._weekdaysParse[t].test(e))return t}}function Qi(e){if(!this.isValid())return null!=e?this:0/0;var a=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=e?(e=Ki(e,this.localeData()),this.add(e-a,"d")):a}function $i(e){if(!this.isValid())return null!=e?this:0/0;var a=(this.day()+7-this.localeData()._week.dow)%7;return null==e?a:this.add(e-a,"d")}function et(e){return this.isValid()?null==e?this.day()||7:this.day(this.day()%7?e:e-7):null!=e?this:0/0}function at(e){var a=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return null==e?a:this.add(e-a,"d")}function it(){return this.hours()%12||12}function tt(e,a){B(e,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),a)})}function nt(e,a){return a._meridiemParse}function rt(e){return"p"===(e+"").toLowerCase().charAt(0)}function ot(e,a,i){return e>11?i?"pm":"PM":i?"am":"AM"}function st(e,a){a[On]=_(1e3*("0."+e))}function ct(){return this._isUTC?"UTC":""}function ut(){return this._isUTC?"Coordinated Universal Time":""}function lt(e){return Ca(1e3*e)}function dt(){return Ca.apply(null,arguments).parseZone()}function mt(e,a,i){var t=this._calendar[e];return w(t)?t.call(a,i):t}function ft(e){var a=this._longDateFormat[e],i=this._longDateFormat[e.toUpperCase()];return a||!i?a:(this._longDateFormat[e]=i.replace(/MMMM|MM|DD|dddd/g,function(e){return e.slice(1)}),this._longDateFormat[e])}function At(){return this._invalidDate}function ht(e){return this._ordinal.replace("%d",e)}function pt(e){return e}function _t(e,a,i,t){var n=this._relativeTime[i];return w(n)?n(e,a,i,t):n.replace(/%d/i,e)}function Mt(e,a){var i=this._relativeTime[e>0?"future":"past"];return w(i)?i(a):i.replace(/%s/i,a)}function gt(e){var a,i;for(i in e)a=e[i],w(a)?this[i]=a:this["_"+i]=a;this._ordinalParseLenient=new RegExp(this._ordinalParse.source+"|"+/\d{1,2}/.source)}function Tt(e,a,i,t){var n=v(),r=s().set(t,a);return n[i](r,e)}function St(e,a,i,t,n){if("number"==typeof e&&(a=e,e=void 0),e=e||"",null!=a)return Tt(e,a,i,n);var r,o=[];for(r=0;t>r;r++)o[r]=Tt(e,r,i,n);return o}function bt(e,a){return St(e,a,"months",12,"month")}function yt(e,a){return St(e,a,"monthsShort",12,"month")}function Et(e,a){return St(e,a,"weekdays",7,"day")}function vt(e,a){return St(e,a,"weekdaysShort",7,"day")}function Dt(e,a){return St(e,a,"weekdaysMin",7,"day")}function zt(){var e=this._data;return this._milliseconds=gr(this._milliseconds),this._days=gr(this._days),this._months=gr(this._months),e.milliseconds=gr(e.milliseconds),e.seconds=gr(e.seconds),e.minutes=gr(e.minutes),e.hours=gr(e.hours),e.months=gr(e.months),e.years=gr(e.years),this}function Ot(e,a,i,t){var n=Za(a,i);return e._milliseconds+=t*n._milliseconds,e._days+=t*n._days,e._months+=t*n._months,e._bubble()}function wt(e,a){return Ot(this,e,a,1)}function Ct(e,a){return Ot(this,e,a,-1)}function kt(e){return 0>e?Math.floor(e):Math.ceil(e)}function Pt(){var e,a,i,t,n,r=this._milliseconds,o=this._days,s=this._months,c=this._data;return r>=0&&o>=0&&s>=0||0>=r&&0>=o&&0>=s||(r+=864e5*kt(Yt(s)+o),o=0,s=0),c.milliseconds=r%1e3,e=p(r/1e3),c.seconds=e%60,a=p(e/60),c.minutes=a%60,i=p(a/60),c.hours=i%24,o+=p(i/24),n=p(Wt(o)),s+=n,o-=kt(Yt(n)),t=p(s/12),s%=12,c.days=o,c.months=s,c.years=t,this
}function Wt(e){return 4800*e/146097}function Yt(e){return 146097*e/4800}function Bt(e){var a,i,t=this._milliseconds;if(e=z(e),"month"===e||"year"===e)return a=this._days+t/864e5,i=this._months+Wt(a),"month"===e?i:i/12;switch(a=this._days+Math.round(Yt(this._months)),e){case"week":return a/7+t/6048e5;case"day":return a+t/864e5;case"hour":return 24*a+t/36e5;case"minute":return 1440*a+t/6e4;case"second":return 86400*a+t/1e3;case"millisecond":return Math.floor(864e5*a)+t;default:throw new Error("Unknown unit "+e)}}function Gt(){return this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*_(this._months/12)}function Lt(e){return function(){return this.as(e)}}function Rt(e){return e=z(e),this[e+"s"]()}function Nt(e){return function(){return this._data[e]}}function qt(){return p(this.days()/7)}function It(e,a,i,t,n){return n.relativeTime(a||1,!!i,e,t)}function Vt(e,a,i){var t=Za(e).abs(),n=Br(t.as("s")),r=Br(t.as("m")),o=Br(t.as("h")),s=Br(t.as("d")),c=Br(t.as("M")),u=Br(t.as("y")),l=n<Gr.s&&["s",n]||1>=r&&["m"]||r<Gr.m&&["mm",r]||1>=o&&["h"]||o<Gr.h&&["hh",o]||1>=s&&["d"]||s<Gr.d&&["dd",s]||1>=c&&["M"]||c<Gr.M&&["MM",c]||1>=u&&["y"]||["yy",u];return l[2]=a,l[3]=+e>0,l[4]=i,It.apply(null,l)}function Ht(e,a){return void 0===Gr[e]?!1:void 0===a?Gr[e]:(Gr[e]=a,!0)}function Ut(e){var a=this.localeData(),i=Vt(this,!e,a);return e&&(i=a.pastFuture(+this,i)),a.postformat(i)}function xt(){var e,a,i,t=Lr(this._milliseconds)/1e3,n=Lr(this._days),r=Lr(this._months);e=p(t/60),a=p(e/60),t%=60,e%=60,i=p(r/12),r%=12;var o=i,s=r,c=n,u=a,l=e,d=t,m=this.asSeconds();return m?(0>m?"-":"")+"P"+(o?o+"Y":"")+(s?s+"M":"")+(c?c+"D":"")+(u||l||d?"T":"")+(u?u+"H":"")+(l?l+"M":"")+(d?d+"S":""):"P0D"}var Ft,Kt,jt=e.momentProperties=[],Xt=!1,Jt={},Zt={},Qt=/(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,$t=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,en={},an={},tn=/\d/,nn=/\d\d/,rn=/\d{3}/,on=/\d{4}/,sn=/[+-]?\d{6}/,cn=/\d\d?/,un=/\d\d\d\d?/,ln=/\d\d\d\d\d\d?/,dn=/\d{1,3}/,mn=/\d{1,4}/,fn=/[+-]?\d{1,6}/,An=/\d+/,hn=/[+-]?\d+/,pn=/Z|[+-]\d\d:?\d\d/gi,_n=/Z|[+-]\d\d(?::?\d\d)?/gi,Mn=/[+-]?\d+(\.\d{1,3})?/,gn=/[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i,Tn={},Sn={},bn=0,yn=1,En=2,vn=3,Dn=4,zn=5,On=6,wn=7,Cn=8;B("M",["MM",2],"Mo",function(){return this.month()+1}),B("MMM",0,0,function(e){return this.localeData().monthsShort(this,e)}),B("MMMM",0,0,function(e){return this.localeData().months(this,e)}),D("month","M"),q("M",cn),q("MM",cn,nn),q("MMM",function(e,a){return a.monthsShortRegex(e)}),q("MMMM",function(e,a){return a.monthsRegex(e)}),U(["M","MM"],function(e,a){a[yn]=_(e)-1}),U(["MMM","MMMM"],function(e,a,i,t){var n=i._locale.monthsParse(e,t,i._strict);null!=n?a[yn]=n:u(i).invalidMonth=e});var kn=/D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/,Pn="January_February_March_April_May_June_July_August_September_October_November_December".split("_"),Wn="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),Yn=gn,Bn=gn,Gn={};e.suppressDeprecationWarnings=!1;var Ln=/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/,Rn=/^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/,Nn=/Z|[+-]\d\d(?::?\d\d)?/,qn=[["YYYYYY-MM-DD",/[+-]\d{6}-\d\d-\d\d/],["YYYY-MM-DD",/\d{4}-\d\d-\d\d/],["GGGG-[W]WW-E",/\d{4}-W\d\d-\d/],["GGGG-[W]WW",/\d{4}-W\d\d/,!1],["YYYY-DDD",/\d{4}-\d{3}/],["YYYY-MM",/\d{4}-\d\d/,!1],["YYYYYYMMDD",/[+-]\d{10}/],["YYYYMMDD",/\d{8}/],["GGGG[W]WWE",/\d{4}W\d{3}/],["GGGG[W]WW",/\d{4}W\d{2}/,!1],["YYYYDDD",/\d{7}/]],In=[["HH:mm:ss.SSSS",/\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss,SSSS",/\d\d:\d\d:\d\d,\d+/],["HH:mm:ss",/\d\d:\d\d:\d\d/],["HH:mm",/\d\d:\d\d/],["HHmmss.SSSS",/\d\d\d\d\d\d\.\d+/],["HHmmss,SSSS",/\d\d\d\d\d\d,\d+/],["HHmmss",/\d\d\d\d\d\d/],["HHmm",/\d\d\d\d/],["HH",/\d\d/]],Vn=/^\/?Date\((\-?\d+)/i;e.createFromInputFallback=ra("moment construction falls back to js Date. This is discouraged and will be removed in upcoming major release. Please refer to https://github.com/moment/moment/issues/1407 for more info.",function(e){e._d=new Date(e._i+(e._useUTC?" UTC":""))}),B("Y",0,0,function(){var e=this.year();return 9999>=e?""+e:"+"+e}),B(0,["YY",2],0,function(){return this.year()%100}),B(0,["YYYY",4],0,"year"),B(0,["YYYYY",5],0,"year"),B(0,["YYYYYY",6,!0],0,"year"),D("year","y"),q("Y",hn),q("YY",cn,nn),q("YYYY",mn,on),q("YYYYY",fn,sn),q("YYYYYY",fn,sn),U(["YYYYY","YYYYYY"],bn),U("YYYY",function(a,i){i[bn]=2===a.length?e.parseTwoDigitYear(a):_(a)}),U("YY",function(a,i){i[bn]=e.parseTwoDigitYear(a)}),U("Y",function(e,a){a[bn]=parseInt(e,10)}),e.parseTwoDigitYear=function(e){return _(e)+(_(e)>68?1900:2e3)};var Hn=C("FullYear",!1);e.ISO_8601=function(){};var Un=ra("moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548",function(){var e=Ca.apply(null,arguments);return this.isValid()&&e.isValid()?this>e?this:e:d()}),xn=ra("moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548",function(){var e=Ca.apply(null,arguments);return this.isValid()&&e.isValid()?e>this?this:e:d()}),Fn=function(){return Date.now?Date.now():+new Date};Ga("Z",":"),Ga("ZZ",""),q("Z",_n),q("ZZ",_n),U(["Z","ZZ"],function(e,a,i){i._useUTC=!0,i._tzm=La(_n,e)});var Kn=/([\+\-]|\d\d)/gi;e.updateOffset=function(){};var jn=/(\-)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/,Xn=/^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/;Za.fn=Ya.prototype;var Jn=ai(1,"add"),Zn=ai(-1,"subtract");e.defaultFormat="YYYY-MM-DDTHH:mm:ssZ";var Qn=ra("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",function(e){return void 0===e?this.localeData():this.locale(e)});B(0,["gg",2],0,function(){return this.weekYear()%100}),B(0,["GG",2],0,function(){return this.isoWeekYear()%100}),Yi("gggg","weekYear"),Yi("ggggg","weekYear"),Yi("GGGG","isoWeekYear"),Yi("GGGGG","isoWeekYear"),D("weekYear","gg"),D("isoWeekYear","GG"),q("G",hn),q("g",hn),q("GG",cn,nn),q("gg",cn,nn),q("GGGG",mn,on),q("gggg",mn,on),q("GGGGG",fn,sn),q("ggggg",fn,sn),x(["gggg","ggggg","GGGG","GGGGG"],function(e,a,i,t){a[t.substr(0,2)]=_(e)}),x(["gg","GG"],function(a,i,t,n){i[n]=e.parseTwoDigitYear(a)}),B("Q",0,"Qo","quarter"),D("quarter","Q"),q("Q",tn),U("Q",function(e,a){a[yn]=3*(_(e)-1)}),B("w",["ww",2],"wo","week"),B("W",["WW",2],"Wo","isoWeek"),D("week","w"),D("isoWeek","W"),q("w",cn),q("ww",cn,nn),q("W",cn),q("WW",cn,nn),x(["w","ww","W","WW"],function(e,a,i,t){a[t.substr(0,1)]=_(e)});var $n={dow:0,doy:6};B("D",["DD",2],"Do","date"),D("date","D"),q("D",cn),q("DD",cn,nn),q("Do",function(e,a){return e?a._ordinalParse:a._ordinalParseLenient}),U(["D","DD"],En),U("Do",function(e,a){a[En]=_(e.match(cn)[0],10)});var er=C("Date",!0);B("d",0,"do","day"),B("dd",0,0,function(e){return this.localeData().weekdaysMin(this,e)}),B("ddd",0,0,function(e){return this.localeData().weekdaysShort(this,e)}),B("dddd",0,0,function(e){return this.localeData().weekdays(this,e)}),B("e",0,0,"weekday"),B("E",0,0,"isoWeekday"),D("day","d"),D("weekday","e"),D("isoWeekday","E"),q("d",cn),q("e",cn),q("E",cn),q("dd",gn),q("ddd",gn),q("dddd",gn),x(["dd","ddd","dddd"],function(e,a,i,t){var n=i._locale.weekdaysParse(e,t,i._strict);null!=n?a.d=n:u(i).invalidWeekday=e}),x(["d","e","E"],function(e,a,i,t){a[t]=_(e)});var ar="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),ir="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),tr="Su_Mo_Tu_We_Th_Fr_Sa".split("_");B("DDD",["DDDD",3],"DDDo","dayOfYear"),D("dayOfYear","DDD"),q("DDD",dn),q("DDDD",rn),U(["DDD","DDDD"],function(e,a,i){i._dayOfYear=_(e)}),B("H",["HH",2],0,"hour"),B("h",["hh",2],0,it),B("hmm",0,0,function(){return""+it.apply(this)+Y(this.minutes(),2)}),B("hmmss",0,0,function(){return""+it.apply(this)+Y(this.minutes(),2)+Y(this.seconds(),2)}),B("Hmm",0,0,function(){return""+this.hours()+Y(this.minutes(),2)}),B("Hmmss",0,0,function(){return""+this.hours()+Y(this.minutes(),2)+Y(this.seconds(),2)}),tt("a",!0),tt("A",!1),D("hour","h"),q("a",nt),q("A",nt),q("H",cn),q("h",cn),q("HH",cn,nn),q("hh",cn,nn),q("hmm",un),q("hmmss",ln),q("Hmm",un),q("Hmmss",ln),U(["H","HH"],vn),U(["a","A"],function(e,a,i){i._isPm=i._locale.isPM(e),i._meridiem=e}),U(["h","hh"],function(e,a,i){a[vn]=_(e),u(i).bigHour=!0}),U("hmm",function(e,a,i){var t=e.length-2;a[vn]=_(e.substr(0,t)),a[Dn]=_(e.substr(t)),u(i).bigHour=!0}),U("hmmss",function(e,a,i){var t=e.length-4,n=e.length-2;a[vn]=_(e.substr(0,t)),a[Dn]=_(e.substr(t,2)),a[zn]=_(e.substr(n)),u(i).bigHour=!0}),U("Hmm",function(e,a){var i=e.length-2;a[vn]=_(e.substr(0,i)),a[Dn]=_(e.substr(i))}),U("Hmmss",function(e,a){var i=e.length-4,t=e.length-2;a[vn]=_(e.substr(0,i)),a[Dn]=_(e.substr(i,2)),a[zn]=_(e.substr(t))});var nr=/[ap]\.?m?\.?/i,rr=C("Hours",!0);B("m",["mm",2],0,"minute"),D("minute","m"),q("m",cn),q("mm",cn,nn),U(["m","mm"],Dn);var or=C("Minutes",!1);B("s",["ss",2],0,"second"),D("second","s"),q("s",cn),q("ss",cn,nn),U(["s","ss"],zn);var sr=C("Seconds",!1);B("S",0,0,function(){return~~(this.millisecond()/100)}),B(0,["SS",2],0,function(){return~~(this.millisecond()/10)}),B(0,["SSS",3],0,"millisecond"),B(0,["SSSS",4],0,function(){return 10*this.millisecond()}),B(0,["SSSSS",5],0,function(){return 100*this.millisecond()}),B(0,["SSSSSS",6],0,function(){return 1e3*this.millisecond()}),B(0,["SSSSSSS",7],0,function(){return 1e4*this.millisecond()}),B(0,["SSSSSSSS",8],0,function(){return 1e5*this.millisecond()}),B(0,["SSSSSSSSS",9],0,function(){return 1e6*this.millisecond()}),D("millisecond","ms"),q("S",dn,tn),q("SS",dn,nn),q("SSS",dn,rn);var cr;for(cr="SSSS";cr.length<=9;cr+="S")q(cr,An);for(cr="S";cr.length<=9;cr+="S")U(cr,st);var ur=C("Milliseconds",!1);B("z",0,0,"zoneAbbr"),B("zz",0,0,"zoneName");var lr=A.prototype;lr.add=Jn,lr.calendar=ti,lr.clone=ni,lr.diff=di,lr.endOf=yi,lr.format=hi,lr.from=pi,lr.fromNow=_i,lr.to=Mi,lr.toNow=gi,lr.get=W,lr.invalidAt=Pi,lr.isAfter=ri,lr.isBefore=oi,lr.isBetween=si,lr.isSame=ci,lr.isSameOrAfter=ui,lr.isSameOrBefore=li,lr.isValid=Ci,lr.lang=Qn,lr.locale=Ti,lr.localeData=Si,lr.max=xn,lr.min=Un,lr.parsingFlags=ki,lr.set=W,lr.startOf=bi,lr.subtract=Zn,lr.toArray=zi,lr.toObject=Oi,lr.toDate=Di,lr.toISOString=Ai,lr.toJSON=wi,lr.toString=fi,lr.unix=vi,lr.valueOf=Ei,lr.creationData=Wi,lr.year=Hn,lr.isLeapYear=fa,lr.weekYear=Bi,lr.isoWeekYear=Gi,lr.quarter=lr.quarters=Ii,lr.month=Q,lr.daysInMonth=$,lr.week=lr.weeks=xi,lr.isoWeek=lr.isoWeeks=Fi,lr.weeksInYear=Ri,lr.isoWeeksInYear=Li,lr.date=er,lr.day=lr.days=Qi,lr.weekday=$i,lr.isoWeekday=et,lr.dayOfYear=at,lr.hour=lr.hours=rr,lr.minute=lr.minutes=or,lr.second=lr.seconds=sr,lr.millisecond=lr.milliseconds=ur,lr.utcOffset=qa,lr.utc=Va,lr.local=Ha,lr.parseZone=Ua,lr.hasAlignedHourOffset=xa,lr.isDST=Fa,lr.isDSTShifted=Ka,lr.isLocal=ja,lr.isUtcOffset=Xa,lr.isUtc=Ja,lr.isUTC=Ja,lr.zoneAbbr=ct,lr.zoneName=ut,lr.dates=ra("dates accessor is deprecated. Use date instead.",er),lr.months=ra("months accessor is deprecated. Use month instead",Q),lr.years=ra("years accessor is deprecated. Use year instead",Hn),lr.zone=ra("moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779",Ia);var dr=lr,mr={sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},fr={LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},Ar="Invalid date",hr="%d",pr=/\d{1,2}/,_r={future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},Mr=g.prototype;Mr._calendar=mr,Mr.calendar=mt,Mr._longDateFormat=fr,Mr.longDateFormat=ft,Mr._invalidDate=Ar,Mr.invalidDate=At,Mr._ordinal=hr,Mr.ordinal=ht,Mr._ordinalParse=pr,Mr.preparse=pt,Mr.postformat=pt,Mr._relativeTime=_r,Mr.relativeTime=_t,Mr.pastFuture=Mt,Mr.set=gt,Mr.months=j,Mr._months=Pn,Mr.monthsShort=X,Mr._monthsShort=Wn,Mr.monthsParse=J,Mr._monthsRegex=Bn,Mr.monthsRegex=aa,Mr._monthsShortRegex=Yn,Mr.monthsShortRegex=ea,Mr.week=Vi,Mr._week=$n,Mr.firstDayOfYear=Ui,Mr.firstDayOfWeek=Hi,Mr.weekdays=ji,Mr._weekdays=ar,Mr.weekdaysMin=Ji,Mr._weekdaysMin=tr,Mr.weekdaysShort=Xi,Mr._weekdaysShort=ir,Mr.weekdaysParse=Zi,Mr.isPM=rt,Mr._meridiemParse=nr,Mr.meridiem=ot,y("en",{ordinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var a=e%10,i=1===_(e%100/10)?"th":1===a?"st":2===a?"nd":3===a?"rd":"th";return e+i}}),e.lang=ra("moment.lang is deprecated. Use moment.locale instead.",y),e.langData=ra("moment.langData is deprecated. Use moment.localeData instead.",v);var gr=Math.abs,Tr=Lt("ms"),Sr=Lt("s"),br=Lt("m"),yr=Lt("h"),Er=Lt("d"),vr=Lt("w"),Dr=Lt("M"),zr=Lt("y"),Or=Nt("milliseconds"),wr=Nt("seconds"),Cr=Nt("minutes"),kr=Nt("hours"),Pr=Nt("days"),Wr=Nt("months"),Yr=Nt("years"),Br=Math.round,Gr={s:45,m:45,h:22,d:26,M:11},Lr=Math.abs,Rr=Ya.prototype;Rr.abs=zt,Rr.add=wt,Rr.subtract=Ct,Rr.as=Bt,Rr.asMilliseconds=Tr,Rr.asSeconds=Sr,Rr.asMinutes=br,Rr.asHours=yr,Rr.asDays=Er,Rr.asWeeks=vr,Rr.asMonths=Dr,Rr.asYears=zr,Rr.valueOf=Gt,Rr._bubble=Pt,Rr.get=Rt,Rr.milliseconds=Or,Rr.seconds=wr,Rr.minutes=Cr,Rr.hours=kr,Rr.days=Pr,Rr.weeks=qt,Rr.months=Wr,Rr.years=Yr,Rr.humanize=Ut,Rr.toISOString=xt,Rr.toString=xt,Rr.toJSON=xt,Rr.locale=Ti,Rr.localeData=Si,Rr.toIsoString=ra("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",xt),Rr.lang=Qn,B("X",0,0,"unix"),B("x",0,0,"valueOf"),q("x",hn),q("X",Mn),U("X",function(e,a,i){i._d=new Date(1e3*parseFloat(e,10))}),U("x",function(e,a,i){i._d=new Date(_(e))}),e.version="2.11.1",a(Ca),e.fn=dr,e.min=Pa,e.max=Wa,e.now=Fn,e.utc=s,e.unix=lt,e.months=bt,e.isDate=t,e.locale=y,e.invalid=d,e.duration=Za,e.isMoment=h,e.weekdays=Et,e.parseZone=dt,e.localeData=v,e.isDuration=Ba,e.monthsShort=yt,e.weekdaysMin=Dt,e.defineLocale=E,e.weekdaysShort=vt,e.normalizeUnits=z,e.relativeTimeThreshold=Ht,e.prototype=dr;var Nr=e;return Nr}),function(e,a){"use strict";"function"==typeof define&&define.amd?define(["moment"],a):"object"==typeof module&&module.exports?module.exports=a(require("moment")):a(e.moment)}(this,function(e){"use strict";function a(e){return e>96?e-87:e>64?e-29:e-48}function i(e){var i,t=0,n=e.split("."),r=n[0],o=n[1]||"",s=1,c=0,u=1;for(45===e.charCodeAt(0)&&(t=1,u=-1),t;t<r.length;t++)i=a(r.charCodeAt(t)),c=60*c+i;for(t=0;t<o.length;t++)s/=60,i=a(o.charCodeAt(t)),c+=i*s;return c*u}function t(e){for(var a=0;a<e.length;a++)e[a]=i(e[a])}function n(e,a){for(var i=0;a>i;i++)e[i]=Math.round((e[i-1]||0)+6e4*e[i]);e[a-1]=1/0}function r(e,a){var i,t=[];for(i=0;i<a.length;i++)t[i]=e[a[i]];return t}function o(e){var a=e.split("|"),i=a[2].split(" "),o=a[3].split(""),s=a[4].split(" ");return t(i),t(o),t(s),n(s,o.length),{name:a[0],abbrs:r(a[1].split(" "),o),offsets:r(i,o),untils:s,population:0|a[5]}}function s(e){e&&this._set(o(e))}function c(e){var a=e.toTimeString(),i=a.match(/\(.+\)/);i=i&&i[0]?i[0].match(/[A-Z]/g).join(""):a.match(/[A-Z]{3,5}/g)[0],"GMT"===i&&(i=void 0),this.at=+e,this.abbr=i,this.offset=e.getTimezoneOffset()}function u(e){this.zone=e,this.offsetScore=0,this.abbrScore=0}function l(e,a){for(var i,t;t=6e4*((a.at-e.at)/12e4|0);)i=new c(new Date(e.at+t)),i.offset===e.offset?e=i:a=i;return e}function d(){var e,a,i,t=(new Date).getFullYear()-2,n=new c(new Date(t,0,1)),r=[n];for(i=1;48>i;i++)a=new c(new Date(t,i,1)),a.offset!==n.offset&&(e=l(n,a),r.push(e),r.push(new c(new Date(e.at+6e4)))),n=a;for(i=0;4>i;i++)r.push(new c(new Date(t+i,0,1))),r.push(new c(new Date(t+i,6,1)));return r}function m(e,a){return e.offsetScore!==a.offsetScore?e.offsetScore-a.offsetScore:e.abbrScore!==a.abbrScore?e.abbrScore-a.abbrScore:a.zone.population-e.zone.population}function f(e,a){var i,n;for(t(a),i=0;i<a.length;i++)n=a[i],Y[n]=Y[n]||{},Y[n][e]=!0}function A(e){var a,i,t,n=e.length,r={},o=[];for(a=0;n>a;a++){t=Y[e[a].offset]||{};for(i in t)t.hasOwnProperty(i)&&(r[i]=!0)}for(a in r)r.hasOwnProperty(a)&&o.push(W[a]);return o}function h(){var e,a,i,t=d(),n=t.length,r=A(t),o=[];for(a=0;a<r.length;a++){for(e=new u(g(r[a]),n),i=0;n>i;i++)e.scoreOffsetAt(t[i]);o.push(e)}return o.sort(m),o.length>0?o[0].zone.name:void 0}function p(e){return(!w||e)&&(w=h()),w}function _(e){return(e||"").toLowerCase().replace(/\//g,"_")}function M(e){var a,i,t,n;for("string"==typeof e&&(e=[e]),a=0;a<e.length;a++)t=e[a].split("|"),i=t[0],n=_(i),k[n]=e[a],W[n]=i,t[5]&&f(n,t[2].split(" "))}function g(e,a){e=_(e);var i,t=k[e];return t instanceof s?t:"string"==typeof t?(t=new s(t),k[e]=t,t):P[e]&&a!==g&&(i=g(P[e],g))?(t=k[e]=new s,t._set(i),t.name=W[e],t):null}function T(){var e,a=[];for(e in W)W.hasOwnProperty(e)&&(k[e]||k[P[e]])&&W[e]&&a.push(W[e]);return a.sort()}function S(e){var a,i,t,n;for("string"==typeof e&&(e=[e]),a=0;a<e.length;a++)i=e[a].split("|"),t=_(i[0]),n=_(i[1]),P[t]=n,W[t]=i[0],P[n]=t,W[n]=i[1]}function b(e){M(e.zones),S(e.links),D.dataVersion=e.version}function y(e){return y.didShowError||(y.didShowError=!0,v("moment.tz.zoneExists('"+e+"') has been deprecated in favor of !moment.tz.zone('"+e+"')")),!!g(e)}function E(e){return!(!e._a||void 0!==e._tzm)}function v(e){"undefined"!=typeof console&&"function"==typeof console.error&&console.error(e)}function D(a){var i=Array.prototype.slice.call(arguments,0,-1),t=arguments[arguments.length-1],n=g(t),r=e.utc.apply(null,i);return n&&!e.isMoment(a)&&E(r)&&r.add(n.parse(r),"minutes"),r.tz(t),r}function z(e){return function(){return this._z?this._z.abbr(this):e.call(this)}}function O(e){return function(){return this._z=null,e.apply(this,arguments)}}if(void 0!==e.tz)return v("Moment Timezone "+e.tz.version+" was already loaded "+(e.tz.dataVersion?"with data from ":"without any data")+e.tz.dataVersion),e;var w,C="0.5.0",k={},P={},W={},Y={},B=e.version.split("."),G=+B[0],L=+B[1];(2>G||2===G&&6>L)&&v("Moment Timezone requires Moment.js >= 2.6.0. You are using Moment.js "+e.version+". See momentjs.com"),s.prototype={_set:function(e){this.name=e.name,this.abbrs=e.abbrs,this.untils=e.untils,this.offsets=e.offsets,this.population=e.population},_index:function(e){var a,i=+e,t=this.untils;for(a=0;a<t.length;a++)if(i<t[a])return a},parse:function(e){var a,i,t,n,r=+e,o=this.offsets,s=this.untils,c=s.length-1;for(n=0;c>n;n++)if(a=o[n],i=o[n+1],t=o[n?n-1:n],i>a&&D.moveAmbiguousForward?a=i:a>t&&D.moveInvalidForward&&(a=t),r<s[n]-6e4*a)return o[n];return o[c]},abbr:function(e){return this.abbrs[this._index(e)]},offset:function(e){return this.offsets[this._index(e)]}},u.prototype.scoreOffsetAt=function(e){this.offsetScore+=Math.abs(this.zone.offset(e.at)-e.offset),this.zone.abbr(e.at).match(/[A-Z]/g).join("")!==e.abbr&&this.abbrScore++},D.version=C,D.dataVersion="",D._zones=k,D._links=P,D._names=W,D.add=M,D.link=S,D.load=b,D.zone=g,D.zoneExists=y,D.guess=p,D.names=T,D.Zone=s,D.unpack=o,D.unpackBase60=i,D.needsOffset=E,D.moveInvalidForward=!0,D.moveAmbiguousForward=!1;var R=e.fn;e.tz=D,e.defaultZone=null,e.updateOffset=function(a,i){var t,n=e.defaultZone;void 0===a._z&&(n&&E(a)&&!a._isUTC&&(a._d=e.utc(a._a)._d,a.utc().add(n.parse(a),"minutes")),a._z=n),a._z&&(t=a._z.offset(a),Math.abs(t)<16&&(t/=60),void 0!==a.utcOffset?a.utcOffset(-t,i):a.zone(t,i))},R.tz=function(a){return a?(this._z=g(a),this._z?e.updateOffset(this):v("Moment Timezone has no data for "+a+". See http://momentjs.com/timezone/docs/#/data-loading/."),this):this._z?this._z.name:void 0},R.zoneName=z(R.zoneName),R.zoneAbbr=z(R.zoneAbbr),R.utc=O(R.utc),e.tz.setDefault=function(a){return(2>G||2===G&&9>L)&&v("Moment Timezone setDefault() requires Moment.js >= 2.9.0. You are using Moment.js "+e.version+"."),e.defaultZone=a?g(a):null,e};var N=e.momentProperties;return"[object Array]"===Object.prototype.toString.call(N)?(N.push("_z"),N.push("_a")):N&&(N._z=null),b({version:"2015g",zones:["Africa/Abidjan|GMT|0|0||48e5","Africa/Khartoum|EAT|-30|0||51e5","Africa/Algiers|CET|-10|0||26e5","Africa/Lagos|WAT|-10|0||17e6","Africa/Maputo|CAT|-20|0||26e5","Africa/Cairo|EET EEST|-20 -30|010101010|1Cby0 Fb0 c10 8n0 8Nd0 gL0 e10 mn0|15e6","Africa/Casablanca|WET WEST|0 -10|01010101010101010101010101010101010101010|1Cco0 Db0 1zd0 Lz0 1Nf0 wM0 co0 go0 1o00 s00 dA0 vc0 11A0 A00 e00 y00 11A0 uM0 e00 Dc0 11A0 s00 e00 IM0 WM0 mo0 gM0 LA0 WM0 jA0 e00 Rc0 11A0 e00 e00 U00 11A0 8o0 e00 11A0|32e5","Europe/Paris|CET CEST|-10 -20|01010101010101010101010|1BWp0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|11e6","Africa/Johannesburg|SAST|-20|0||84e5","Africa/Tripoli|EET CET CEST|-20 -10 -20|0120|1IlA0 TA0 1o00|11e5","Africa/Windhoek|WAST WAT|-20 -10|01010101010101010101010|1C1c0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0|32e4","America/Adak|HST HDT|a0 90|01010101010101010101010|1BR00 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|326","America/Anchorage|AKST AKDT|90 80|01010101010101010101010|1BQX0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|30e4","America/Santo_Domingo|AST|40|0||29e5","America/Araguaina|BRT BRST|30 20|010|1IdD0 Lz0|14e4","America/Argentina/Buenos_Aires|ART|30|0|","America/Asuncion|PYST PYT|30 40|01010101010101010101010|1C430 1a10 1fz0 1a10 1fz0 1cN0 17b0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1ip0 17b0 1ip0 17b0 1ip0|28e5","America/Panama|EST|50|0||15e5","America/Bahia|BRT BRST|30 20|010|1FJf0 Rb0|27e5","America/Bahia_Banderas|MST CDT CST|70 50 60|01212121212121212121212|1C1l0 1nW0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|84e3","America/Fortaleza|BRT|30|0||34e5","America/Managua|CST|60|0||22e5","America/Manaus|AMT|40|0||19e5","America/Bogota|COT|50|0||90e5","America/Denver|MST MDT|70 60|01010101010101010101010|1BQV0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|26e5","America/Campo_Grande|AMST AMT|30 40|01010101010101010101010|1BIr0 1zd0 On0 1zd0 Rb0 1zd0 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1C10 Lz0 1C10 Lz0 1C10|77e4","America/Cancun|CST CDT EST|60 50 50|010101010102|1C1k0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 Dd0|63e4","America/Caracas|VET|4u|0||29e5","America/Cayenne|GFT|30|0||58e3","America/Cayman|EST EDT|50 40|01010101010|1Qtj0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|58e3","America/Chicago|CST CDT|60 50|01010101010101010101010|1BQU0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|92e5","America/Chihuahua|MST MDT|70 60|01010101010101010101010|1C1l0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|81e4","America/Phoenix|MST|70|0||42e5","America/Los_Angeles|PST PDT|80 70|01010101010101010101010|1BQW0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|15e6","America/New_York|EST EDT|50 40|01010101010101010101010|1BQT0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|21e6","America/Rio_Branco|AMT ACT|40 50|01|1KLE0|31e4","America/Fort_Nelson|PST PDT MST|80 70 70|010101010102|1BQW0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0|39e2","America/Halifax|AST ADT|40 30|01010101010101010101010|1BQS0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|39e4","America/Godthab|WGT WGST|30 20|01010101010101010101010|1BWp0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|17e3","America/Goose_Bay|AST ADT|40 30|01010101010101010101010|1BQQ1 1zb0 Op0 1zcX Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|76e2","America/Grand_Turk|EST EDT AST|50 40 40|0101010101012|1BQT0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|37e2","America/Guayaquil|ECT|50|0||27e5","America/Guyana|GYT|40|0||80e4","America/Havana|CST CDT|50 40|01010101010101010101010|1BQR0 1wo0 U00 1zc0 U00 1qM0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0|21e5","America/La_Paz|BOT|40|0||19e5","America/Lima|PET|50|0||11e6","America/Mexico_City|CST CDT|60 50|01010101010101010101010|1C1k0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|20e6","America/Metlakatla|PST|80|0||14e2","America/Miquelon|PMST PMDT|30 20|01010101010101010101010|1BQR0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|61e2","America/Montevideo|UYST UYT|20 30|010101010101|1BQQ0 1ld0 14n0 1ld0 14n0 1o10 11z0 1o10 11z0 1o10 11z0|17e5","America/Noronha|FNT|20|0||30e2","America/North_Dakota/Beulah|MST MDT CST CDT|70 60 60 50|01232323232323232323232|1BQV0 1zb0 Oo0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0","America/Paramaribo|SRT|30|0||24e4","America/Port-au-Prince|EST EDT|50 40|0101010101010101010|1GI70 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|23e5","America/Santa_Isabel|PST PDT|80 70|01010101010101010101010|1C1m0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|23e3","America/Santiago|CLST CLT CLT|30 40 30|010101010102|1C1f0 1fB0 1nX0 G10 1EL0 Op0 1zb0 Rd0 1wn0 Rd0 1wn0|62e5","America/Sao_Paulo|BRST BRT|20 30|01010101010101010101010|1BIq0 1zd0 On0 1zd0 Rb0 1zd0 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1C10 Lz0 1C10 Lz0 1C10|20e6","America/Scoresbysund|EGT EGST|10 0|01010101010101010101010|1BWp0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|452","America/St_Johns|NST NDT|3u 2u|01010101010101010101010|1BQPv 1zb0 Op0 1zcX Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|11e4","Antarctica/Casey|CAST AWST|-b0 -80|0101|1BN30 40P0 KL0|10","Antarctica/Davis|DAVT DAVT|-50 -70|0101|1BPw0 3Wn0 KN0|70","Antarctica/DumontDUrville|DDUT|-a0|0||80","Antarctica/Macquarie|AEDT MIST|-b0 -b0|01|1C140|1","Antarctica/Mawson|MAWT|-50|0||60","Pacific/Auckland|NZDT NZST|-d0 -c0|01010101010101010101010|1C120 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00|14e5","Antarctica/Rothera|ROTT|30|0||130","Antarctica/Syowa|SYOT|-30|0||20","Antarctica/Troll|UTC CEST|0 -20|01010101010101010101010|1BWp0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|40","Antarctica/Vostok|VOST|-60|0||25","Asia/Baghdad|AST|-30|0||66e5","Asia/Almaty|ALMT|-60|0||15e5","Asia/Amman|EET EEST|-20 -30|010101010101010101010|1BVy0 1qM0 11A0 1o00 11A0 4bX0 Dd0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0|25e5","Asia/Anadyr|ANAT ANAST ANAT|-c0 -c0 -b0|0120|1BWe0 1qN0 WM0|13e3","Asia/Aqtobe|AQTT|-50|0||27e4","Asia/Ashgabat|TMT|-50|0||41e4","Asia/Baku|AZT AZST|-40 -50|01010101010101010101010|1BWo0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|27e5","Asia/Bangkok|ICT|-70|0||15e6","Asia/Beirut|EET EEST|-20 -30|01010101010101010101010|1BWm0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0|22e5","Asia/Bishkek|KGT|-60|0||87e4","Asia/Brunei|BNT|-80|0||42e4","Asia/Kolkata|IST|-5u|0||15e6","Asia/Chita|YAKT YAKST YAKT IRKT|-90 -a0 -a0 -80|01023|1BWh0 1qM0 WM0 8Hz0|33e4","Asia/Choibalsan|CHOT CHOST|-80 -90|0101010101010|1O8G0 1cJ0 1cP0 1cJ0 1cP0 1fx0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0|38e3","Asia/Shanghai|CST|-80|0||23e6","Asia/Dhaka|BDT|-60|0||16e6","Asia/Damascus|EET EEST|-20 -30|01010101010101010101010|1C0m0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0|26e5","Asia/Dili|TLT|-90|0||19e4","Asia/Dubai|GST|-40|0||39e5","Asia/Dushanbe|TJT|-50|0||76e4","Asia/Gaza|EET EEST|-20 -30|01010101010101010101010|1BVW1 SKX 1xd1 MKX 1AN0 1a00 1fA0 1cL0 1cN0 1nX0 1210 1nz0 1210 1nz0 14N0 1nz0 1210 1nz0 1210 1nz0 1210 1nz0|18e5","Asia/Hebron|EET EEST|-20 -30|0101010101010101010101010|1BVy0 Tb0 1xd1 MKX bB0 cn0 1cN0 1a00 1fA0 1cL0 1cN0 1nX0 1210 1nz0 1210 1nz0 14N0 1nz0 1210 1nz0 1210 1nz0 1210 1nz0|25e4","Asia/Hong_Kong|HKT|-80|0||73e5","Asia/Hovd|HOVT HOVST|-70 -80|0101010101010|1O8H0 1cJ0 1cP0 1cJ0 1cP0 1fx0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0|81e3","Asia/Irkutsk|IRKT IRKST IRKT|-80 -90 -90|01020|1BWi0 1qM0 WM0 8Hz0|60e4","Europe/Istanbul|EET EEST|-20 -30|01010101010101010101010|1BWp0 1qM0 Xc0 1qo0 WM0 1qM0 11A0 1o00 1200 1nA0 11A0 1tA0 U00 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|13e6","Asia/Jakarta|WIB|-70|0||31e6","Asia/Jayapura|WIT|-90|0||26e4","Asia/Jerusalem|IST IDT|-20 -30|01010101010101010101010|1BVA0 17X0 1kp0 1dz0 1c10 1aL0 1eN0 1oL0 10N0 1oL0 10N0 1oL0 10N0 1rz0 W10 1rz0 W10 1rz0 10N0 1oL0 10N0 1oL0|81e4","Asia/Kabul|AFT|-4u|0||46e5","Asia/Kamchatka|PETT PETST PETT|-c0 -c0 -b0|0120|1BWe0 1qN0 WM0|18e4","Asia/Karachi|PKT|-50|0||24e6","Asia/Urumqi|XJT|-60|0||32e5","Asia/Kathmandu|NPT|-5J|0||12e5","Asia/Khandyga|VLAT VLAST VLAT YAKT YAKT|-a0 -b0 -b0 -a0 -90|010234|1BWg0 1qM0 WM0 17V0 7zD0|66e2","Asia/Krasnoyarsk|KRAT KRAST KRAT|-70 -80 -80|01020|1BWj0 1qM0 WM0 8Hz0|10e5","Asia/Kuala_Lumpur|MYT|-80|0||71e5","Asia/Magadan|MAGT MAGST MAGT MAGT|-b0 -c0 -c0 -a0|01023|1BWf0 1qM0 WM0 8Hz0|95e3","Asia/Makassar|WITA|-80|0||15e5","Asia/Manila|PHT|-80|0||24e6","Europe/Athens|EET EEST|-20 -30|01010101010101010101010|1BWp0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|35e5","Asia/Novokuznetsk|KRAT NOVST NOVT NOVT|-70 -70 -60 -70|01230|1BWj0 1qN0 WM0 8Hz0|55e4","Asia/Novosibirsk|NOVT NOVST NOVT|-60 -70 -70|01020|1BWk0 1qM0 WM0 8Hz0|15e5","Asia/Omsk|OMST OMSST OMST|-60 -70 -70|01020|1BWk0 1qM0 WM0 8Hz0|12e5","Asia/Oral|ORAT|-50|0||27e4","Asia/Pyongyang|KST KST|-90 -8u|01|1P4D0|29e5","Asia/Qyzylorda|QYZT|-60|0||73e4","Asia/Rangoon|MMT|-6u|0||48e5","Asia/Sakhalin|SAKT SAKST SAKT|-a0 -b0 -b0|01020|1BWg0 1qM0 WM0 8Hz0|58e4","Asia/Tashkent|UZT|-50|0||23e5","Asia/Seoul|KST|-90|0||23e6","Asia/Singapore|SGT|-80|0||56e5","Asia/Srednekolymsk|MAGT MAGST MAGT SRET|-b0 -c0 -c0 -b0|01023|1BWf0 1qM0 WM0 8Hz0|35e2","Asia/Tbilisi|GET|-40|0||11e5","Asia/Tehran|IRST IRDT|-3u -4u|01010101010101010101010|1BTUu 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0|14e6","Asia/Thimphu|BTT|-60|0||79e3","Asia/Tokyo|JST|-90|0||38e6","Asia/Ulaanbaatar|ULAT ULAST|-80 -90|0101010101010|1O8G0 1cJ0 1cP0 1cJ0 1cP0 1fx0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0|12e5","Asia/Ust-Nera|MAGT MAGST MAGT VLAT VLAT|-b0 -c0 -c0 -b0 -a0|010234|1BWf0 1qM0 WM0 17V0 7zD0|65e2","Asia/Vladivostok|VLAT VLAST VLAT|-a0 -b0 -b0|01020|1BWg0 1qM0 WM0 8Hz0|60e4","Asia/Yakutsk|YAKT YAKST YAKT|-90 -a0 -a0|01020|1BWh0 1qM0 WM0 8Hz0|28e4","Asia/Yekaterinburg|YEKT YEKST YEKT|-50 -60 -60|01020|1BWl0 1qM0 WM0 8Hz0|14e5","Asia/Yerevan|AMT AMST|-40 -50|01010|1BWm0 1qM0 WM0 1qM0|13e5","Atlantic/Azores|AZOT AZOST|10 0|01010101010101010101010|1BWp0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|25e4","Europe/Lisbon|WET WEST|0 -10|01010101010101010101010|1BWp0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|27e5","Atlantic/Cape_Verde|CVT|10|0||50e4","Atlantic/South_Georgia|GST|20|0||30","Atlantic/Stanley|FKST FKT|30 40|010|1C6R0 U10|21e2","Australia/Sydney|AEDT AEST|-b0 -a0|01010101010101010101010|1C140 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|40e5","Australia/Adelaide|ACDT ACST|-au -9u|01010101010101010101010|1C14u 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|11e5","Australia/Brisbane|AEST|-a0|0||20e5","Australia/Darwin|ACST|-9u|0||12e4","Australia/Eucla|ACWST|-8J|0||368","Australia/Lord_Howe|LHDT LHST|-b0 -au|01010101010101010101010|1C130 1cMu 1cLu 1cMu 1cLu 1fAu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1fAu 1cLu 1cMu 1cLu 1cMu|347","Australia/Perth|AWST|-80|0||18e5","Pacific/Easter|EASST EAST EAST|50 60 50|010101010102|1C1f0 1fB0 1nX0 G10 1EL0 Op0 1zb0 Rd0 1wn0 Rd0 1wn0|30e2","Europe/Dublin|GMT IST|0 -10|01010101010101010101010|1BWp0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|12e5","Etc/GMT+1|GMT+1|10|0|","Etc/GMT+10|GMT+10|a0|0|","Etc/GMT+11|GMT+11|b0|0|","Etc/GMT+12|GMT+12|c0|0|","Etc/GMT+2|GMT+2|20|0|","Etc/GMT+3|GMT+3|30|0|","Etc/GMT+4|GMT+4|40|0|","Etc/GMT+5|GMT+5|50|0|","Etc/GMT+6|GMT+6|60|0|","Etc/GMT+7|GMT+7|70|0|","Etc/GMT+8|GMT+8|80|0|","Etc/GMT+9|GMT+9|90|0|","Etc/GMT-1|GMT-1|-10|0|","Etc/GMT-10|GMT-10|-a0|0|","Etc/GMT-11|GMT-11|-b0|0|","Etc/GMT-12|GMT-12|-c0|0|","Etc/GMT-13|GMT-13|-d0|0|","Etc/GMT-14|GMT-14|-e0|0|","Etc/GMT-2|GMT-2|-20|0|","Etc/GMT-3|GMT-3|-30|0|","Etc/GMT-4|GMT-4|-40|0|","Etc/GMT-5|GMT-5|-50|0|","Etc/GMT-6|GMT-6|-60|0|","Etc/GMT-7|GMT-7|-70|0|","Etc/GMT-8|GMT-8|-80|0|","Etc/GMT-9|GMT-9|-90|0|","Etc/UCT|UCT|0|0|","Etc/UTC|UTC|0|0|","Europe/London|GMT BST|0 -10|01010101010101010101010|1BWp0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|10e6","Europe/Chisinau|EET EEST|-20 -30|01010101010101010101010|1BWo0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|67e4","Europe/Kaliningrad|EET EEST FET|-20 -30 -30|01020|1BWo0 1qM0 WM0 8Hz0|44e4","Europe/Minsk|EET EEST FET MSK|-20 -30 -30 -30|01023|1BWo0 1qM0 WM0 8Hy0|19e5","Europe/Moscow|MSK MSD MSK|-30 -40 -40|01020|1BWn0 1qM0 WM0 8Hz0|16e6","Europe/Samara|SAMT SAMST SAMT|-40 -40 -30|0120|1BWm0 1qN0 WM0|12e5","Europe/Simferopol|EET EEST MSK MSK|-20 -30 -40 -30|01010101023|1BWp0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11z0 1nW0|33e4","Pacific/Honolulu|HST|a0|0||37e4","Indian/Chagos|IOT|-60|0||30e2","Indian/Christmas|CXT|-70|0||21e2","Indian/Cocos|CCT|-6u|0||596","Indian/Kerguelen|TFT|-50|0||130","Indian/Mahe|SCT|-40|0||79e3","Indian/Maldives|MVT|-50|0||35e4","Indian/Mauritius|MUT|-40|0||15e4","Indian/Reunion|RET|-40|0||84e4","Pacific/Majuro|MHT|-c0|0||28e3","MET|MET MEST|-10 -20|01010101010101010101010|1BWp0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00","Pacific/Chatham|CHADT CHAST|-dJ -cJ|01010101010101010101010|1C120 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00|600","Pacific/Apia|SST SDT WSDT WSST|b0 a0 -e0 -d0|01012323232323232323232|1Dbn0 1ff0 1a00 CI0 AQ0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00|37e3","Pacific/Bougainville|PGT BST|-a0 -b0|01|1NwE0|18e4","Pacific/Chuuk|CHUT|-a0|0||49e3","Pacific/Efate|VUT|-b0|0||66e3","Pacific/Enderbury|PHOT|-d0|0||1","Pacific/Fakaofo|TKT TKT|b0 -d0|01|1Gfn0|483","Pacific/Fiji|FJST FJT|-d0 -c0|01010101010101010101010|1BWe0 1o00 Rc0 1wo0 Ao0 1Nc0 Ao0 1Q00 xz0 1SN0 uM0 1SM0 uM0 1VA0 s00 1VA0 uM0 1SM0 uM0 1SM0 uM0 1SM0|88e4","Pacific/Funafuti|TVT|-c0|0||45e2","Pacific/Galapagos|GALT|60|0||25e3","Pacific/Gambier|GAMT|90|0||125","Pacific/Guadalcanal|SBT|-b0|0||11e4","Pacific/Guam|ChST|-a0|0||17e4","Pacific/Kiritimati|LINT|-e0|0||51e2","Pacific/Kosrae|KOST|-b0|0||66e2","Pacific/Marquesas|MART|9u|0||86e2","Pacific/Pago_Pago|SST|b0|0||37e2","Pacific/Nauru|NRT|-c0|0||10e3","Pacific/Niue|NUT|b0|0||12e2","Pacific/Norfolk|NFT NFT|-bu -b0|01|1PoCu|25e4","Pacific/Noumea|NCT|-b0|0||98e3","Pacific/Palau|PWT|-90|0||21e3","Pacific/Pohnpei|PONT|-b0|0||34e3","Pacific/Port_Moresby|PGT|-a0|0||25e4","Pacific/Rarotonga|CKT|a0|0||13e3","Pacific/Tahiti|TAHT|a0|0||18e4","Pacific/Tarawa|GILT|-c0|0||29e3","Pacific/Tongatapu|TOT|-d0|0||75e3","Pacific/Wake|WAKT|-c0|0||16e3","Pacific/Wallis|WFT|-c0|0||94"],links:["Africa/Abidjan|Africa/Accra","Africa/Abidjan|Africa/Bamako","Africa/Abidjan|Africa/Banjul","Africa/Abidjan|Africa/Bissau","Africa/Abidjan|Africa/Conakry","Africa/Abidjan|Africa/Dakar","Africa/Abidjan|Africa/Freetown","Africa/Abidjan|Africa/Lome","Africa/Abidjan|Africa/Monrovia","Africa/Abidjan|Africa/Nouakchott","Africa/Abidjan|Africa/Ouagadougou","Africa/Abidjan|Africa/Sao_Tome","Africa/Abidjan|Africa/Timbuktu","Africa/Abidjan|America/Danmarkshavn","Africa/Abidjan|Atlantic/Reykjavik","Africa/Abidjan|Atlantic/St_Helena","Africa/Abidjan|Etc/GMT","Africa/Abidjan|Etc/GMT+0","Africa/Abidjan|Etc/GMT-0","Africa/Abidjan|Etc/GMT0","Africa/Abidjan|Etc/Greenwich","Africa/Abidjan|GMT","Africa/Abidjan|GMT+0","Africa/Abidjan|GMT-0","Africa/Abidjan|GMT0","Africa/Abidjan|Greenwich","Africa/Abidjan|Iceland","Africa/Algiers|Africa/Tunis","Africa/Cairo|Egypt","Africa/Casablanca|Africa/El_Aaiun","Africa/Johannesburg|Africa/Maseru","Africa/Johannesburg|Africa/Mbabane","Africa/Khartoum|Africa/Addis_Ababa","Africa/Khartoum|Africa/Asmara","Africa/Khartoum|Africa/Asmera","Africa/Khartoum|Africa/Dar_es_Salaam","Africa/Khartoum|Africa/Djibouti","Africa/Khartoum|Africa/Juba","Africa/Khartoum|Africa/Kampala","Africa/Khartoum|Africa/Mogadishu","Africa/Khartoum|Africa/Nairobi","Africa/Khartoum|Indian/Antananarivo","Africa/Khartoum|Indian/Comoro","Africa/Khartoum|Indian/Mayotte","Africa/Lagos|Africa/Bangui","Africa/Lagos|Africa/Brazzaville","Africa/Lagos|Africa/Douala","Africa/Lagos|Africa/Kinshasa","Africa/Lagos|Africa/Libreville","Africa/Lagos|Africa/Luanda","Africa/Lagos|Africa/Malabo","Africa/Lagos|Africa/Ndjamena","Africa/Lagos|Africa/Niamey","Africa/Lagos|Africa/Porto-Novo","Africa/Maputo|Africa/Blantyre","Africa/Maputo|Africa/Bujumbura","Africa/Maputo|Africa/Gaborone","Africa/Maputo|Africa/Harare","Africa/Maputo|Africa/Kigali","Africa/Maputo|Africa/Lubumbashi","Africa/Maputo|Africa/Lusaka","Africa/Tripoli|Libya","America/Adak|America/Atka","America/Adak|US/Aleutian","America/Anchorage|America/Juneau","America/Anchorage|America/Nome","America/Anchorage|America/Sitka","America/Anchorage|America/Yakutat","America/Anchorage|US/Alaska","America/Argentina/Buenos_Aires|America/Argentina/Catamarca","America/Argentina/Buenos_Aires|America/Argentina/ComodRivadavia","America/Argentina/Buenos_Aires|America/Argentina/Cordoba","America/Argentina/Buenos_Aires|America/Argentina/Jujuy","America/Argentina/Buenos_Aires|America/Argentina/La_Rioja","America/Argentina/Buenos_Aires|America/Argentina/Mendoza","America/Argentina/Buenos_Aires|America/Argentina/Rio_Gallegos","America/Argentina/Buenos_Aires|America/Argentina/Salta","America/Argentina/Buenos_Aires|America/Argentina/San_Juan","America/Argentina/Buenos_Aires|America/Argentina/San_Luis","America/Argentina/Buenos_Aires|America/Argentina/Tucuman","America/Argentina/Buenos_Aires|America/Argentina/Ushuaia","America/Argentina/Buenos_Aires|America/Buenos_Aires","America/Argentina/Buenos_Aires|America/Catamarca","America/Argentina/Buenos_Aires|America/Cordoba","America/Argentina/Buenos_Aires|America/Jujuy","America/Argentina/Buenos_Aires|America/Mendoza","America/Argentina/Buenos_Aires|America/Rosario","America/Campo_Grande|America/Cuiaba","America/Chicago|America/Indiana/Knox","America/Chicago|America/Indiana/Tell_City","America/Chicago|America/Knox_IN","America/Chicago|America/Matamoros","America/Chicago|America/Menominee","America/Chicago|America/North_Dakota/Center","America/Chicago|America/North_Dakota/New_Salem","America/Chicago|America/Rainy_River","America/Chicago|America/Rankin_Inlet","America/Chicago|America/Resolute","America/Chicago|America/Winnipeg","America/Chicago|CST6CDT","America/Chicago|Canada/Central","America/Chicago|US/Central","America/Chicago|US/Indiana-Starke","America/Chihuahua|America/Mazatlan","America/Chihuahua|Mexico/BajaSur","America/Denver|America/Boise","America/Denver|America/Cambridge_Bay","America/Denver|America/Edmonton","America/Denver|America/Inuvik","America/Denver|America/Ojinaga","America/Denver|America/Shiprock","America/Denver|America/Yellowknife","America/Denver|Canada/Mountain","America/Denver|MST7MDT","America/Denver|Navajo","America/Denver|US/Mountain","America/Fortaleza|America/Belem","America/Fortaleza|America/Maceio","America/Fortaleza|America/Recife","America/Fortaleza|America/Santarem","America/Halifax|America/Glace_Bay","America/Halifax|America/Moncton","America/Halifax|America/Thule","America/Halifax|Atlantic/Bermuda","America/Halifax|Canada/Atlantic","America/Havana|Cuba","America/Los_Angeles|America/Dawson","America/Los_Angeles|America/Ensenada","America/Los_Angeles|America/Tijuana","America/Los_Angeles|America/Vancouver","America/Los_Angeles|America/Whitehorse","America/Los_Angeles|Canada/Pacific","America/Los_Angeles|Canada/Yukon","America/Los_Angeles|Mexico/BajaNorte","America/Los_Angeles|PST8PDT","America/Los_Angeles|US/Pacific","America/Los_Angeles|US/Pacific-New","America/Managua|America/Belize","America/Managua|America/Costa_Rica","America/Managua|America/El_Salvador","America/Managua|America/Guatemala","America/Managua|America/Regina","America/Managua|America/Swift_Current","America/Managua|America/Tegucigalpa","America/Managua|Canada/East-Saskatchewan","America/Managua|Canada/Saskatchewan","America/Manaus|America/Boa_Vista","America/Manaus|America/Porto_Velho","America/Manaus|Brazil/West","America/Metlakatla|Pacific/Pitcairn","America/Mexico_City|America/Merida","America/Mexico_City|America/Monterrey","America/Mexico_City|Mexico/General","America/New_York|America/Detroit","America/New_York|America/Fort_Wayne","America/New_York|America/Indiana/Indianapolis","America/New_York|America/Indiana/Marengo","America/New_York|America/Indiana/Petersburg","America/New_York|America/Indiana/Vevay","America/New_York|America/Indiana/Vincennes","America/New_York|America/Indiana/Winamac","America/New_York|America/Indianapolis","America/New_York|America/Iqaluit","America/New_York|America/Kentucky/Louisville","America/New_York|America/Kentucky/Monticello","America/New_York|America/Louisville","America/New_York|America/Montreal","America/New_York|America/Nassau","America/New_York|America/Nipigon","America/New_York|America/Pangnirtung","America/New_York|America/Thunder_Bay","America/New_York|America/Toronto","America/New_York|Canada/Eastern","America/New_York|EST5EDT","America/New_York|US/East-Indiana","America/New_York|US/Eastern","America/New_York|US/Michigan","America/Noronha|Brazil/DeNoronha","America/Panama|America/Atikokan","America/Panama|America/Coral_Harbour","America/Panama|America/Jamaica","America/Panama|EST","America/Panama|Jamaica","America/Phoenix|America/Creston","America/Phoenix|America/Dawson_Creek","America/Phoenix|America/Hermosillo","America/Phoenix|MST","America/Phoenix|US/Arizona","America/Rio_Branco|America/Eirunepe","America/Rio_Branco|America/Porto_Acre","America/Rio_Branco|Brazil/Acre","America/Santiago|Antarctica/Palmer","America/Santiago|Chile/Continental","America/Santo_Domingo|America/Anguilla","America/Santo_Domingo|America/Antigua","America/Santo_Domingo|America/Aruba","America/Santo_Domingo|America/Barbados","America/Santo_Domingo|America/Blanc-Sablon","America/Santo_Domingo|America/Curacao","America/Santo_Domingo|America/Dominica","America/Santo_Domingo|America/Grenada","America/Santo_Domingo|America/Guadeloupe","America/Santo_Domingo|America/Kralendijk","America/Santo_Domingo|America/Lower_Princes","America/Santo_Domingo|America/Marigot","America/Santo_Domingo|America/Martinique","America/Santo_Domingo|America/Montserrat","America/Santo_Domingo|America/Port_of_Spain","America/Santo_Domingo|America/Puerto_Rico","America/Santo_Domingo|America/St_Barthelemy","America/Santo_Domingo|America/St_Kitts","America/Santo_Domingo|America/St_Lucia","America/Santo_Domingo|America/St_Thomas","America/Santo_Domingo|America/St_Vincent","America/Santo_Domingo|America/Tortola","America/Santo_Domingo|America/Virgin","America/Sao_Paulo|Brazil/East","America/St_Johns|Canada/Newfoundland","Asia/Aqtobe|Asia/Aqtau","Asia/Ashgabat|Asia/Ashkhabad","Asia/Baghdad|Asia/Aden","Asia/Baghdad|Asia/Bahrain","Asia/Baghdad|Asia/Kuwait","Asia/Baghdad|Asia/Qatar","Asia/Baghdad|Asia/Riyadh","Asia/Bangkok|Asia/Ho_Chi_Minh","Asia/Bangkok|Asia/Phnom_Penh","Asia/Bangkok|Asia/Saigon","Asia/Bangkok|Asia/Vientiane","Asia/Dhaka|Asia/Dacca","Asia/Dubai|Asia/Muscat","Asia/Hong_Kong|Hongkong","Asia/Jakarta|Asia/Pontianak","Asia/Jerusalem|Asia/Tel_Aviv","Asia/Jerusalem|Israel","Asia/Kathmandu|Asia/Katmandu","Asia/Kolkata|Asia/Calcutta","Asia/Kolkata|Asia/Colombo","Asia/Kuala_Lumpur|Asia/Kuching","Asia/Makassar|Asia/Ujung_Pandang","Asia/Seoul|ROK","Asia/Shanghai|Asia/Chongqing","Asia/Shanghai|Asia/Chungking","Asia/Shanghai|Asia/Harbin","Asia/Shanghai|Asia/Macao","Asia/Shanghai|Asia/Macau","Asia/Shanghai|Asia/Taipei","Asia/Shanghai|PRC","Asia/Shanghai|ROC","Asia/Singapore|Singapore","Asia/Tashkent|Asia/Samarkand","Asia/Tehran|Iran","Asia/Thimphu|Asia/Thimbu","Asia/Tokyo|Japan","Asia/Ulaanbaatar|Asia/Ulan_Bator","Asia/Urumqi|Asia/Kashgar","Australia/Adelaide|Australia/Broken_Hill","Australia/Adelaide|Australia/South","Australia/Adelaide|Australia/Yancowinna","Australia/Brisbane|Australia/Lindeman","Australia/Brisbane|Australia/Queensland","Australia/Darwin|Australia/North","Australia/Lord_Howe|Australia/LHI","Australia/Perth|Australia/West","Australia/Sydney|Australia/ACT","Australia/Sydney|Australia/Canberra","Australia/Sydney|Australia/Currie","Australia/Sydney|Australia/Hobart","Australia/Sydney|Australia/Melbourne","Australia/Sydney|Australia/NSW","Australia/Sydney|Australia/Tasmania","Australia/Sydney|Australia/Victoria","Etc/UCT|UCT","Etc/UTC|Etc/Universal","Etc/UTC|Etc/Zulu","Etc/UTC|UTC","Etc/UTC|Universal","Etc/UTC|Zulu","Europe/Athens|Asia/Nicosia","Europe/Athens|EET","Europe/Athens|Europe/Bucharest","Europe/Athens|Europe/Helsinki","Europe/Athens|Europe/Kiev","Europe/Athens|Europe/Mariehamn","Europe/Athens|Europe/Nicosia","Europe/Athens|Europe/Riga","Europe/Athens|Europe/Sofia","Europe/Athens|Europe/Tallinn","Europe/Athens|Europe/Uzhgorod","Europe/Athens|Europe/Vilnius","Europe/Athens|Europe/Zaporozhye","Europe/Chisinau|Europe/Tiraspol","Europe/Dublin|Eire","Europe/Istanbul|Asia/Istanbul","Europe/Istanbul|Turkey","Europe/Lisbon|Atlantic/Canary","Europe/Lisbon|Atlantic/Faeroe","Europe/Lisbon|Atlantic/Faroe","Europe/Lisbon|Atlantic/Madeira","Europe/Lisbon|Portugal","Europe/Lisbon|WET","Europe/London|Europe/Belfast","Europe/London|Europe/Guernsey","Europe/London|Europe/Isle_of_Man","Europe/London|Europe/Jersey","Europe/London|GB","Europe/London|GB-Eire","Europe/Moscow|Europe/Volgograd","Europe/Moscow|W-SU","Europe/Paris|Africa/Ceuta","Europe/Paris|Arctic/Longyearbyen","Europe/Paris|Atlantic/Jan_Mayen","Europe/Paris|CET","Europe/Paris|Europe/Amsterdam","Europe/Paris|Europe/Andorra","Europe/Paris|Europe/Belgrade","Europe/Paris|Europe/Berlin","Europe/Paris|Europe/Bratislava","Europe/Paris|Europe/Brussels","Europe/Paris|Europe/Budapest","Europe/Paris|Europe/Busingen","Europe/Paris|Europe/Copenhagen","Europe/Paris|Europe/Gibraltar","Europe/Paris|Europe/Ljubljana","Europe/Paris|Europe/Luxembourg","Europe/Paris|Europe/Madrid","Europe/Paris|Europe/Malta","Europe/Paris|Europe/Monaco","Europe/Paris|Europe/Oslo","Europe/Paris|Europe/Podgorica","Europe/Paris|Europe/Prague","Europe/Paris|Europe/Rome","Europe/Paris|Europe/San_Marino","Europe/Paris|Europe/Sarajevo","Europe/Paris|Europe/Skopje","Europe/Paris|Europe/Stockholm","Europe/Paris|Europe/Tirane","Europe/Paris|Europe/Vaduz","Europe/Paris|Europe/Vatican","Europe/Paris|Europe/Vienna","Europe/Paris|Europe/Warsaw","Europe/Paris|Europe/Zagreb","Europe/Paris|Europe/Zurich","Europe/Paris|Poland","Pacific/Auckland|Antarctica/McMurdo","Pacific/Auckland|Antarctica/South_Pole","Pacific/Auckland|NZ","Pacific/Chatham|NZ-CHAT","Pacific/Chuuk|Pacific/Truk","Pacific/Chuuk|Pacific/Yap","Pacific/Easter|Chile/EasterIsland","Pacific/Guam|Pacific/Saipan","Pacific/Honolulu|HST","Pacific/Honolulu|Pacific/Johnston","Pacific/Honolulu|US/Hawaii","Pacific/Majuro|Kwajalein","Pacific/Majuro|Pacific/Kwajalein","Pacific/Pago_Pago|Pacific/Midway","Pacific/Pago_Pago|Pacific/Samoa","Pacific/Pago_Pago|US/Samoa","Pacific/Pohnpei|Pacific/Ponape"]}),e
}),"undefined"!=typeof angular&&angular.module("risevision.common.i18n.config",[]).constant("LOCALES_PREFIX","locales/translation_").constant("LOCALES_SUFIX",".json");var config={},RiseVision=RiseVision||{};RiseVision.TimeDate={},RiseVision.TimeDate=function(e){"use strict";function a(){var e=[{"class":"time-and-date",fontSetting:A.fontStyle}];RiseVision.Common.Utilities.loadFonts(e),m=A.showTime?A.timeFormat:"",m+=A.showTime&&A.showDate?" ":"",m+=A.showDate?A.dateFormat:"",d=document.createElement("p"),d.className="time-and-date",d.style.textAlign=A.fontStyle.align,document.getElementById("container").appendChild(d),i()}function i(){e.rpc.call("","rsevent_ready",null,f.getString("id"),!0,!0,!0,!0,!1)}function t(e){A=JSON.parse(JSON.stringify(e)),A.width=f.getInt("rsW"),A.height=f.getInt("rsH"),document.getElementById("container").style.width=A.width+"px",document.getElementById("container").style.height=A.height+"px",h=new RiseVision.Common.Message(document.getElementById("container"),document.getElementById("messageContainer")),a()}function n(){if(m){var e=moment();A.useTimezone&&(e=moment().tz(A.timezone)),d.innerHTML=e.format(m),l=setTimeout(function(){n()},1e3)}}function r(){clearTimeout(l)}function o(){p||(u({event:"configuration",event_details:JSON.stringify(A)}),p=!0),n(),u({event:"play",event_details:m})}function s(){r()}function c(){return"time_date_events"}function u(e){RiseVision.Common.LoggerUtils.logEvent(c(),e)}var l,d,m,f=new e.Prefs,A=null,h=null,p=!1;return{pause:r,play:o,setAdditionalParams:t,stop:s,logEvent:u,getTableName:c}}(gadgets);var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.Message=function(e,a){"use strict";function i(){try{a.style.height=e.style.height}catch(i){console.warn("Can't initialize Message - ",i.message)}}function t(){if(r){for(;a.firstChild;)a.removeChild(a.firstChild);a.style.display="none",e.style.visibility="visible",r=!1}}function n(i){var t,n=document.createDocumentFragment();r?(t=a.querySelector(".message"),t.innerHTML=i):(e.style.visibility="hidden",a.style.display="block",t=document.createElement("p"),t.innerHTML=i,t.setAttribute("class","message"),n.appendChild(t),a.appendChild(n),r=!0)}var r=!1;return i(),{hide:t,show:n}},function(e,a,i){"use strict";function t(e,a){var i,t="",n="";Array.isArray(e)&&e.length>0&&Array.isArray(a)&&a.length>0&&("companyId"===e[0]&&(t=a[0]),"displayId"===e[1]&&(n=a[1]?a[1]:"preview"),RiseVision.Common.LoggerUtils.setIds(t,n),"additionalParams"===e[2]&&(i=JSON.parse(a[2]),RiseVision.TimeDate.setAdditionalParams(i)))}function n(){RiseVision.TimeDate.pause()}function r(){RiseVision.TimeDate.play()}function o(){RiseVision.TimeDate.stop()}var s=(new i.Prefs).getString("id");e.oncontextmenu=function(){return!1},a.body.onmousedown=function(){return!1},s&&""!==s&&(i.rpc.register("rscmd_play_"+s,r),i.rpc.register("rscmd_pause_"+s,n),i.rpc.register("rscmd_stop_"+s,o),i.rpc.register("rsparam_set_"+s,t),i.rpc.call("","rsparam_get",null,s,["companyId","displayId","additionalParams"]))}(window,document,gadgets);
//# sourceMappingURL=data:application/json;base64,
