var WIDGET_COMMON_CONFIG={AUTH_PATH_URL:"v1/widget/auth",LOGGER_CLIENT_ID:"1088527147109-6q1o2vtihn34292pjt4ckhmhck0rk0o7.apps.googleusercontent.com",LOGGER_CLIENT_SECRET:"nlZyrcPLg6oEwO9f9Wfn29Wh",LOGGER_REFRESH_TOKEN:"1/xzt4kwzE1H7W9VnKB8cAaCx6zb4Es4nKEoqaYHdTD15IgOrJDtdun6zK6XiATCKT",STORAGE_ENV:"prod",STORE_URL:"https://store-dot-rvaserver2.appspot.com/"},RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.LoggerUtils=function(){"use strict";function t(t,e){var i=null;t.event?(i=t,i.file_url&&(i.file_format=n(i.file_url)),i.company_id=a,i.display_id=o,e(i)):e(i)}function e(){var t=new Date,e=t.getUTCFullYear(),n=t.getUTCMonth()+1,i=t.getUTCDate();return 10>n&&(n="0"+n),10>i&&(i="0"+i),e+n+i}function n(t){var e,n=/[?#&]/;return t&&"string"==typeof t?(e=t.substr(t.lastIndexOf(".")+1),n.test(e)&&(e=e.substr(0,-1!==e.indexOf("?")?e.indexOf("?"):e.length),e=e.substr(0,-1!==e.indexOf("#")?e.indexOf("#"):e.length),e=e.substr(0,-1!==e.indexOf("&")?e.indexOf("&"):e.length)),e.toLowerCase()):null}function i(t){var n={kind:"bigquery#tableDataInsertAllRequest",skipInvalidRows:!1,ignoreUnknownValues:!1,templateSuffix:e(),rows:[{insertId:""}]},i=JSON.parse(JSON.stringify(n));return i.rows[0].insertId=Math.random().toString(36).substr(2).toUpperCase(),i.rows[0].json=JSON.parse(JSON.stringify(t)),i.rows[0].json.ts=(new Date).toISOString(),i}function s(e,n){t(n,function(t){null!==t&&RiseVision.Common.Logger.log(e,t)})}function r(t,e){a=t,o=e}var o="",a="";return{getInsertData:i,getFileFormat:n,logEvent:s,setIds:r}}(),RiseVision.Common.Logger=function(t){"use strict";function e(t){var e=new XMLHttpRequest;return new Date-d<358e4?t({}):(e.open("POST",s,!0),e.onloadend=function(){var n=JSON.parse(e.response);t({token:n.access_token,refreshedAt:new Date})},e.send(),void 0)}function n(t){return o&&u===t}function i(i,s){function c(e){var n,o,a=new XMLHttpRequest;o=r.replace("TABLE_ID",i),d=e.refreshedAt||d,l=e.token||l,n=t.getInsertData(s),a.open("POST",o,!0),a.setRequestHeader("Content-Type","application/json"),a.setRequestHeader("Authorization","Bearer "+l),s.cb&&"function"==typeof s.cb&&(a.onloadend=function(){s.cb(a.response)}),a.send(JSON.stringify(n))}if(!(!i||!s||s.hasOwnProperty("event")&&!s.event||s.hasOwnProperty("event")&&n(s.event)))return o=!0,u=s.event,setTimeout(function(){o=!1},a),e(c)}var s="https://www.googleapis.com/oauth2/v3/token?client_id="+WIDGET_COMMON_CONFIG.LOGGER_CLIENT_ID+"&client_secret="+WIDGET_COMMON_CONFIG.LOGGER_CLIENT_SECRET+"&refresh_token="+WIDGET_COMMON_CONFIG.LOGGER_REFRESH_TOKEN+"&grant_type=refresh_token",r="https://www.googleapis.com/bigquery/v2/projects/client-side-events/datasets/Widget_Events/tables/TABLE_ID/insertAll",o=!1,a=1e3,u="",d=0,l="";return{log:i}}(RiseVision.Common.LoggerUtils);var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.RiseCache=function(){"use strict";function t(t){var e=new XMLHttpRequest;t&&"function"==typeof t&&(e.open("GET",n+"ping?callback=_",!0),e.onreadystatechange=function(){try{4===e.readyState&&(i=!0,200===e.status?(s=!0,t(!0,e.responseText)):(console.debug("Rise Cache is not running"),s=!1,t(!1,null)))}catch(n){console.debug("Caught exception: ",n.description)}},e.send())}function e(t,e,r){function o(e){var i,s,o;e?i=r?n+"?url="+encodeURIComponent(t):n+"cb="+(new Date).getTime()+"?url="+encodeURIComponent(t):r?i=t:(s=t.split("?"),o=1===s.length?"?":"&",i=t+o+"cb="+(new Date).getTime()),a("HEAD",i)}function a(t,n){var i=new XMLHttpRequest,r={xhr:i,url:n};i.open(t,n,!0),i.addEventListener("loadend",function(){var o=i.status||0;o>=200&&300>o?e(r):"HEAD"===t?a("GET",n):s?e(r,new Error("The request failed with status code: "+o)):e(r)}),i.send()}if(t&&e&&"function"==typeof e)return i?o(s):this.ping(o)}var n="http://localhost:9494/",i=!1,s=!1;return{getFile:e,ping:t}}();var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.Utilities=function(){function t(t,e){var n="font-family:"+e.font.family+"; ",i="color: "+e.color+"; ",s="font-size: "+e.size+"px; ",r="font-weight: "+(e.bold?"bold":"normal")+"; ",o="font-style: "+(e.italic?"italic":"normal")+"; ",a="text-decoration: "+(e.underline?"underline":"none")+"; ",u="background-color: "+e.highlightColor+"; ";return"."+t+" {"+n+i+s+r+o+a+u+"}"}function e(t){for(var e=document.createElement("style"),n=0,i=t.length;i>n;n++)e.appendChild(document.createTextNode(t[n]));document.head.appendChild(e)}function n(n,r){n.forEach(function(n){n.class&&n.fontSetting&&e([t(n.class,n.fontSetting)]),n.fontSetting.font.type&&("custom"===n.fontSetting.font.type&&n.fontSetting.font.family&&n.fontSetting.font.url?i(n.fontSetting.font.family,n.fontSetting.font.url,r):"google"===n.fontSetting.font.type&&n.fontSetting.font.family&&s(n.fontSetting.font.family,r))})}function i(t,e,n){var i=null,s="font-family: "+t+"; src: url('"+e+"');";n=n||document,i=n.styleSheets[0],null!==i&&i.addRule("@font-face",s)}function s(t,e){var n=document.createElement("link");e=e||document,n.setAttribute("rel","stylesheet"),n.setAttribute("type","text/css"),n.setAttribute("href","https://fonts.googleapis.com/css?family="+t),null!==n&&e.getElementsByTagName("head")[0].appendChild(n)}function r(t){for(var e=t.length,n=[],i=0;e>i;i++)n[i]=new Image,n[i].src=t[i]}function o(t){for(var e,n=window.location.search.substring(1),i=n.split("&"),s=0;s<i.length;s++)if(e=i[s].split("="),e[0]==t)return decodeURIComponent(e[1]);return""}return{getQueryParameter:o,getFontCssStyle:t,addCSSRules:e,loadFonts:n,loadCustomFont:i,loadGoogleFont:s,preloadImages:r}}(),function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):t.moment=e()}(this,function(){"use strict";function t(){return qi.apply(null,arguments)}function e(t){qi=t}function n(t){return"[object Array]"===Object.prototype.toString.call(t)}function i(t){return t instanceof Date||"[object Date]"===Object.prototype.toString.call(t)}function s(t,e){var n,i=[];for(n=0;n<t.length;++n)i.push(e(t[n],n));return i}function r(t,e){return Object.prototype.hasOwnProperty.call(t,e)}function o(t,e){for(var n in e)r(e,n)&&(t[n]=e[n]);return r(e,"toString")&&(t.toString=e.toString),r(e,"valueOf")&&(t.valueOf=e.valueOf),t}function a(t,e,n,i){return Ce(t,e,n,i,!0).utc()}function u(){return{empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1}}function d(t){return null==t._pf&&(t._pf=u()),t._pf}function l(t){if(null==t._isValid){var e=d(t);t._isValid=!(isNaN(t._d.getTime())||!(e.overflow<0)||e.empty||e.invalidMonth||e.invalidWeekday||e.nullInput||e.invalidFormat||e.userInvalidated),t._strict&&(t._isValid=t._isValid&&0===e.charsLeftOver&&0===e.unusedTokens.length&&void 0===e.bigHour)}return t._isValid}function c(t){var e=a(0/0);return null!=t?o(d(e),t):d(e).userInvalidated=!0,e}function h(t){return void 0===t}function f(t,e){var n,i,s;if(h(e._isAMomentObject)||(t._isAMomentObject=e._isAMomentObject),h(e._i)||(t._i=e._i),h(e._f)||(t._f=e._f),h(e._l)||(t._l=e._l),h(e._strict)||(t._strict=e._strict),h(e._tzm)||(t._tzm=e._tzm),h(e._isUTC)||(t._isUTC=e._isUTC),h(e._offset)||(t._offset=e._offset),h(e._pf)||(t._pf=d(e)),h(e._locale)||(t._locale=e._locale),Bi.length>0)for(n in Bi)i=Bi[n],s=e[i],h(s)||(t[i]=s);return t}function m(e){f(this,e),this._d=new Date(null!=e._d?e._d.getTime():0/0),Xi===!1&&(Xi=!0,t.updateOffset(this),Xi=!1)}function _(t){return t instanceof m||null!=t&&null!=t._isAMomentObject}function g(t){return 0>t?Math.ceil(t):Math.floor(t)}function y(t){var e=+t,n=0;return 0!==e&&isFinite(e)&&(n=g(e)),n}function p(t,e,n){var i,s=Math.min(t.length,e.length),r=Math.abs(t.length-e.length),o=0;for(i=0;s>i;i++)(n&&t[i]!==e[i]||!n&&y(t[i])!==y(e[i]))&&o++;return o+r}function v(){}function D(t){return t?t.toLowerCase().replace("_","-"):t}function w(t){for(var e,n,i,s,r=0;r<t.length;){for(s=D(t[r]).split("-"),e=s.length,n=D(t[r+1]),n=n?n.split("-"):null;e>0;){if(i=S(s.slice(0,e).join("-")))return i;if(n&&n.length>=e&&p(s,n,!0)>=e-1)break;e--}r++}return null}function S(t){var e=null;if(!$i[t]&&"undefined"!=typeof module&&module&&module.exports)try{e=Ji._abbr,require("./locale/"+t),M(e)}catch(n){}return $i[t]}function M(t,e){var n;return t&&(n=h(e)?T(t):Y(t,e),n&&(Ji=n)),Ji._abbr}function Y(t,e){return null!==e?(e.abbr=t,$i[t]=$i[t]||new v,$i[t].set(e),M(t),$i[t]):(delete $i[t],null)}function T(t){var e;if(t&&t._locale&&t._locale._abbr&&(t=t._locale._abbr),!t)return Ji;if(!n(t)){if(e=S(t))return e;t=[t]}return w(t)}function k(t,e){var n=t.toLowerCase();Qi[n]=Qi[n+"s"]=Qi[e]=t}function O(t){return"string"==typeof t?Qi[t]||Qi[t.toLowerCase()]:void 0}function b(t){var e,n,i={};for(n in t)r(t,n)&&(e=O(n),e&&(i[e]=t[n]));return i}function C(t){return t instanceof Function||"[object Function]"===Object.prototype.toString.call(t)}function R(e,n){return function(i){return null!=i?(W(this,e,i),t.updateOffset(this,n),this):x(this,e)}}function x(t,e){return t.isValid()?t._d["get"+(t._isUTC?"UTC":"")+e]():0/0}function W(t,e,n){t.isValid()&&t._d["set"+(t._isUTC?"UTC":"")+e](n)}function V(t,e){var n;if("object"==typeof t)for(n in t)this.set(n,t[n]);else if(t=O(t),C(this[t]))return this[t](e);return this}function E(t,e,n){var i=""+Math.abs(t),s=e-i.length,r=t>=0;return(r?n?"+":"":"-")+Math.pow(10,Math.max(0,s)).toString().substr(1)+i}function G(t,e,n,i){var s=i;"string"==typeof i&&(s=function(){return this[i]()}),t&&(ns[t]=s),e&&(ns[e[0]]=function(){return E(s.apply(this,arguments),e[1],e[2])}),n&&(ns[n]=function(){return this.localeData().ordinal(s.apply(this,arguments),t)})}function U(t){return t.match(/\[[\s\S]/)?t.replace(/^\[|\]$/g,""):t.replace(/\\/g,"")}function I(t){var e,n,i=t.match(Ki);for(e=0,n=i.length;n>e;e++)i[e]=ns[i[e]]?ns[i[e]]:U(i[e]);return function(s){var r="";for(e=0;n>e;e++)r+=i[e]instanceof Function?i[e].call(s,t):i[e];return r}}function F(t,e){return t.isValid()?(e=H(e,t.localeData()),es[e]=es[e]||I(e),es[e](t)):t.localeData().invalidDate()}function H(t,e){function n(t){return e.longDateFormat(t)||t}var i=5;for(ts.lastIndex=0;i>=0&&ts.test(t);)t=t.replace(ts,n),ts.lastIndex=0,i-=1;return t}function P(t,e,n){Ds[t]=C(e)?e:function(t){return t&&n?n:e}}function L(t,e){return r(Ds,t)?Ds[t](e._strict,e._locale):new RegExp(A(t))}function A(t){return N(t.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(t,e,n,i,s){return e||n||i||s}))}function N(t){return t.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}function z(t,e){var n,i=e;for("string"==typeof t&&(t=[t]),"number"==typeof e&&(i=function(t,n){n[e]=y(t)}),n=0;n<t.length;n++)ws[t[n]]=i}function j(t,e){z(t,function(t,n,i,s){i._w=i._w||{},e(t,i._w,i,s)})}function Z(t,e,n){null!=e&&r(ws,t)&&ws[t](e,n._a,n,t)}function q(t,e){return new Date(Date.UTC(t,e+1,0)).getUTCDate()}function J(t,e){return n(this._months)?this._months[t.month()]:this._months[xs.test(e)?"format":"standalone"][t.month()]}function B(t,e){return n(this._monthsShort)?this._monthsShort[t.month()]:this._monthsShort[xs.test(e)?"format":"standalone"][t.month()]}function X(t,e,n){var i,s,r;for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),i=0;12>i;i++){if(s=a([2e3,i]),n&&!this._longMonthsParse[i]&&(this._longMonthsParse[i]=new RegExp("^"+this.months(s,"").replace(".","")+"$","i"),this._shortMonthsParse[i]=new RegExp("^"+this.monthsShort(s,"").replace(".","")+"$","i")),n||this._monthsParse[i]||(r="^"+this.months(s,"")+"|^"+this.monthsShort(s,""),this._monthsParse[i]=new RegExp(r.replace(".",""),"i")),n&&"MMMM"===e&&this._longMonthsParse[i].test(t))return i;if(n&&"MMM"===e&&this._shortMonthsParse[i].test(t))return i;if(!n&&this._monthsParse[i].test(t))return i}}function $(t,e){var n;return t.isValid()?"string"==typeof e&&(e=t.localeData().monthsParse(e),"number"!=typeof e)?t:(n=Math.min(t.date(),q(t.year(),e)),t._d["set"+(t._isUTC?"UTC":"")+"Month"](e,n),t):t}function Q(e){return null!=e?($(this,e),t.updateOffset(this,!0),this):x(this,"Month")}function K(){return q(this.year(),this.month())}function te(t){return this._monthsParseExact?(r(this,"_monthsRegex")||ne.call(this),t?this._monthsShortStrictRegex:this._monthsShortRegex):this._monthsShortStrictRegex&&t?this._monthsShortStrictRegex:this._monthsShortRegex}function ee(t){return this._monthsParseExact?(r(this,"_monthsRegex")||ne.call(this),t?this._monthsStrictRegex:this._monthsRegex):this._monthsStrictRegex&&t?this._monthsStrictRegex:this._monthsRegex}function ne(){function t(t,e){return e.length-t.length}var e,n,i=[],s=[],r=[];for(e=0;12>e;e++)n=a([2e3,e]),i.push(this.monthsShort(n,"")),s.push(this.months(n,"")),r.push(this.months(n,"")),r.push(this.monthsShort(n,""));for(i.sort(t),s.sort(t),r.sort(t),e=0;12>e;e++)i[e]=N(i[e]),s[e]=N(s[e]),r[e]=N(r[e]);this._monthsRegex=new RegExp("^("+r.join("|")+")","i"),this._monthsShortRegex=this._monthsRegex,this._monthsStrictRegex=new RegExp("^("+s.join("|")+")$","i"),this._monthsShortStrictRegex=new RegExp("^("+i.join("|")+")$","i")}function ie(t){var e,n=t._a;return n&&-2===d(t).overflow&&(e=n[Ms]<0||n[Ms]>11?Ms:n[Ys]<1||n[Ys]>q(n[Ss],n[Ms])?Ys:n[Ts]<0||n[Ts]>24||24===n[Ts]&&(0!==n[ks]||0!==n[Os]||0!==n[bs])?Ts:n[ks]<0||n[ks]>59?ks:n[Os]<0||n[Os]>59?Os:n[bs]<0||n[bs]>999?bs:-1,d(t)._overflowDayOfYear&&(Ss>e||e>Ys)&&(e=Ys),d(t)._overflowWeeks&&-1===e&&(e=Cs),d(t)._overflowWeekday&&-1===e&&(e=Rs),d(t).overflow=e),t}function se(e){t.suppressDeprecationWarnings===!1&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+e)}function re(t,e){var n=!0;return o(function(){return n&&(se(t+"\nArguments: "+Array.prototype.slice.call(arguments).join(", ")+"\n"+(new Error).stack),n=!1),e.apply(this,arguments)},e)}function oe(t,e){Us[t]||(se(e),Us[t]=!0)}function ae(t){var e,n,i,s,r,o,a=t._i,u=Is.exec(a)||Fs.exec(a);if(u){for(d(t).iso=!0,e=0,n=Ps.length;n>e;e++)if(Ps[e][1].exec(u[1])){s=Ps[e][0],i=Ps[e][2]!==!1;break}if(null==s)return t._isValid=!1,void 0;if(u[3]){for(e=0,n=Ls.length;n>e;e++)if(Ls[e][1].exec(u[3])){r=(u[2]||" ")+Ls[e][0];break}if(null==r)return t._isValid=!1,void 0}if(!i&&null!=r)return t._isValid=!1,void 0;if(u[4]){if(!Hs.exec(u[4]))return t._isValid=!1,void 0;o="Z"}t._f=s+(r||"")+(o||""),Se(t)}else t._isValid=!1}function ue(e){var n=As.exec(e._i);return null!==n?(e._d=new Date(+n[1]),void 0):(ae(e),e._isValid===!1&&(delete e._isValid,t.createFromInputFallback(e)),void 0)}function de(t,e,n,i,s,r,o){var a=new Date(t,e,n,i,s,r,o);return 100>t&&t>=0&&isFinite(a.getFullYear())&&a.setFullYear(t),a}function le(t){var e=new Date(Date.UTC.apply(null,arguments));return 100>t&&t>=0&&isFinite(e.getUTCFullYear())&&e.setUTCFullYear(t),e}function ce(t){return he(t)?366:365}function he(t){return t%4===0&&t%100!==0||t%400===0}function fe(){return he(this.year())}function me(t,e,n){var i=7+e-n,s=(7+le(t,0,i).getUTCDay()-e)%7;return-s+i-1}function _e(t,e,n,i,s){var r,o,a=(7+n-i)%7,u=me(t,i,s),d=1+7*(e-1)+a+u;return 0>=d?(r=t-1,o=ce(r)+d):d>ce(t)?(r=t+1,o=d-ce(t)):(r=t,o=d),{year:r,dayOfYear:o}}function ge(t,e,n){var i,s,r=me(t.year(),e,n),o=Math.floor((t.dayOfYear()-r-1)/7)+1;return 1>o?(s=t.year()-1,i=o+ye(s,e,n)):o>ye(t.year(),e,n)?(i=o-ye(t.year(),e,n),s=t.year()+1):(s=t.year(),i=o),{week:i,year:s}}function ye(t,e,n){var i=me(t,e,n),s=me(t+1,e,n);return(ce(t)-i+s)/7}function pe(t,e,n){return null!=t?t:null!=e?e:n}function ve(e){var n=new Date(t.now());return e._useUTC?[n.getUTCFullYear(),n.getUTCMonth(),n.getUTCDate()]:[n.getFullYear(),n.getMonth(),n.getDate()]}function De(t){var e,n,i,s,r=[];if(!t._d){for(i=ve(t),t._w&&null==t._a[Ys]&&null==t._a[Ms]&&we(t),t._dayOfYear&&(s=pe(t._a[Ss],i[Ss]),t._dayOfYear>ce(s)&&(d(t)._overflowDayOfYear=!0),n=le(s,0,t._dayOfYear),t._a[Ms]=n.getUTCMonth(),t._a[Ys]=n.getUTCDate()),e=0;3>e&&null==t._a[e];++e)t._a[e]=r[e]=i[e];for(;7>e;e++)t._a[e]=r[e]=null==t._a[e]?2===e?1:0:t._a[e];24===t._a[Ts]&&0===t._a[ks]&&0===t._a[Os]&&0===t._a[bs]&&(t._nextDay=!0,t._a[Ts]=0),t._d=(t._useUTC?le:de).apply(null,r),null!=t._tzm&&t._d.setUTCMinutes(t._d.getUTCMinutes()-t._tzm),t._nextDay&&(t._a[Ts]=24)}}function we(t){var e,n,i,s,r,o,a,u;e=t._w,null!=e.GG||null!=e.W||null!=e.E?(r=1,o=4,n=pe(e.GG,t._a[Ss],ge(Re(),1,4).year),i=pe(e.W,1),s=pe(e.E,1),(1>s||s>7)&&(u=!0)):(r=t._locale._week.dow,o=t._locale._week.doy,n=pe(e.gg,t._a[Ss],ge(Re(),r,o).year),i=pe(e.w,1),null!=e.d?(s=e.d,(0>s||s>6)&&(u=!0)):null!=e.e?(s=e.e+r,(e.e<0||e.e>6)&&(u=!0)):s=r),1>i||i>ye(n,r,o)?d(t)._overflowWeeks=!0:null!=u?d(t)._overflowWeekday=!0:(a=_e(n,i,s,r,o),t._a[Ss]=a.year,t._dayOfYear=a.dayOfYear)}function Se(e){if(e._f===t.ISO_8601)return ae(e),void 0;e._a=[],d(e).empty=!0;var n,i,s,r,o,a=""+e._i,u=a.length,l=0;for(s=H(e._f,e._locale).match(Ki)||[],n=0;n<s.length;n++)r=s[n],i=(a.match(L(r,e))||[])[0],i&&(o=a.substr(0,a.indexOf(i)),o.length>0&&d(e).unusedInput.push(o),a=a.slice(a.indexOf(i)+i.length),l+=i.length),ns[r]?(i?d(e).empty=!1:d(e).unusedTokens.push(r),Z(r,i,e)):e._strict&&!i&&d(e).unusedTokens.push(r);d(e).charsLeftOver=u-l,a.length>0&&d(e).unusedInput.push(a),d(e).bigHour===!0&&e._a[Ts]<=12&&e._a[Ts]>0&&(d(e).bigHour=void 0),e._a[Ts]=Me(e._locale,e._a[Ts],e._meridiem),De(e),ie(e)}function Me(t,e,n){var i;return null==n?e:null!=t.meridiemHour?t.meridiemHour(e,n):null!=t.isPM?(i=t.isPM(n),i&&12>e&&(e+=12),i||12!==e||(e=0),e):e}function Ye(t){var e,n,i,s,r;if(0===t._f.length)return d(t).invalidFormat=!0,t._d=new Date(0/0),void 0;for(s=0;s<t._f.length;s++)r=0,e=f({},t),null!=t._useUTC&&(e._useUTC=t._useUTC),e._f=t._f[s],Se(e),l(e)&&(r+=d(e).charsLeftOver,r+=10*d(e).unusedTokens.length,d(e).score=r,(null==i||i>r)&&(i=r,n=e));o(t,n||e)}function Te(t){if(!t._d){var e=b(t._i);t._a=s([e.year,e.month,e.day||e.date,e.hour,e.minute,e.second,e.millisecond],function(t){return t&&parseInt(t,10)}),De(t)}}function ke(t){var e=new m(ie(Oe(t)));return e._nextDay&&(e.add(1,"d"),e._nextDay=void 0),e}function Oe(t){var e=t._i,s=t._f;return t._locale=t._locale||T(t._l),null===e||void 0===s&&""===e?c({nullInput:!0}):("string"==typeof e&&(t._i=e=t._locale.preparse(e)),_(e)?new m(ie(e)):(n(s)?Ye(t):s?Se(t):i(e)?t._d=e:be(t),l(t)||(t._d=null),t))}function be(e){var r=e._i;void 0===r?e._d=new Date(t.now()):i(r)?e._d=new Date(+r):"string"==typeof r?ue(e):n(r)?(e._a=s(r.slice(0),function(t){return parseInt(t,10)}),De(e)):"object"==typeof r?Te(e):"number"==typeof r?e._d=new Date(r):t.createFromInputFallback(e)}function Ce(t,e,n,i,s){var r={};return"boolean"==typeof n&&(i=n,n=void 0),r._isAMomentObject=!0,r._useUTC=r._isUTC=s,r._l=n,r._i=t,r._f=e,r._strict=i,ke(r)}function Re(t,e,n,i){return Ce(t,e,n,i,!1)}function xe(t,e){var i,s;if(1===e.length&&n(e[0])&&(e=e[0]),!e.length)return Re();for(i=e[0],s=1;s<e.length;++s)(!e[s].isValid()||e[s][t](i))&&(i=e[s]);return i}function We(){var t=[].slice.call(arguments,0);return xe("isBefore",t)}function Ve(){var t=[].slice.call(arguments,0);return xe("isAfter",t)}function Ee(t){var e=b(t),n=e.year||0,i=e.quarter||0,s=e.month||0,r=e.week||0,o=e.day||0,a=e.hour||0,u=e.minute||0,d=e.second||0,l=e.millisecond||0;this._milliseconds=+l+1e3*d+6e4*u+36e5*a,this._days=+o+7*r,this._months=+s+3*i+12*n,this._data={},this._locale=T(),this._bubble()}function Ge(t){return t instanceof Ee}function Ue(t,e){G(t,0,0,function(){var t=this.utcOffset(),n="+";return 0>t&&(t=-t,n="-"),n+E(~~(t/60),2)+e+E(~~t%60,2)})}function Ie(t,e){var n=(e||"").match(t)||[],i=n[n.length-1]||[],s=(i+"").match(qs)||["-",0,0],r=+(60*s[1])+y(s[2]);return"+"===s[0]?r:-r}function Fe(e,n){var s,r;return n._isUTC?(s=n.clone(),r=(_(e)||i(e)?+e:+Re(e))-+s,s._d.setTime(+s._d+r),t.updateOffset(s,!1),s):Re(e).local()}function He(t){return 15*-Math.round(t._d.getTimezoneOffset()/15)}function Pe(e,n){var i,s=this._offset||0;return this.isValid()?null!=e?("string"==typeof e?e=Ie(ys,e):Math.abs(e)<16&&(e=60*e),!this._isUTC&&n&&(i=He(this)),this._offset=e,this._isUTC=!0,null!=i&&this.add(i,"m"),s!==e&&(!n||this._changeInProgress?nn(this,$e(e-s,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,t.updateOffset(this,!0),this._changeInProgress=null)),this):this._isUTC?s:He(this):null!=e?this:0/0}function Le(t,e){return null!=t?("string"!=typeof t&&(t=-t),this.utcOffset(t,e),this):-this.utcOffset()}function Ae(t){return this.utcOffset(0,t)}function Ne(t){return this._isUTC&&(this.utcOffset(0,t),this._isUTC=!1,t&&this.subtract(He(this),"m")),this}function ze(){return this._tzm?this.utcOffset(this._tzm):"string"==typeof this._i&&this.utcOffset(Ie(gs,this._i)),this}function je(t){return this.isValid()?(t=t?Re(t).utcOffset():0,(this.utcOffset()-t)%60===0):!1}function Ze(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()}function qe(){if(!h(this._isDSTShifted))return this._isDSTShifted;var t={};if(f(t,this),t=Oe(t),t._a){var e=t._isUTC?a(t._a):Re(t._a);this._isDSTShifted=this.isValid()&&p(t._a,e.toArray())>0}else this._isDSTShifted=!1;return this._isDSTShifted}function Je(){return this.isValid()?!this._isUTC:!1}function Be(){return this.isValid()?this._isUTC:!1}function Xe(){return this.isValid()?this._isUTC&&0===this._offset:!1}function $e(t,e){var n,i,s,o=t,a=null;return Ge(t)?o={ms:t._milliseconds,d:t._days,M:t._months}:"number"==typeof t?(o={},e?o[e]=t:o.milliseconds=t):(a=Js.exec(t))?(n="-"===a[1]?-1:1,o={y:0,d:y(a[Ys])*n,h:y(a[Ts])*n,m:y(a[ks])*n,s:y(a[Os])*n,ms:y(a[bs])*n}):(a=Bs.exec(t))?(n="-"===a[1]?-1:1,o={y:Qe(a[2],n),M:Qe(a[3],n),d:Qe(a[4],n),h:Qe(a[5],n),m:Qe(a[6],n),s:Qe(a[7],n),w:Qe(a[8],n)}):null==o?o={}:"object"==typeof o&&("from"in o||"to"in o)&&(s=tn(Re(o.from),Re(o.to)),o={},o.ms=s.milliseconds,o.M=s.months),i=new Ee(o),Ge(t)&&r(t,"_locale")&&(i._locale=t._locale),i}function Qe(t,e){var n=t&&parseFloat(t.replace(",","."));return(isNaN(n)?0:n)*e}function Ke(t,e){var n={milliseconds:0,months:0};return n.months=e.month()-t.month()+12*(e.year()-t.year()),t.clone().add(n.months,"M").isAfter(e)&&--n.months,n.milliseconds=+e-+t.clone().add(n.months,"M"),n}function tn(t,e){var n;return t.isValid()&&e.isValid()?(e=Fe(e,t),t.isBefore(e)?n=Ke(t,e):(n=Ke(e,t),n.milliseconds=-n.milliseconds,n.months=-n.months),n):{milliseconds:0,months:0}}function en(t,e){return function(n,i){var s,r;return null===i||isNaN(+i)||(oe(e,"moment()."+e+"(period, number) is deprecated. Please use moment()."+e+"(number, period)."),r=n,n=i,i=r),n="string"==typeof n?+n:n,s=$e(n,i),nn(this,s,t),this}}function nn(e,n,i,s){var r=n._milliseconds,o=n._days,a=n._months;e.isValid()&&(s=null==s?!0:s,r&&e._d.setTime(+e._d+r*i),o&&W(e,"Date",x(e,"Date")+o*i),a&&$(e,x(e,"Month")+a*i),s&&t.updateOffset(e,o||a))}function sn(t,e){var n=t||Re(),i=Fe(n,this).startOf("day"),s=this.diff(i,"days",!0),r=-6>s?"sameElse":-1>s?"lastWeek":0>s?"lastDay":1>s?"sameDay":2>s?"nextDay":7>s?"nextWeek":"sameElse",o=e&&(C(e[r])?e[r]():e[r]);return this.format(o||this.localeData().calendar(r,this,Re(n)))}function rn(){return new m(this)}function on(t,e){var n=_(t)?t:Re(t);return this.isValid()&&n.isValid()?(e=O(h(e)?"millisecond":e),"millisecond"===e?+this>+n:+n<+this.clone().startOf(e)):!1}function an(t,e){var n=_(t)?t:Re(t);return this.isValid()&&n.isValid()?(e=O(h(e)?"millisecond":e),"millisecond"===e?+n>+this:+this.clone().endOf(e)<+n):!1}function un(t,e,n){return this.isAfter(t,n)&&this.isBefore(e,n)}function dn(t,e){var n,i=_(t)?t:Re(t);return this.isValid()&&i.isValid()?(e=O(e||"millisecond"),"millisecond"===e?+this===+i:(n=+i,+this.clone().startOf(e)<=n&&n<=+this.clone().endOf(e))):!1}function ln(t,e){return this.isSame(t,e)||this.isAfter(t,e)}function cn(t,e){return this.isSame(t,e)||this.isBefore(t,e)}function hn(t,e,n){var i,s,r,o;return this.isValid()?(i=Fe(t,this),i.isValid()?(s=6e4*(i.utcOffset()-this.utcOffset()),e=O(e),"year"===e||"month"===e||"quarter"===e?(o=fn(this,i),"quarter"===e?o/=3:"year"===e&&(o/=12)):(r=this-i,o="second"===e?r/1e3:"minute"===e?r/6e4:"hour"===e?r/36e5:"day"===e?(r-s)/864e5:"week"===e?(r-s)/6048e5:r),n?o:g(o)):0/0):0/0}function fn(t,e){var n,i,s=12*(e.year()-t.year())+(e.month()-t.month()),r=t.clone().add(s,"months");return 0>e-r?(n=t.clone().add(s-1,"months"),i=(e-r)/(r-n)):(n=t.clone().add(s+1,"months"),i=(e-r)/(n-r)),-(s+i)}function mn(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")}function _n(){var t=this.clone().utc();return 0<t.year()&&t.year()<=9999?C(Date.prototype.toISOString)?this.toDate().toISOString():F(t,"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]"):F(t,"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]")}function gn(e){var n=F(this,e||t.defaultFormat);return this.localeData().postformat(n)}function yn(t,e){return this.isValid()&&(_(t)&&t.isValid()||Re(t).isValid())?$e({to:this,from:t}).locale(this.locale()).humanize(!e):this.localeData().invalidDate()}function pn(t){return this.from(Re(),t)}function vn(t,e){return this.isValid()&&(_(t)&&t.isValid()||Re(t).isValid())?$e({from:this,to:t}).locale(this.locale()).humanize(!e):this.localeData().invalidDate()}function Dn(t){return this.to(Re(),t)}function wn(t){var e;return void 0===t?this._locale._abbr:(e=T(t),null!=e&&(this._locale=e),this)}function Sn(){return this._locale}function Mn(t){switch(t=O(t)){case"year":this.month(0);case"quarter":case"month":this.date(1);case"week":case"isoWeek":case"day":this.hours(0);case"hour":this.minutes(0);case"minute":this.seconds(0);case"second":this.milliseconds(0)}return"week"===t&&this.weekday(0),"isoWeek"===t&&this.isoWeekday(1),"quarter"===t&&this.month(3*Math.floor(this.month()/3)),this}function Yn(t){return t=O(t),void 0===t||"millisecond"===t?this:this.startOf(t).add(1,"isoWeek"===t?"week":t).subtract(1,"ms")}function Tn(){return+this._d-6e4*(this._offset||0)}function kn(){return Math.floor(+this/1e3)}function On(){return this._offset?new Date(+this):this._d}function bn(){var t=this;return[t.year(),t.month(),t.date(),t.hour(),t.minute(),t.second(),t.millisecond()]}function Cn(){var t=this;return{years:t.year(),months:t.month(),date:t.date(),hours:t.hours(),minutes:t.minutes(),seconds:t.seconds(),milliseconds:t.milliseconds()}}function Rn(){return this.isValid()?this.toISOString():"null"}function xn(){return l(this)}function Wn(){return o({},d(this))}function Vn(){return d(this).overflow}function En(){return{input:this._i,format:this._f,locale:this._locale,isUTC:this._isUTC,strict:this._strict}}function Gn(t,e){G(0,[t,t.length],0,e)}function Un(t){return Pn.call(this,t,this.week(),this.weekday(),this.localeData()._week.dow,this.localeData()._week.doy)}function In(t){return Pn.call(this,t,this.isoWeek(),this.isoWeekday(),1,4)}function Fn(){return ye(this.year(),1,4)}function Hn(){var t=this.localeData()._week;return ye(this.year(),t.dow,t.doy)}function Pn(t,e,n,i,s){var r;return null==t?ge(this,i,s).year:(r=ye(t,i,s),e>r&&(e=r),Ln.call(this,t,e,n,i,s))}function Ln(t,e,n,i,s){var r=_e(t,e,n,i,s),o=le(r.year,0,r.dayOfYear);return this.year(o.getUTCFullYear()),this.month(o.getUTCMonth()),this.date(o.getUTCDate()),this}function An(t){return null==t?Math.ceil((this.month()+1)/3):this.month(3*(t-1)+this.month()%3)}function Nn(t){return ge(t,this._week.dow,this._week.doy).week}function zn(){return this._week.dow}function jn(){return this._week.doy}function Zn(t){var e=this.localeData().week(this);return null==t?e:this.add(7*(t-e),"d")}function qn(t){var e=ge(this,1,4).week;return null==t?e:this.add(7*(t-e),"d")}function Jn(t,e){return"string"!=typeof t?t:isNaN(t)?(t=e.weekdaysParse(t),"number"==typeof t?t:null):parseInt(t,10)}function Bn(t,e){return n(this._weekdays)?this._weekdays[t.day()]:this._weekdays[this._weekdays.isFormat.test(e)?"format":"standalone"][t.day()]}function Xn(t){return this._weekdaysShort[t.day()]}function $n(t){return this._weekdaysMin[t.day()]}function Qn(t,e,n){var i,s,r;for(this._weekdaysParse||(this._weekdaysParse=[],this._minWeekdaysParse=[],this._shortWeekdaysParse=[],this._fullWeekdaysParse=[]),i=0;7>i;i++){if(s=Re([2e3,1]).day(i),n&&!this._fullWeekdaysParse[i]&&(this._fullWeekdaysParse[i]=new RegExp("^"+this.weekdays(s,"").replace(".",".?")+"$","i"),this._shortWeekdaysParse[i]=new RegExp("^"+this.weekdaysShort(s,"").replace(".",".?")+"$","i"),this._minWeekdaysParse[i]=new RegExp("^"+this.weekdaysMin(s,"").replace(".",".?")+"$","i")),this._weekdaysParse[i]||(r="^"+this.weekdays(s,"")+"|^"+this.weekdaysShort(s,"")+"|^"+this.weekdaysMin(s,""),this._weekdaysParse[i]=new RegExp(r.replace(".",""),"i")),n&&"dddd"===e&&this._fullWeekdaysParse[i].test(t))return i;if(n&&"ddd"===e&&this._shortWeekdaysParse[i].test(t))return i;if(n&&"dd"===e&&this._minWeekdaysParse[i].test(t))return i;if(!n&&this._weekdaysParse[i].test(t))return i}}function Kn(t){if(!this.isValid())return null!=t?this:0/0;var e=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=t?(t=Jn(t,this.localeData()),this.add(t-e,"d")):e}function ti(t){if(!this.isValid())return null!=t?this:0/0;var e=(this.day()+7-this.localeData()._week.dow)%7;return null==t?e:this.add(t-e,"d")}function ei(t){return this.isValid()?null==t?this.day()||7:this.day(this.day()%7?t:t-7):null!=t?this:0/0}function ni(t){var e=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return null==t?e:this.add(t-e,"d")}function ii(){return this.hours()%12||12}function si(t,e){G(t,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),e)})}function ri(t,e){return e._meridiemParse}function oi(t){return"p"===(t+"").toLowerCase().charAt(0)}function ai(t,e,n){return t>11?n?"pm":"PM":n?"am":"AM"}function ui(t,e){e[bs]=y(1e3*("0."+t))}function di(){return this._isUTC?"UTC":""}function li(){return this._isUTC?"Coordinated Universal Time":""}function ci(t){return Re(1e3*t)}function hi(){return Re.apply(null,arguments).parseZone()}function fi(t,e,n){var i=this._calendar[t];return C(i)?i.call(e,n):i}function mi(t){var e=this._longDateFormat[t],n=this._longDateFormat[t.toUpperCase()];return e||!n?e:(this._longDateFormat[t]=n.replace(/MMMM|MM|DD|dddd/g,function(t){return t.slice(1)}),this._longDateFormat[t])}function _i(){return this._invalidDate}function gi(t){return this._ordinal.replace("%d",t)}function yi(t){return t}function pi(t,e,n,i){var s=this._relativeTime[n];return C(s)?s(t,e,n,i):s.replace(/%d/i,t)}function vi(t,e){var n=this._relativeTime[t>0?"future":"past"];return C(n)?n(e):n.replace(/%s/i,e)}function Di(t){var e,n;for(n in t)e=t[n],C(e)?this[n]=e:this["_"+n]=e;this._ordinalParseLenient=new RegExp(this._ordinalParse.source+"|"+/\d{1,2}/.source)}function wi(t,e,n,i){var s=T(),r=a().set(i,e);return s[n](r,t)}function Si(t,e,n,i,s){if("number"==typeof t&&(e=t,t=void 0),t=t||"",null!=e)return wi(t,e,n,s);var r,o=[];for(r=0;i>r;r++)o[r]=wi(t,r,n,s);return o}function Mi(t,e){return Si(t,e,"months",12,"month")}function Yi(t,e){return Si(t,e,"monthsShort",12,"month")}function Ti(t,e){return Si(t,e,"weekdays",7,"day")}function ki(t,e){return Si(t,e,"weekdaysShort",7,"day")}function Oi(t,e){return Si(t,e,"weekdaysMin",7,"day")}function bi(){var t=this._data;return this._milliseconds=vr(this._milliseconds),this._days=vr(this._days),this._months=vr(this._months),t.milliseconds=vr(t.milliseconds),t.seconds=vr(t.seconds),t.minutes=vr(t.minutes),t.hours=vr(t.hours),t.months=vr(t.months),t.years=vr(t.years),this}function Ci(t,e,n,i){var s=$e(e,n);return t._milliseconds+=i*s._milliseconds,t._days+=i*s._days,t._months+=i*s._months,t._bubble()}function Ri(t,e){return Ci(this,t,e,1)}function xi(t,e){return Ci(this,t,e,-1)}function Wi(t){return 0>t?Math.floor(t):Math.ceil(t)}function Vi(){var t,e,n,i,s,r=this._milliseconds,o=this._days,a=this._months,u=this._data;return r>=0&&o>=0&&a>=0||0>=r&&0>=o&&0>=a||(r+=864e5*Wi(Gi(a)+o),o=0,a=0),u.milliseconds=r%1e3,t=g(r/1e3),u.seconds=t%60,e=g(t/60),u.minutes=e%60,n=g(e/60),u.hours=n%24,o+=g(n/24),s=g(Ei(o)),a+=s,o-=Wi(Gi(s)),i=g(a/12),a%=12,u.days=o,u.months=a,u.years=i,this}function Ei(t){return 4800*t/146097}function Gi(t){return 146097*t/4800}function Ui(t){var e,n,i=this._milliseconds;if(t=O(t),"month"===t||"year"===t)return e=this._days+i/864e5,n=this._months+Ei(e),"month"===t?n:n/12;
switch(e=this._days+Math.round(Gi(this._months)),t){case"week":return e/7+i/6048e5;case"day":return e+i/864e5;case"hour":return 24*e+i/36e5;case"minute":return 1440*e+i/6e4;case"second":return 86400*e+i/1e3;case"millisecond":return Math.floor(864e5*e)+i;default:throw new Error("Unknown unit "+t)}}function Ii(){return this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*y(this._months/12)}function Fi(t){return function(){return this.as(t)}}function Hi(t){return t=O(t),this[t+"s"]()}function Pi(t){return function(){return this._data[t]}}function Li(){return g(this.days()/7)}function Ai(t,e,n,i,s){return s.relativeTime(e||1,!!n,t,i)}function Ni(t,e,n){var i=$e(t).abs(),s=Gr(i.as("s")),r=Gr(i.as("m")),o=Gr(i.as("h")),a=Gr(i.as("d")),u=Gr(i.as("M")),d=Gr(i.as("y")),l=s<Ur.s&&["s",s]||1>=r&&["m"]||r<Ur.m&&["mm",r]||1>=o&&["h"]||o<Ur.h&&["hh",o]||1>=a&&["d"]||a<Ur.d&&["dd",a]||1>=u&&["M"]||u<Ur.M&&["MM",u]||1>=d&&["y"]||["yy",d];return l[2]=e,l[3]=+t>0,l[4]=n,Ai.apply(null,l)}function zi(t,e){return void 0===Ur[t]?!1:void 0===e?Ur[t]:(Ur[t]=e,!0)}function ji(t){var e=this.localeData(),n=Ni(this,!t,e);return t&&(n=e.pastFuture(+this,n)),e.postformat(n)}function Zi(){var t,e,n,i=Ir(this._milliseconds)/1e3,s=Ir(this._days),r=Ir(this._months);t=g(i/60),e=g(t/60),i%=60,t%=60,n=g(r/12),r%=12;var o=n,a=r,u=s,d=e,l=t,c=i,h=this.asSeconds();return h?(0>h?"-":"")+"P"+(o?o+"Y":"")+(a?a+"M":"")+(u?u+"D":"")+(d||l||c?"T":"")+(d?d+"H":"")+(l?l+"M":"")+(c?c+"S":""):"P0D"}var qi,Ji,Bi=t.momentProperties=[],Xi=!1,$i={},Qi={},Ki=/(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,ts=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,es={},ns={},is=/\d/,ss=/\d\d/,rs=/\d{3}/,os=/\d{4}/,as=/[+-]?\d{6}/,us=/\d\d?/,ds=/\d\d\d\d?/,ls=/\d\d\d\d\d\d?/,cs=/\d{1,3}/,hs=/\d{1,4}/,fs=/[+-]?\d{1,6}/,ms=/\d+/,_s=/[+-]?\d+/,gs=/Z|[+-]\d\d:?\d\d/gi,ys=/Z|[+-]\d\d(?::?\d\d)?/gi,ps=/[+-]?\d+(\.\d{1,3})?/,vs=/[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i,Ds={},ws={},Ss=0,Ms=1,Ys=2,Ts=3,ks=4,Os=5,bs=6,Cs=7,Rs=8;G("M",["MM",2],"Mo",function(){return this.month()+1}),G("MMM",0,0,function(t){return this.localeData().monthsShort(this,t)}),G("MMMM",0,0,function(t){return this.localeData().months(this,t)}),k("month","M"),P("M",us),P("MM",us,ss),P("MMM",function(t,e){return e.monthsShortRegex(t)}),P("MMMM",function(t,e){return e.monthsRegex(t)}),z(["M","MM"],function(t,e){e[Ms]=y(t)-1}),z(["MMM","MMMM"],function(t,e,n,i){var s=n._locale.monthsParse(t,i,n._strict);null!=s?e[Ms]=s:d(n).invalidMonth=t});var xs=/D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/,Ws="January_February_March_April_May_June_July_August_September_October_November_December".split("_"),Vs="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),Es=vs,Gs=vs,Us={};t.suppressDeprecationWarnings=!1;var Is=/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/,Fs=/^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/,Hs=/Z|[+-]\d\d(?::?\d\d)?/,Ps=[["YYYYYY-MM-DD",/[+-]\d{6}-\d\d-\d\d/],["YYYY-MM-DD",/\d{4}-\d\d-\d\d/],["GGGG-[W]WW-E",/\d{4}-W\d\d-\d/],["GGGG-[W]WW",/\d{4}-W\d\d/,!1],["YYYY-DDD",/\d{4}-\d{3}/],["YYYY-MM",/\d{4}-\d\d/,!1],["YYYYYYMMDD",/[+-]\d{10}/],["YYYYMMDD",/\d{8}/],["GGGG[W]WWE",/\d{4}W\d{3}/],["GGGG[W]WW",/\d{4}W\d{2}/,!1],["YYYYDDD",/\d{7}/]],Ls=[["HH:mm:ss.SSSS",/\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss,SSSS",/\d\d:\d\d:\d\d,\d+/],["HH:mm:ss",/\d\d:\d\d:\d\d/],["HH:mm",/\d\d:\d\d/],["HHmmss.SSSS",/\d\d\d\d\d\d\.\d+/],["HHmmss,SSSS",/\d\d\d\d\d\d,\d+/],["HHmmss",/\d\d\d\d\d\d/],["HHmm",/\d\d\d\d/],["HH",/\d\d/]],As=/^\/?Date\((\-?\d+)/i;t.createFromInputFallback=re("moment construction falls back to js Date. This is discouraged and will be removed in upcoming major release. Please refer to https://github.com/moment/moment/issues/1407 for more info.",function(t){t._d=new Date(t._i+(t._useUTC?" UTC":""))}),G("Y",0,0,function(){var t=this.year();return 9999>=t?""+t:"+"+t}),G(0,["YY",2],0,function(){return this.year()%100}),G(0,["YYYY",4],0,"year"),G(0,["YYYYY",5],0,"year"),G(0,["YYYYYY",6,!0],0,"year"),k("year","y"),P("Y",_s),P("YY",us,ss),P("YYYY",hs,os),P("YYYYY",fs,as),P("YYYYYY",fs,as),z(["YYYYY","YYYYYY"],Ss),z("YYYY",function(e,n){n[Ss]=2===e.length?t.parseTwoDigitYear(e):y(e)}),z("YY",function(e,n){n[Ss]=t.parseTwoDigitYear(e)}),z("Y",function(t,e){e[Ss]=parseInt(t,10)}),t.parseTwoDigitYear=function(t){return y(t)+(y(t)>68?1900:2e3)};var Ns=R("FullYear",!1);t.ISO_8601=function(){};var zs=re("moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548",function(){var t=Re.apply(null,arguments);return this.isValid()&&t.isValid()?this>t?this:t:c()}),js=re("moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548",function(){var t=Re.apply(null,arguments);return this.isValid()&&t.isValid()?t>this?this:t:c()}),Zs=function(){return Date.now?Date.now():+new Date};Ue("Z",":"),Ue("ZZ",""),P("Z",ys),P("ZZ",ys),z(["Z","ZZ"],function(t,e,n){n._useUTC=!0,n._tzm=Ie(ys,t)});var qs=/([\+\-]|\d\d)/gi;t.updateOffset=function(){};var Js=/(\-)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/,Bs=/^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/;$e.fn=Ee.prototype;var Xs=en(1,"add"),$s=en(-1,"subtract");t.defaultFormat="YYYY-MM-DDTHH:mm:ssZ";var Qs=re("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",function(t){return void 0===t?this.localeData():this.locale(t)});G(0,["gg",2],0,function(){return this.weekYear()%100}),G(0,["GG",2],0,function(){return this.isoWeekYear()%100}),Gn("gggg","weekYear"),Gn("ggggg","weekYear"),Gn("GGGG","isoWeekYear"),Gn("GGGGG","isoWeekYear"),k("weekYear","gg"),k("isoWeekYear","GG"),P("G",_s),P("g",_s),P("GG",us,ss),P("gg",us,ss),P("GGGG",hs,os),P("gggg",hs,os),P("GGGGG",fs,as),P("ggggg",fs,as),j(["gggg","ggggg","GGGG","GGGGG"],function(t,e,n,i){e[i.substr(0,2)]=y(t)}),j(["gg","GG"],function(e,n,i,s){n[s]=t.parseTwoDigitYear(e)}),G("Q",0,"Qo","quarter"),k("quarter","Q"),P("Q",is),z("Q",function(t,e){e[Ms]=3*(y(t)-1)}),G("w",["ww",2],"wo","week"),G("W",["WW",2],"Wo","isoWeek"),k("week","w"),k("isoWeek","W"),P("w",us),P("ww",us,ss),P("W",us),P("WW",us,ss),j(["w","ww","W","WW"],function(t,e,n,i){e[i.substr(0,1)]=y(t)});var Ks={dow:0,doy:6};G("D",["DD",2],"Do","date"),k("date","D"),P("D",us),P("DD",us,ss),P("Do",function(t,e){return t?e._ordinalParse:e._ordinalParseLenient}),z(["D","DD"],Ys),z("Do",function(t,e){e[Ys]=y(t.match(us)[0],10)});var tr=R("Date",!0);G("d",0,"do","day"),G("dd",0,0,function(t){return this.localeData().weekdaysMin(this,t)}),G("ddd",0,0,function(t){return this.localeData().weekdaysShort(this,t)}),G("dddd",0,0,function(t){return this.localeData().weekdays(this,t)}),G("e",0,0,"weekday"),G("E",0,0,"isoWeekday"),k("day","d"),k("weekday","e"),k("isoWeekday","E"),P("d",us),P("e",us),P("E",us),P("dd",vs),P("ddd",vs),P("dddd",vs),j(["dd","ddd","dddd"],function(t,e,n,i){var s=n._locale.weekdaysParse(t,i,n._strict);null!=s?e.d=s:d(n).invalidWeekday=t}),j(["d","e","E"],function(t,e,n,i){e[i]=y(t)});var er="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),nr="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),ir="Su_Mo_Tu_We_Th_Fr_Sa".split("_");G("DDD",["DDDD",3],"DDDo","dayOfYear"),k("dayOfYear","DDD"),P("DDD",cs),P("DDDD",rs),z(["DDD","DDDD"],function(t,e,n){n._dayOfYear=y(t)}),G("H",["HH",2],0,"hour"),G("h",["hh",2],0,ii),G("hmm",0,0,function(){return""+ii.apply(this)+E(this.minutes(),2)}),G("hmmss",0,0,function(){return""+ii.apply(this)+E(this.minutes(),2)+E(this.seconds(),2)}),G("Hmm",0,0,function(){return""+this.hours()+E(this.minutes(),2)}),G("Hmmss",0,0,function(){return""+this.hours()+E(this.minutes(),2)+E(this.seconds(),2)}),si("a",!0),si("A",!1),k("hour","h"),P("a",ri),P("A",ri),P("H",us),P("h",us),P("HH",us,ss),P("hh",us,ss),P("hmm",ds),P("hmmss",ls),P("Hmm",ds),P("Hmmss",ls),z(["H","HH"],Ts),z(["a","A"],function(t,e,n){n._isPm=n._locale.isPM(t),n._meridiem=t}),z(["h","hh"],function(t,e,n){e[Ts]=y(t),d(n).bigHour=!0}),z("hmm",function(t,e,n){var i=t.length-2;e[Ts]=y(t.substr(0,i)),e[ks]=y(t.substr(i)),d(n).bigHour=!0}),z("hmmss",function(t,e,n){var i=t.length-4,s=t.length-2;e[Ts]=y(t.substr(0,i)),e[ks]=y(t.substr(i,2)),e[Os]=y(t.substr(s)),d(n).bigHour=!0}),z("Hmm",function(t,e){var n=t.length-2;e[Ts]=y(t.substr(0,n)),e[ks]=y(t.substr(n))}),z("Hmmss",function(t,e){var n=t.length-4,i=t.length-2;e[Ts]=y(t.substr(0,n)),e[ks]=y(t.substr(n,2)),e[Os]=y(t.substr(i))});var sr=/[ap]\.?m?\.?/i,rr=R("Hours",!0);G("m",["mm",2],0,"minute"),k("minute","m"),P("m",us),P("mm",us,ss),z(["m","mm"],ks);var or=R("Minutes",!1);G("s",["ss",2],0,"second"),k("second","s"),P("s",us),P("ss",us,ss),z(["s","ss"],Os);var ar=R("Seconds",!1);G("S",0,0,function(){return~~(this.millisecond()/100)}),G(0,["SS",2],0,function(){return~~(this.millisecond()/10)}),G(0,["SSS",3],0,"millisecond"),G(0,["SSSS",4],0,function(){return 10*this.millisecond()}),G(0,["SSSSS",5],0,function(){return 100*this.millisecond()}),G(0,["SSSSSS",6],0,function(){return 1e3*this.millisecond()}),G(0,["SSSSSSS",7],0,function(){return 1e4*this.millisecond()}),G(0,["SSSSSSSS",8],0,function(){return 1e5*this.millisecond()}),G(0,["SSSSSSSSS",9],0,function(){return 1e6*this.millisecond()}),k("millisecond","ms"),P("S",cs,is),P("SS",cs,ss),P("SSS",cs,rs);var ur;for(ur="SSSS";ur.length<=9;ur+="S")P(ur,ms);for(ur="S";ur.length<=9;ur+="S")z(ur,ui);var dr=R("Milliseconds",!1);G("z",0,0,"zoneAbbr"),G("zz",0,0,"zoneName");var lr=m.prototype;lr.add=Xs,lr.calendar=sn,lr.clone=rn,lr.diff=hn,lr.endOf=Yn,lr.format=gn,lr.from=yn,lr.fromNow=pn,lr.to=vn,lr.toNow=Dn,lr.get=V,lr.invalidAt=Vn,lr.isAfter=on,lr.isBefore=an,lr.isBetween=un,lr.isSame=dn,lr.isSameOrAfter=ln,lr.isSameOrBefore=cn,lr.isValid=xn,lr.lang=Qs,lr.locale=wn,lr.localeData=Sn,lr.max=js,lr.min=zs,lr.parsingFlags=Wn,lr.set=V,lr.startOf=Mn,lr.subtract=$s,lr.toArray=bn,lr.toObject=Cn,lr.toDate=On,lr.toISOString=_n,lr.toJSON=Rn,lr.toString=mn,lr.unix=kn,lr.valueOf=Tn,lr.creationData=En,lr.year=Ns,lr.isLeapYear=fe,lr.weekYear=Un,lr.isoWeekYear=In,lr.quarter=lr.quarters=An,lr.month=Q,lr.daysInMonth=K,lr.week=lr.weeks=Zn,lr.isoWeek=lr.isoWeeks=qn,lr.weeksInYear=Hn,lr.isoWeeksInYear=Fn,lr.date=tr,lr.day=lr.days=Kn,lr.weekday=ti,lr.isoWeekday=ei,lr.dayOfYear=ni,lr.hour=lr.hours=rr,lr.minute=lr.minutes=or,lr.second=lr.seconds=ar,lr.millisecond=lr.milliseconds=dr,lr.utcOffset=Pe,lr.utc=Ae,lr.local=Ne,lr.parseZone=ze,lr.hasAlignedHourOffset=je,lr.isDST=Ze,lr.isDSTShifted=qe,lr.isLocal=Je,lr.isUtcOffset=Be,lr.isUtc=Xe,lr.isUTC=Xe,lr.zoneAbbr=di,lr.zoneName=li,lr.dates=re("dates accessor is deprecated. Use date instead.",tr),lr.months=re("months accessor is deprecated. Use month instead",Q),lr.years=re("years accessor is deprecated. Use year instead",Ns),lr.zone=re("moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779",Le);var cr=lr,hr={sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},fr={LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},mr="Invalid date",_r="%d",gr=/\d{1,2}/,yr={future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},pr=v.prototype;pr._calendar=hr,pr.calendar=fi,pr._longDateFormat=fr,pr.longDateFormat=mi,pr._invalidDate=mr,pr.invalidDate=_i,pr._ordinal=_r,pr.ordinal=gi,pr._ordinalParse=gr,pr.preparse=yi,pr.postformat=yi,pr._relativeTime=yr,pr.relativeTime=pi,pr.pastFuture=vi,pr.set=Di,pr.months=J,pr._months=Ws,pr.monthsShort=B,pr._monthsShort=Vs,pr.monthsParse=X,pr._monthsRegex=Gs,pr.monthsRegex=ee,pr._monthsShortRegex=Es,pr.monthsShortRegex=te,pr.week=Nn,pr._week=Ks,pr.firstDayOfYear=jn,pr.firstDayOfWeek=zn,pr.weekdays=Bn,pr._weekdays=er,pr.weekdaysMin=$n,pr._weekdaysMin=ir,pr.weekdaysShort=Xn,pr._weekdaysShort=nr,pr.weekdaysParse=Qn,pr.isPM=oi,pr._meridiemParse=sr,pr.meridiem=ai,M("en",{ordinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(t){var e=t%10,n=1===y(t%100/10)?"th":1===e?"st":2===e?"nd":3===e?"rd":"th";return t+n}}),t.lang=re("moment.lang is deprecated. Use moment.locale instead.",M),t.langData=re("moment.langData is deprecated. Use moment.localeData instead.",T);var vr=Math.abs,Dr=Fi("ms"),wr=Fi("s"),Sr=Fi("m"),Mr=Fi("h"),Yr=Fi("d"),Tr=Fi("w"),kr=Fi("M"),Or=Fi("y"),br=Pi("milliseconds"),Cr=Pi("seconds"),Rr=Pi("minutes"),xr=Pi("hours"),Wr=Pi("days"),Vr=Pi("months"),Er=Pi("years"),Gr=Math.round,Ur={s:45,m:45,h:22,d:26,M:11},Ir=Math.abs,Fr=Ee.prototype;Fr.abs=bi,Fr.add=Ri,Fr.subtract=xi,Fr.as=Ui,Fr.asMilliseconds=Dr,Fr.asSeconds=wr,Fr.asMinutes=Sr,Fr.asHours=Mr,Fr.asDays=Yr,Fr.asWeeks=Tr,Fr.asMonths=kr,Fr.asYears=Or,Fr.valueOf=Ii,Fr._bubble=Vi,Fr.get=Hi,Fr.milliseconds=br,Fr.seconds=Cr,Fr.minutes=Rr,Fr.hours=xr,Fr.days=Wr,Fr.weeks=Li,Fr.months=Vr,Fr.years=Er,Fr.humanize=ji,Fr.toISOString=Zi,Fr.toString=Zi,Fr.toJSON=Zi,Fr.locale=wn,Fr.localeData=Sn,Fr.toIsoString=re("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",Zi),Fr.lang=Qs,G("X",0,0,"unix"),G("x",0,0,"valueOf"),P("x",_s),P("X",ps),z("X",function(t,e,n){n._d=new Date(1e3*parseFloat(t,10))}),z("x",function(t,e,n){n._d=new Date(y(t))}),t.version="2.11.1",e(Re),t.fn=cr,t.min=We,t.max=Ve,t.now=Zs,t.utc=a,t.unix=ci,t.months=Mi,t.isDate=i,t.locale=M,t.invalid=c,t.duration=$e,t.isMoment=_,t.weekdays=Ti,t.parseZone=hi,t.localeData=T,t.isDuration=Ge,t.monthsShort=Yi,t.weekdaysMin=Oi,t.defineLocale=Y,t.weekdaysShort=ki,t.normalizeUnits=O,t.relativeTimeThreshold=zi,t.prototype=cr;var Hr=t;return Hr}),"undefined"!=typeof angular&&angular.module("risevision.common.i18n.config",[]).constant("LOCALES_PREFIX","locales/translation_").constant("LOCALES_SUFIX",".json");var config={},RiseVision=RiseVision||{};RiseVision.TimeDate={},RiseVision.TimeDate=function(t){"use strict";function e(){var t=[{"class":"time-and-date",fontSetting:m.fontStyle}];RiseVision.Common.Utilities.loadFonts(t),h=m.showTime?m.timeFormat:"",h+=m.showTime&&m.showDate?" ":"",h+=m.showDate?m.dateFormat:"",c=document.createElement("div"),c.className="time-and-date",document.getElementById("container").appendChild(c),n()}function n(){t.rpc.call("","rsevent_ready",null,f.getString("id"),!0,!0,!0,!0,!1)}function i(t){m=JSON.parse(JSON.stringify(t)),m.width=f.getInt("rsW"),m.height=f.getInt("rsH"),document.getElementById("container").style.width=m.width+"px",document.getElementById("container").style.height=m.height+"px",_=new RiseVision.Common.Message(document.getElementById("container"),document.getElementById("messageContainer")),e()}function s(){if(h){var t=new Date;c.innerHTML=moment(t).format(h),l=setTimeout(function(){s()},1e3)}}function r(){clearTimeout(l)}function o(){g||(d({event:"configuration",event_details:JSON.stringify(m)}),g=!0),s(),d({event:"play",event_details:h})}function a(){r()}function u(){return"time_date_events"}function d(t){RiseVision.Common.LoggerUtils.logEvent(u(),t)}var l,c,h,f=new t.Prefs,m=null,_=null,g=!1;return{pause:r,play:o,setAdditionalParams:i,stop:a,logEvent:d,getTableName:u}}(gadgets);var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.Message=function(t,e){"use strict";function n(){try{e.style.height=t.style.height}catch(n){console.warn("Can't initialize Message - ",n.message)}}function i(){if(r){for(;e.firstChild;)e.removeChild(e.firstChild);e.style.display="none",t.style.visibility="visible",r=!1}}function s(n){var i,s=document.createDocumentFragment();r?(i=e.querySelector(".message"),i.innerHTML=n):(t.style.visibility="hidden",e.style.display="block",i=document.createElement("p"),i.innerHTML=n,i.setAttribute("class","message"),s.appendChild(i),e.appendChild(s),r=!0)}var r=!1;return n(),{hide:i,show:s}},function(t,e,n){"use strict";function i(t,e){var n,i="",s="";Array.isArray(t)&&t.length>0&&Array.isArray(e)&&e.length>0&&("companyId"===t[0]&&(i=e[0]),"displayId"===t[1]&&(s=e[1]?e[1]:"preview"),RiseVision.Common.LoggerUtils.setIds(i,s),"additionalParams"===t[2]&&(n=JSON.parse(e[2]),RiseVision.TimeDate.setAdditionalParams(n)))}function s(){RiseVision.TimeDate.pause()}function r(){RiseVision.TimeDate.play()}function o(){RiseVision.TimeDate.stop()}var a=(new n.Prefs).getString("id");t.oncontextmenu=function(){return!1},e.body.onmousedown=function(){return!1},a&&""!==a&&(n.rpc.register("rscmd_play_"+a,r),n.rpc.register("rscmd_pause_"+a,s),n.rpc.register("rscmd_stop_"+a,o),n.rpc.register("rsparam_set_"+a,i),n.rpc.call("","rsparam_get",null,a,["companyId","displayId","additionalParams"]))}(window,document,gadgets);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpzL3dpZGdldC5taW4uanMiXSwibmFtZXMiOlsiV0lER0VUX0NPTU1PTl9DT05GSUciLCJBVVRIX1BBVEhfVVJMIiwiTE9HR0VSX0NMSUVOVF9JRCIsIkxPR0dFUl9DTElFTlRfU0VDUkVUIiwiTE9HR0VSX1JFRlJFU0hfVE9LRU4iLCJTVE9SQUdFX0VOViIsIlNUT1JFX1VSTCIsIlJpc2VWaXNpb24iLCJDb21tb24iLCJMb2dnZXJVdGlscyIsImdldEV2ZW50UGFyYW1zIiwicGFyYW1zIiwiY2IiLCJqc29uIiwiZXZlbnQiLCJmaWxlX3VybCIsImZpbGVfZm9ybWF0IiwiZ2V0RmlsZUZvcm1hdCIsImNvbXBhbnlfaWQiLCJjb21wYW55SWQiLCJkaXNwbGF5X2lkIiwiZGlzcGxheUlkIiwiZ2V0U3VmZml4IiwiZGF0ZSIsIkRhdGUiLCJ5ZWFyIiwiZ2V0VVRDRnVsbFllYXIiLCJtb250aCIsImdldFVUQ01vbnRoIiwiZGF5IiwiZ2V0VVRDRGF0ZSIsInVybCIsInN0ciIsImhhc1BhcmFtcyIsInN1YnN0ciIsImxhc3RJbmRleE9mIiwidGVzdCIsImluZGV4T2YiLCJsZW5ndGgiLCJ0b0xvd2VyQ2FzZSIsImdldEluc2VydERhdGEiLCJCQVNFX0lOU0VSVF9TQ0hFTUEiLCJraW5kIiwic2tpcEludmFsaWRSb3dzIiwiaWdub3JlVW5rbm93blZhbHVlcyIsInRlbXBsYXRlU3VmZml4Iiwicm93cyIsImluc2VydElkIiwiZGF0YSIsIkpTT04iLCJwYXJzZSIsInN0cmluZ2lmeSIsIk1hdGgiLCJyYW5kb20iLCJ0b1N0cmluZyIsInRvVXBwZXJDYXNlIiwidHMiLCJ0b0lTT1N0cmluZyIsImxvZ0V2ZW50IiwidGFibGUiLCJMb2dnZXIiLCJsb2ciLCJzZXRJZHMiLCJjb21wYW55IiwiZGlzcGxheSIsInV0aWxzIiwicmVmcmVzaFRva2VuIiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJyZWZyZXNoRGF0ZSIsIm9wZW4iLCJSRUZSRVNIX1VSTCIsIm9ubG9hZGVuZCIsInJlc3AiLCJyZXNwb25zZSIsInRva2VuIiwiYWNjZXNzX3Rva2VuIiwicmVmcmVzaGVkQXQiLCJzZW5kIiwiaXNUaHJvdHRsZWQiLCJ0aHJvdHRsZSIsImxhc3RFdmVudCIsInRhYmxlTmFtZSIsImluc2VydFdpdGhUb2tlbiIsInJlZnJlc2hEYXRhIiwiaW5zZXJ0RGF0YSIsInNlcnZpY2VVcmwiLCJyZXBsYWNlIiwic2V0UmVxdWVzdEhlYWRlciIsImhhc093blByb3BlcnR5Iiwic2V0VGltZW91dCIsInRocm90dGxlRGVsYXkiLCJSaXNlQ2FjaGUiLCJwaW5nIiwiY2FsbGJhY2siLCJyIiwiQkFTRV9DQUNIRV9VUkwiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwiX3BpbmdSZWNlaXZlZCIsInN0YXR1cyIsIl9pc0NhY2hlUnVubmluZyIsInJlc3BvbnNlVGV4dCIsImNvbnNvbGUiLCJkZWJ1ZyIsImUiLCJkZXNjcmlwdGlvbiIsImdldEZpbGUiLCJmaWxlVXJsIiwibm9jYWNoZWJ1c3RlciIsImZpbGVSZXF1ZXN0IiwiaXNDYWNoZVJ1bm5pbmciLCJzZXBhcmF0b3IiLCJlbmNvZGVVUklDb21wb25lbnQiLCJnZXRUaW1lIiwic3BsaXQiLCJtYWtlUmVxdWVzdCIsIm1ldGhvZCIsInJlcXVlc3QiLCJhZGRFdmVudExpc3RlbmVyIiwiRXJyb3IiLCJ0aGlzIiwiVXRpbGl0aWVzIiwiZ2V0Rm9udENzc1N0eWxlIiwiY2xhc3NOYW1lIiwiZm9udE9iaiIsImZhbWlseSIsImZvbnQiLCJjb2xvciIsInNpemUiLCJ3ZWlnaHQiLCJib2xkIiwiaXRhbGljIiwidW5kZXJsaW5lIiwiaGlnaGxpZ2h0IiwiaGlnaGxpZ2h0Q29sb3IiLCJhZGRDU1NSdWxlcyIsInJ1bGVzIiwic3R5bGUiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJpIiwiYXBwZW5kQ2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsImhlYWQiLCJsb2FkRm9udHMiLCJzZXR0aW5ncyIsImNvbnRlbnREb2MiLCJmb3JFYWNoIiwiaXRlbSIsImNsYXNzIiwiZm9udFNldHRpbmciLCJ0eXBlIiwibG9hZEN1c3RvbUZvbnQiLCJsb2FkR29vZ2xlRm9udCIsInNoZWV0IiwicnVsZSIsInN0eWxlU2hlZXRzIiwiYWRkUnVsZSIsInN0eWxlc2hlZXQiLCJzZXRBdHRyaWJ1dGUiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInByZWxvYWRJbWFnZXMiLCJ1cmxzIiwiaW1hZ2VzIiwiSW1hZ2UiLCJzcmMiLCJnZXRRdWVyeVBhcmFtZXRlciIsInBhcmFtIiwicGFpciIsInF1ZXJ5Iiwid2luZG93IiwibG9jYXRpb24iLCJzZWFyY2giLCJzdWJzdHJpbmciLCJ2YXJzIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiZ2xvYmFsIiwiZmFjdG9yeSIsImV4cG9ydHMiLCJtb2R1bGUiLCJkZWZpbmUiLCJhbWQiLCJtb21lbnQiLCJ1dGlsc19ob29rc19faG9va3MiLCJob29rQ2FsbGJhY2siLCJhcHBseSIsImFyZ3VtZW50cyIsInNldEhvb2tDYWxsYmFjayIsImlzQXJyYXkiLCJpbnB1dCIsIk9iamVjdCIsInByb3RvdHlwZSIsImNhbGwiLCJpc0RhdGUiLCJtYXAiLCJhcnIiLCJmbiIsInJlcyIsInB1c2giLCJoYXNPd25Qcm9wIiwiYSIsImIiLCJleHRlbmQiLCJ2YWx1ZU9mIiwiY3JlYXRlX3V0Y19fY3JlYXRlVVRDIiwiZm9ybWF0IiwibG9jYWxlIiwic3RyaWN0IiwiY3JlYXRlTG9jYWxPclVUQyIsInV0YyIsImRlZmF1bHRQYXJzaW5nRmxhZ3MiLCJlbXB0eSIsInVudXNlZFRva2VucyIsInVudXNlZElucHV0Iiwib3ZlcmZsb3ciLCJjaGFyc0xlZnRPdmVyIiwibnVsbElucHV0IiwiaW52YWxpZE1vbnRoIiwiaW52YWxpZEZvcm1hdCIsInVzZXJJbnZhbGlkYXRlZCIsImlzbyIsImdldFBhcnNpbmdGbGFncyIsIm0iLCJfcGYiLCJ2YWxpZF9faXNWYWxpZCIsIl9pc1ZhbGlkIiwiZmxhZ3MiLCJpc05hTiIsIl9kIiwiaW52YWxpZFdlZWtkYXkiLCJfc3RyaWN0IiwidW5kZWZpbmVkIiwiYmlnSG91ciIsInZhbGlkX19jcmVhdGVJbnZhbGlkIiwiTmFOIiwiaXNVbmRlZmluZWQiLCJjb3B5Q29uZmlnIiwidG8iLCJmcm9tIiwicHJvcCIsInZhbCIsIl9pc0FNb21lbnRPYmplY3QiLCJfaSIsIl9mIiwiX2wiLCJfdHptIiwiX2lzVVRDIiwiX29mZnNldCIsIl9sb2NhbGUiLCJtb21lbnRQcm9wZXJ0aWVzIiwiTW9tZW50IiwiY29uZmlnIiwidXBkYXRlSW5Qcm9ncmVzcyIsInVwZGF0ZU9mZnNldCIsImlzTW9tZW50Iiwib2JqIiwiYWJzRmxvb3IiLCJudW1iZXIiLCJjZWlsIiwiZmxvb3IiLCJ0b0ludCIsImFyZ3VtZW50Rm9yQ29lcmNpb24iLCJjb2VyY2VkTnVtYmVyIiwidmFsdWUiLCJpc0Zpbml0ZSIsImNvbXBhcmVBcnJheXMiLCJhcnJheTEiLCJhcnJheTIiLCJkb250Q29udmVydCIsImxlbiIsIm1pbiIsImxlbmd0aERpZmYiLCJhYnMiLCJkaWZmcyIsIkxvY2FsZSIsIm5vcm1hbGl6ZUxvY2FsZSIsImtleSIsImNob29zZUxvY2FsZSIsIm5hbWVzIiwiaiIsIm5leHQiLCJsb2FkTG9jYWxlIiwic2xpY2UiLCJqb2luIiwibmFtZSIsIm9sZExvY2FsZSIsImxvY2FsZXMiLCJnbG9iYWxMb2NhbGUiLCJfYWJiciIsInJlcXVpcmUiLCJsb2NhbGVfbG9jYWxlc19fZ2V0U2V0R2xvYmFsTG9jYWxlIiwidmFsdWVzIiwibG9jYWxlX2xvY2FsZXNfX2dldExvY2FsZSIsImRlZmluZUxvY2FsZSIsImFiYnIiLCJzZXQiLCJhZGRVbml0QWxpYXMiLCJ1bml0Iiwic2hvcnRoYW5kIiwibG93ZXJDYXNlIiwiYWxpYXNlcyIsIm5vcm1hbGl6ZVVuaXRzIiwidW5pdHMiLCJub3JtYWxpemVPYmplY3RVbml0cyIsImlucHV0T2JqZWN0Iiwibm9ybWFsaXplZFByb3AiLCJub3JtYWxpemVkSW5wdXQiLCJpc0Z1bmN0aW9uIiwiRnVuY3Rpb24iLCJtYWtlR2V0U2V0Iiwia2VlcFRpbWUiLCJnZXRfc2V0X19zZXQiLCJnZXRfc2V0X19nZXQiLCJtb20iLCJpc1ZhbGlkIiwiZ2V0U2V0IiwiemVyb0ZpbGwiLCJ0YXJnZXRMZW5ndGgiLCJmb3JjZVNpZ24iLCJhYnNOdW1iZXIiLCJ6ZXJvc1RvRmlsbCIsInNpZ24iLCJwb3ciLCJtYXgiLCJhZGRGb3JtYXRUb2tlbiIsInBhZGRlZCIsIm9yZGluYWwiLCJmdW5jIiwiZm9ybWF0VG9rZW5GdW5jdGlvbnMiLCJsb2NhbGVEYXRhIiwicmVtb3ZlRm9ybWF0dGluZ1Rva2VucyIsIm1hdGNoIiwibWFrZUZvcm1hdEZ1bmN0aW9uIiwiYXJyYXkiLCJmb3JtYXR0aW5nVG9rZW5zIiwib3V0cHV0IiwiZm9ybWF0TW9tZW50IiwiZXhwYW5kRm9ybWF0IiwiZm9ybWF0RnVuY3Rpb25zIiwiaW52YWxpZERhdGUiLCJyZXBsYWNlTG9uZ0RhdGVGb3JtYXRUb2tlbnMiLCJsb25nRGF0ZUZvcm1hdCIsImxvY2FsRm9ybWF0dGluZ1Rva2VucyIsImxhc3RJbmRleCIsImFkZFJlZ2V4VG9rZW4iLCJyZWdleCIsInN0cmljdFJlZ2V4IiwicmVnZXhlcyIsImlzU3RyaWN0IiwiZ2V0UGFyc2VSZWdleEZvclRva2VuIiwiUmVnRXhwIiwidW5lc2NhcGVGb3JtYXQiLCJzIiwicmVnZXhFc2NhcGUiLCJtYXRjaGVkIiwicDEiLCJwMiIsInAzIiwicDQiLCJhZGRQYXJzZVRva2VuIiwidG9rZW5zIiwiYWRkV2Vla1BhcnNlVG9rZW4iLCJfdyIsImFkZFRpbWVUb0FycmF5RnJvbVRva2VuIiwiX2EiLCJkYXlzSW5Nb250aCIsIlVUQyIsImxvY2FsZU1vbnRocyIsIl9tb250aHMiLCJNT05USFNfSU5fRk9STUFUIiwibG9jYWxlTW9udGhzU2hvcnQiLCJfbW9udGhzU2hvcnQiLCJsb2NhbGVNb250aHNQYXJzZSIsIm1vbnRoTmFtZSIsIl9tb250aHNQYXJzZSIsIl9sb25nTW9udGhzUGFyc2UiLCJfc2hvcnRNb250aHNQYXJzZSIsIm1vbnRocyIsIm1vbnRoc1Nob3J0Iiwic2V0TW9udGgiLCJkYXlPZk1vbnRoIiwibW9udGhzUGFyc2UiLCJnZXRTZXRNb250aCIsImdldERheXNJbk1vbnRoIiwibW9udGhzU2hvcnRSZWdleCIsIl9tb250aHNQYXJzZUV4YWN0IiwiY29tcHV0ZU1vbnRoc1BhcnNlIiwiX21vbnRoc1Nob3J0U3RyaWN0UmVnZXgiLCJfbW9udGhzU2hvcnRSZWdleCIsIm1vbnRoc1JlZ2V4IiwiX21vbnRoc1N0cmljdFJlZ2V4IiwiX21vbnRoc1JlZ2V4IiwiY21wTGVuUmV2Iiwic2hvcnRQaWVjZXMiLCJsb25nUGllY2VzIiwibWl4ZWRQaWVjZXMiLCJzb3J0IiwiY2hlY2tPdmVyZmxvdyIsIk1PTlRIIiwiREFURSIsIllFQVIiLCJIT1VSIiwiTUlOVVRFIiwiU0VDT05EIiwiTUlMTElTRUNPTkQiLCJfb3ZlcmZsb3dEYXlPZlllYXIiLCJfb3ZlcmZsb3dXZWVrcyIsIldFRUsiLCJfb3ZlcmZsb3dXZWVrZGF5IiwiV0VFS0RBWSIsIndhcm4iLCJtc2ciLCJzdXBwcmVzc0RlcHJlY2F0aW9uV2FybmluZ3MiLCJkZXByZWNhdGUiLCJmaXJzdFRpbWUiLCJBcnJheSIsInN0YWNrIiwiZGVwcmVjYXRlU2ltcGxlIiwiZGVwcmVjYXRpb25zIiwiY29uZmlnRnJvbUlTTyIsImwiLCJhbGxvd1RpbWUiLCJkYXRlRm9ybWF0IiwidGltZUZvcm1hdCIsInR6Rm9ybWF0Iiwic3RyaW5nIiwiZXh0ZW5kZWRJc29SZWdleCIsImV4ZWMiLCJiYXNpY0lzb1JlZ2V4IiwiaXNvRGF0ZXMiLCJpc29UaW1lcyIsInR6UmVnZXgiLCJjb25maWdGcm9tU3RyaW5nQW5kRm9ybWF0IiwiY29uZmlnRnJvbVN0cmluZyIsImFzcE5ldEpzb25SZWdleCIsImNyZWF0ZUZyb21JbnB1dEZhbGxiYWNrIiwiY3JlYXRlRGF0ZSIsInkiLCJkIiwiaCIsIk0iLCJtcyIsImdldEZ1bGxZZWFyIiwic2V0RnVsbFllYXIiLCJjcmVhdGVVVENEYXRlIiwic2V0VVRDRnVsbFllYXIiLCJkYXlzSW5ZZWFyIiwiaXNMZWFwWWVhciIsImdldElzTGVhcFllYXIiLCJmaXJzdFdlZWtPZmZzZXQiLCJkb3ciLCJkb3kiLCJmd2QiLCJmd2RsdyIsImdldFVUQ0RheSIsImRheU9mWWVhckZyb21XZWVrcyIsIndlZWsiLCJ3ZWVrZGF5IiwicmVzWWVhciIsInJlc0RheU9mWWVhciIsImxvY2FsV2Vla2RheSIsIndlZWtPZmZzZXQiLCJkYXlPZlllYXIiLCJ3ZWVrT2ZZZWFyIiwicmVzV2VlayIsIndlZWtzSW5ZZWFyIiwid2Vla09mZnNldE5leHQiLCJkZWZhdWx0cyIsImMiLCJjdXJyZW50RGF0ZUFycmF5Iiwibm93VmFsdWUiLCJub3ciLCJfdXNlVVRDIiwiZ2V0TW9udGgiLCJnZXREYXRlIiwiY29uZmlnRnJvbUFycmF5IiwiY3VycmVudERhdGUiLCJ5ZWFyVG9Vc2UiLCJkYXlPZlllYXJGcm9tV2Vla0luZm8iLCJfZGF5T2ZZZWFyIiwiX25leHREYXkiLCJzZXRVVENNaW51dGVzIiwiZ2V0VVRDTWludXRlcyIsInciLCJ3ZWVrWWVhciIsInRlbXAiLCJ3ZWVrZGF5T3ZlcmZsb3ciLCJHRyIsIlciLCJFIiwibG9jYWxfX2NyZWF0ZUxvY2FsIiwiX3dlZWsiLCJnZyIsIklTT184NjAxIiwicGFyc2VkSW5wdXQiLCJza2lwcGVkIiwic3RyaW5nTGVuZ3RoIiwidG90YWxQYXJzZWRJbnB1dExlbmd0aCIsIm1lcmlkaWVtRml4V3JhcCIsIl9tZXJpZGllbSIsImhvdXIiLCJtZXJpZGllbSIsImlzUG0iLCJtZXJpZGllbUhvdXIiLCJpc1BNIiwiY29uZmlnRnJvbVN0cmluZ0FuZEFycmF5IiwidGVtcENvbmZpZyIsImJlc3RNb21lbnQiLCJzY29yZVRvQmVhdCIsImN1cnJlbnRTY29yZSIsInNjb3JlIiwiY29uZmlnRnJvbU9iamVjdCIsIm1pbnV0ZSIsInNlY29uZCIsIm1pbGxpc2Vjb25kIiwicGFyc2VJbnQiLCJjcmVhdGVGcm9tQ29uZmlnIiwicHJlcGFyZUNvbmZpZyIsImFkZCIsInByZXBhcnNlIiwiY29uZmlnRnJvbUlucHV0IiwiaXNVVEMiLCJwaWNrQnkiLCJtb21lbnRzIiwiYXJncyIsIkR1cmF0aW9uIiwiZHVyYXRpb24iLCJ5ZWFycyIsInF1YXJ0ZXJzIiwicXVhcnRlciIsIndlZWtzIiwiZGF5cyIsImhvdXJzIiwibWludXRlcyIsInNlY29uZHMiLCJtaWxsaXNlY29uZHMiLCJfbWlsbGlzZWNvbmRzIiwiX2RheXMiLCJfZGF0YSIsIl9idWJibGUiLCJpc0R1cmF0aW9uIiwib2Zmc2V0IiwidXRjT2Zmc2V0Iiwib2Zmc2V0RnJvbVN0cmluZyIsIm1hdGNoZXIiLCJtYXRjaGVzIiwiY2h1bmsiLCJwYXJ0cyIsImNodW5rT2Zmc2V0IiwiY2xvbmVXaXRoT2Zmc2V0IiwibW9kZWwiLCJkaWZmIiwiY2xvbmUiLCJzZXRUaW1lIiwibG9jYWwiLCJnZXREYXRlT2Zmc2V0Iiwicm91bmQiLCJnZXRUaW1lem9uZU9mZnNldCIsImdldFNldE9mZnNldCIsImtlZXBMb2NhbFRpbWUiLCJsb2NhbEFkanVzdCIsIm1hdGNoU2hvcnRPZmZzZXQiLCJfY2hhbmdlSW5Qcm9ncmVzcyIsImFkZF9zdWJ0cmFjdF9fYWRkU3VidHJhY3QiLCJjcmVhdGVfX2NyZWF0ZUR1cmF0aW9uIiwiZ2V0U2V0Wm9uZSIsInNldE9mZnNldFRvVVRDIiwic2V0T2Zmc2V0VG9Mb2NhbCIsInN1YnRyYWN0Iiwic2V0T2Zmc2V0VG9QYXJzZWRPZmZzZXQiLCJtYXRjaE9mZnNldCIsImhhc0FsaWduZWRIb3VyT2Zmc2V0IiwiaXNEYXlsaWdodFNhdmluZ1RpbWUiLCJpc0RheWxpZ2h0U2F2aW5nVGltZVNoaWZ0ZWQiLCJfaXNEU1RTaGlmdGVkIiwib3RoZXIiLCJ0b0FycmF5IiwiaXNMb2NhbCIsImlzVXRjT2Zmc2V0IiwiaXNVdGMiLCJyZXQiLCJkaWZmUmVzIiwiYXNwTmV0UmVnZXgiLCJpc29SZWdleCIsInBhcnNlSXNvIiwibW9tZW50c0RpZmZlcmVuY2UiLCJpbnAiLCJwYXJzZUZsb2F0IiwicG9zaXRpdmVNb21lbnRzRGlmZmVyZW5jZSIsImJhc2UiLCJpc0FmdGVyIiwiaXNCZWZvcmUiLCJjcmVhdGVBZGRlciIsImRpcmVjdGlvbiIsInBlcmlvZCIsImR1ciIsInRtcCIsImlzQWRkaW5nIiwibW9tZW50X2NhbGVuZGFyX19jYWxlbmRhciIsInRpbWUiLCJmb3JtYXRzIiwic29kIiwic3RhcnRPZiIsImNhbGVuZGFyIiwibG9jYWxJbnB1dCIsImVuZE9mIiwiaXNCZXR3ZWVuIiwiaXNTYW1lIiwiaW5wdXRNcyIsImlzU2FtZU9yQWZ0ZXIiLCJpc1NhbWVPckJlZm9yZSIsImFzRmxvYXQiLCJ0aGF0Iiwiem9uZURlbHRhIiwiZGVsdGEiLCJtb250aERpZmYiLCJhbmNob3IyIiwiYWRqdXN0Iiwid2hvbGVNb250aERpZmYiLCJhbmNob3IiLCJtb21lbnRfZm9ybWF0X190b0lTT1N0cmluZyIsInRvRGF0ZSIsImlucHV0U3RyaW5nIiwiZGVmYXVsdEZvcm1hdCIsInBvc3Rmb3JtYXQiLCJ3aXRob3V0U3VmZml4IiwiaHVtYW5pemUiLCJmcm9tTm93IiwidG9Ob3ciLCJuZXdMb2NhbGVEYXRhIiwiaXNvV2Vla2RheSIsInRvX3R5cGVfX3ZhbHVlT2YiLCJ1bml4IiwidG9PYmplY3QiLCJ0b0pTT04iLCJtb21lbnRfdmFsaWRfX2lzVmFsaWQiLCJwYXJzaW5nRmxhZ3MiLCJpbnZhbGlkQXQiLCJjcmVhdGlvbkRhdGEiLCJhZGRXZWVrWWVhckZvcm1hdFRva2VuIiwiZ2V0dGVyIiwiZ2V0U2V0V2Vla1llYXIiLCJnZXRTZXRXZWVrWWVhckhlbHBlciIsImdldFNldElTT1dlZWtZZWFyIiwiaXNvV2VlayIsImdldElTT1dlZWtzSW5ZZWFyIiwiZ2V0V2Vla3NJblllYXIiLCJ3ZWVrSW5mbyIsIndlZWtzVGFyZ2V0Iiwic2V0V2Vla0FsbCIsImRheU9mWWVhckRhdGEiLCJnZXRTZXRRdWFydGVyIiwibG9jYWxlV2VlayIsImxvY2FsZUZpcnN0RGF5T2ZXZWVrIiwibG9jYWxlRmlyc3REYXlPZlllYXIiLCJnZXRTZXRXZWVrIiwiZ2V0U2V0SVNPV2VlayIsInBhcnNlV2Vla2RheSIsIndlZWtkYXlzUGFyc2UiLCJsb2NhbGVXZWVrZGF5cyIsIl93ZWVrZGF5cyIsImlzRm9ybWF0IiwibG9jYWxlV2Vla2RheXNTaG9ydCIsIl93ZWVrZGF5c1Nob3J0IiwibG9jYWxlV2Vla2RheXNNaW4iLCJfd2Vla2RheXNNaW4iLCJsb2NhbGVXZWVrZGF5c1BhcnNlIiwid2Vla2RheU5hbWUiLCJfd2Vla2RheXNQYXJzZSIsIl9taW5XZWVrZGF5c1BhcnNlIiwiX3Nob3J0V2Vla2RheXNQYXJzZSIsIl9mdWxsV2Vla2RheXNQYXJzZSIsIndlZWtkYXlzIiwid2Vla2RheXNTaG9ydCIsIndlZWtkYXlzTWluIiwiZ2V0U2V0RGF5T2ZXZWVrIiwiZ2V0RGF5IiwiZ2V0U2V0TG9jYWxlRGF5T2ZXZWVrIiwiZ2V0U2V0SVNPRGF5T2ZXZWVrIiwiZ2V0U2V0RGF5T2ZZZWFyIiwiaEZvcm1hdCIsImxvd2VyY2FzZSIsIm1hdGNoTWVyaWRpZW0iLCJfbWVyaWRpZW1QYXJzZSIsImxvY2FsZUlzUE0iLCJjaGFyQXQiLCJsb2NhbGVNZXJpZGllbSIsImlzTG93ZXIiLCJwYXJzZU1zIiwiZ2V0Wm9uZUFiYnIiLCJnZXRab25lTmFtZSIsIm1vbWVudF9fY3JlYXRlVW5peCIsIm1vbWVudF9fY3JlYXRlSW5ab25lIiwicGFyc2Vab25lIiwibG9jYWxlX2NhbGVuZGFyX19jYWxlbmRhciIsIl9jYWxlbmRhciIsIl9sb25nRGF0ZUZvcm1hdCIsImZvcm1hdFVwcGVyIiwiX2ludmFsaWREYXRlIiwiX29yZGluYWwiLCJwcmVQYXJzZVBvc3RGb3JtYXQiLCJyZWxhdGl2ZV9fcmVsYXRpdmVUaW1lIiwiaXNGdXR1cmUiLCJfcmVsYXRpdmVUaW1lIiwicGFzdEZ1dHVyZSIsImxvY2FsZV9zZXRfX3NldCIsIl9vcmRpbmFsUGFyc2VMZW5pZW50IiwiX29yZGluYWxQYXJzZSIsInNvdXJjZSIsImxpc3RzX19nZXQiLCJpbmRleCIsImZpZWxkIiwic2V0dGVyIiwibGlzdCIsImNvdW50Iiwib3V0IiwibGlzdHNfX2xpc3RNb250aHMiLCJsaXN0c19fbGlzdE1vbnRoc1Nob3J0IiwibGlzdHNfX2xpc3RXZWVrZGF5cyIsImxpc3RzX19saXN0V2Vla2RheXNTaG9ydCIsImxpc3RzX19saXN0V2Vla2RheXNNaW4iLCJkdXJhdGlvbl9hYnNfX2FicyIsIm1hdGhBYnMiLCJkdXJhdGlvbl9hZGRfc3VidHJhY3RfX2FkZFN1YnRyYWN0IiwiZHVyYXRpb25fYWRkX3N1YnRyYWN0X19hZGQiLCJkdXJhdGlvbl9hZGRfc3VidHJhY3RfX3N1YnRyYWN0IiwiYWJzQ2VpbCIsImJ1YmJsZSIsIm1vbnRoc0Zyb21EYXlzIiwibW9udGhzVG9EYXlzIiwiZGF5c1RvTW9udGhzIiwiYXMiLCJkdXJhdGlvbl9hc19fdmFsdWVPZiIsIm1ha2VBcyIsImFsaWFzIiwiZHVyYXRpb25fZ2V0X19nZXQiLCJtYWtlR2V0dGVyIiwic3Vic3RpdHV0ZVRpbWVBZ28iLCJyZWxhdGl2ZVRpbWUiLCJkdXJhdGlvbl9odW1hbml6ZV9fcmVsYXRpdmVUaW1lIiwicG9zTmVnRHVyYXRpb24iLCJ0aHJlc2hvbGRzIiwiZHVyYXRpb25faHVtYW5pemVfX2dldFNldFJlbGF0aXZlVGltZVRocmVzaG9sZCIsInRocmVzaG9sZCIsImxpbWl0Iiwid2l0aFN1ZmZpeCIsImlzb19zdHJpbmdfX3RvSVNPU3RyaW5nIiwiaXNvX3N0cmluZ19fYWJzIiwiWSIsIkQiLCJ0b3RhbCIsImFzU2Vjb25kcyIsIm1hdGNoMSIsIm1hdGNoMiIsIm1hdGNoMyIsIm1hdGNoNCIsIm1hdGNoNiIsIm1hdGNoMXRvMiIsIm1hdGNoM3RvNCIsIm1hdGNoNXRvNiIsIm1hdGNoMXRvMyIsIm1hdGNoMXRvNCIsIm1hdGNoMXRvNiIsIm1hdGNoVW5zaWduZWQiLCJtYXRjaFNpZ25lZCIsIm1hdGNoVGltZXN0YW1wIiwibWF0Y2hXb3JkIiwiZGVmYXVsdExvY2FsZU1vbnRocyIsImRlZmF1bHRMb2NhbGVNb250aHNTaG9ydCIsImRlZmF1bHRNb250aHNTaG9ydFJlZ2V4IiwiZGVmYXVsdE1vbnRoc1JlZ2V4IiwicGFyc2VUd29EaWdpdFllYXIiLCJnZXRTZXRZZWFyIiwicHJvdG90eXBlTWluIiwicHJvdG90eXBlTWF4IiwiYWRkX3N1YnRyYWN0X19hZGQiLCJhZGRfc3VidHJhY3RfX3N1YnRyYWN0IiwibGFuZyIsImlzb1dlZWtZZWFyIiwiZGVmYXVsdExvY2FsZVdlZWsiLCJnZXRTZXREYXlPZk1vbnRoIiwiZGVmYXVsdExvY2FsZVdlZWtkYXlzIiwiZGVmYXVsdExvY2FsZVdlZWtkYXlzU2hvcnQiLCJkZWZhdWx0TG9jYWxlV2Vla2RheXNNaW4iLCJfaXNQbSIsInBvcyIsInBvczEiLCJwb3MyIiwiZGVmYXVsdExvY2FsZU1lcmlkaWVtUGFyc2UiLCJnZXRTZXRIb3VyIiwiZ2V0U2V0TWludXRlIiwiZ2V0U2V0U2Vjb25kIiwiZ2V0U2V0TWlsbGlzZWNvbmQiLCJtb21lbnRQcm90b3R5cGVfX3Byb3RvIiwiZ2V0IiwiaXNvV2Vla3MiLCJpc29XZWVrc0luWWVhciIsImlzRFNUIiwiaXNEU1RTaGlmdGVkIiwiem9uZUFiYnIiLCJ6b25lTmFtZSIsImRhdGVzIiwiem9uZSIsIm1vbWVudFByb3RvdHlwZSIsImRlZmF1bHRDYWxlbmRhciIsInNhbWVEYXkiLCJuZXh0RGF5IiwibmV4dFdlZWsiLCJsYXN0RGF5IiwibGFzdFdlZWsiLCJzYW1lRWxzZSIsImRlZmF1bHRMb25nRGF0ZUZvcm1hdCIsIkxUUyIsIkxUIiwiTCIsIkxMIiwiTExMIiwiTExMTCIsImRlZmF1bHRJbnZhbGlkRGF0ZSIsImRlZmF1bHRPcmRpbmFsIiwiZGVmYXVsdE9yZGluYWxQYXJzZSIsImRlZmF1bHRSZWxhdGl2ZVRpbWUiLCJmdXR1cmUiLCJwYXN0IiwibW0iLCJoaCIsImRkIiwiTU0iLCJ5eSIsInByb3RvdHlwZV9fcHJvdG8iLCJmaXJzdERheU9mWWVhciIsImZpcnN0RGF5T2ZXZWVrIiwib3JkaW5hbFBhcnNlIiwibGFuZ0RhdGEiLCJhc01pbGxpc2Vjb25kcyIsImFzTWludXRlcyIsImFzSG91cnMiLCJhc0RheXMiLCJhc1dlZWtzIiwiYXNNb250aHMiLCJhc1llYXJzIiwiZHVyYXRpb25fcHJvdG90eXBlX19wcm90byIsInRvSXNvU3RyaW5nIiwidmVyc2lvbiIsImludmFsaWQiLCJyZWxhdGl2ZVRpbWVUaHJlc2hvbGQiLCJfbW9tZW50IiwiYW5ndWxhciIsImNvbnN0YW50IiwiVGltZURhdGUiLCJnYWRnZXRzIiwiX2luaXQiLCJmb250U2V0dGluZ3MiLCJfYWRkaXRpb25hbFBhcmFtcyIsImZvbnRTdHlsZSIsIl9mb3JtYXQiLCJzaG93VGltZSIsInNob3dEYXRlIiwiX3RpbWVBbmREYXRlQ29udGFpbmVyIiwiZ2V0RWxlbWVudEJ5SWQiLCJfcmVhZHkiLCJycGMiLCJfcHJlZnMiLCJnZXRTdHJpbmciLCJzZXRBZGRpdGlvbmFsUGFyYW1zIiwiYWRkaXRpb25hbFBhcmFtcyIsIndpZHRoIiwiZ2V0SW50IiwiaGVpZ2h0IiwiX21lc3NhZ2UiLCJNZXNzYWdlIiwiX2RyYXciLCJpbm5lckhUTUwiLCJfdGltZW91dElkIiwicGF1c2UiLCJjbGVhclRpbWVvdXQiLCJwbGF5IiwiX2NvbmZpZ3VyYXRpb25Mb2dnZWQiLCJldmVudF9kZXRhaWxzIiwic3RvcCIsImdldFRhYmxlTmFtZSIsIlByZWZzIiwibWFpbkNvbnRhaW5lciIsIm1lc3NhZ2VDb250YWluZXIiLCJtZXNzYWdlIiwiaGlkZSIsIl9hY3RpdmUiLCJmaXJzdENoaWxkIiwicmVtb3ZlQ2hpbGQiLCJ2aXNpYmlsaXR5Iiwic2hvdyIsInAiLCJmcmFnbWVudCIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJxdWVyeVNlbGVjdG9yIiwiY29uZmlndXJlIiwiaWQiLCJvbmNvbnRleHRtZW51IiwiYm9keSIsIm9ubW91c2Vkb3duIiwicmVnaXN0ZXIiXSwibWFwcGluZ3MiOiJBQUFBLEdBQUlBLHVCQUNGQyxjQUFlLGlCQUNmQyxpQkFBa0IsNEVBQ2xCQyxxQkFBc0IsMkJBQ3RCQyxxQkFBc0IscUVBQ3RCQyxZQUFhLE9BQ2JDLFVBQVcsNkNBSVRDLFdBQWFBLGNBQ2pCQSxZQUFXQyxPQUFTRCxXQUFXQyxXQUUvQkQsV0FBV0MsT0FBT0MsWUFBYyxXQUM5QixZQVVBLFNBQVNDLEdBQWVDLEVBQVFDLEdBQzlCLEdBQUlDLEdBQU8sSUFHUEYsR0FBT0csT0FDVEQsRUFBT0YsRUFFSEUsRUFBS0UsV0FDUEYsRUFBS0csWUFBY0MsRUFBY0osRUFBS0UsV0FHeENGLEVBQUtLLFdBQWFDLEVBQ2xCTixFQUFLTyxXQUFhQyxFQUVsQlQsRUFBR0MsSUFHSEQsRUFBR0MsR0FLUCxRQUFTUyxLQUNQLEdBQUlDLEdBQU8sR0FBSUMsTUFDYkMsRUFBT0YsRUFBS0csaUJBQ1pDLEVBQVFKLEVBQUtLLGNBQWdCLEVBQzdCQyxFQUFNTixFQUFLTyxZQVViLE9BUlksSUFBUkgsSUFDRkEsRUFBUSxJQUFNQSxHQUdOLEdBQU5FLElBQ0ZBLEVBQU0sSUFBTUEsR0FHUEosRUFBT0UsRUFBUUUsRUFNeEIsUUFBU1osR0FBY2MsR0FDckIsR0FDRUMsR0FERUMsRUFBWSxPQUdoQixPQUFLRixJQUFzQixnQkFBUkEsSUFJbkJDLEVBQU1ELEVBQUlHLE9BQU9ILEVBQUlJLFlBQVksS0FBTyxHQUdwQ0YsRUFBVUcsS0FBS0osS0FDakJBLEVBQU1BLEVBQUlFLE9BQU8sRUFBeUIsS0FBckJGLEVBQUlLLFFBQVEsS0FBZUwsRUFBSUssUUFBUSxLQUFPTCxFQUFJTSxRQUV2RU4sRUFBTUEsRUFBSUUsT0FBTyxFQUF5QixLQUFyQkYsRUFBSUssUUFBUSxLQUFlTCxFQUFJSyxRQUFRLEtBQU9MLEVBQUlNLFFBRXZFTixFQUFNQSxFQUFJRSxPQUFPLEVBQXlCLEtBQXJCRixFQUFJSyxRQUFRLEtBQWVMLEVBQUlLLFFBQVEsS0FBT0wsRUFBSU0sU0FHbEVOLEVBQUlPLGVBZEYsS0FpQlgsUUFBU0MsR0FBYzdCLEdBQ3JCLEdBQUk4QixJQUNGQyxLQUFRLHFDQUNSQyxpQkFBbUIsRUFDbkJDLHFCQUF1QixFQUN2QkMsZUFBa0J2QixJQUNsQndCLE9BQ0VDLFNBQVksTUFHaEJDLEVBQU9DLEtBQUtDLE1BQU1ELEtBQUtFLFVBQVVWLEdBTWpDLE9BSkFPLEdBQUtGLEtBQUssR0FBR0MsU0FBV0ssS0FBS0MsU0FBU0MsU0FBUyxJQUFJcEIsT0FBTyxHQUFHcUIsY0FDN0RQLEVBQUtGLEtBQUssR0FBR2pDLEtBQU9vQyxLQUFLQyxNQUFNRCxLQUFLRSxVQUFVeEMsSUFDOUNxQyxFQUFLRixLQUFLLEdBQUdqQyxLQUFLMkMsSUFBSyxHQUFJaEMsT0FBT2lDLGNBRTNCVCxFQUdULFFBQVNVLEdBQVNDLEVBQU9oRCxHQUN2QkQsRUFBZUMsRUFBUSxTQUFTRSxHQUNqQixPQUFUQSxHQUNGTixXQUFXQyxPQUFPb0QsT0FBT0MsSUFBSUYsRUFBTzlDLEtBTTFDLFFBQVNpRCxHQUFPQyxFQUFTQyxHQUN2QjdDLEVBQVk0QyxFQUNaMUMsRUFBWTJDLEVBdEdiLEdBQUkzQyxHQUFZLEdBQ2ZGLEVBQVksRUF3R2QsUUFDRXFCLGNBQWlCQSxFQUNqQnZCLGNBQWlCQSxFQUNqQnlDLFNBQVlBLEVBQ1pJLE9BQVVBLE1BSWR2RCxXQUFXQyxPQUFPb0QsT0FBUyxTQUFVSyxHQUNuQyxZQWlCQSxTQUFTQyxHQUFhdEQsR0FDcEIsR0FBSXVELEdBQU0sR0FBSUMsZUFFZCxPQUFJLElBQUk1QyxNQUFTNkMsRUFBYyxNQUN0QnpELE9BR1R1RCxFQUFJRyxLQUFLLE9BQVFDLEdBQWEsR0FDOUJKLEVBQUlLLFVBQVksV0FDZCxHQUFJQyxHQUFPeEIsS0FBS0MsTUFBTWlCLEVBQUlPLFNBRTFCOUQsSUFBSytELE1BQU9GLEVBQUtHLGFBQWNDLFlBQWEsR0FBSXJELFNBR2xEMkMsRUFBSVcsT0FQSlgsUUFVRixRQUFTWSxHQUFZakUsR0FDbkIsTUFBT2tFLElBQWFDLElBQWNuRSxFQU1wQyxRQUFTK0MsR0FBSXFCLEVBQVd2RSxHQWF0QixRQUFTd0UsR0FBZ0JDLEdBQ3ZCLEdBQ0VDLEdBQVl0RCxFQURWb0MsRUFBTSxHQUFJQyxlQUdkckMsR0FBTXVELEVBQVdDLFFBQVEsV0FBWUwsR0FDckNiLEVBQWNlLEVBQVlQLGFBQWVSLEVBQ3pDTSxFQUFRUyxFQUFZVCxPQUFTQSxFQUM3QlUsRUFBYXBCLEVBQU16QixjQUFjN0IsR0FHakN3RCxFQUFJRyxLQUFLLE9BQVF2QyxHQUFLLEdBQ3RCb0MsRUFBSXFCLGlCQUFpQixlQUFnQixvQkFDckNyQixFQUFJcUIsaUJBQWlCLGdCQUFpQixVQUFZYixHQUU5Q2hFLEVBQU9DLElBQTJCLGtCQUFkRCxHQUFPQyxLQUM3QnVELEVBQUlLLFVBQVksV0FDZDdELEVBQU9DLEdBQUd1RCxFQUFJTyxZQUlsQlAsRUFBSVcsS0FBSzdCLEtBQUtFLFVBQVVrQyxJQWhDMUIsTUFBS0gsSUFBY3ZFLEdBQVdBLEVBQU84RSxlQUFlLFdBQWE5RSxFQUFPRyxPQUNyRUgsRUFBTzhFLGVBQWUsVUFBWVYsRUFBWXBFLEVBQU9HLFFBa0N4RCxNQTlCQWtFLElBQVcsRUFDWEMsRUFBWXRFLEVBQU9HLE1BRW5CNEUsV0FBVyxXQUNUVixHQUFXLEdBQ1ZXLEdBeUJJekIsRUFBYWlCLEdBM0V0QixHQUFJWixHQUFjLHdEQUEwRHZFLHFCQUFxQkUsaUJBQzdGLGtCQUFvQkYscUJBQXFCRyxxQkFDekMsa0JBQW9CSCxxQkFBcUJJLHFCQUN6Qyw0QkFFQWtGLEVBQWEsc0hBQ2ZOLEdBQVcsRUFDWFcsRUFBZ0IsSUFDaEJWLEVBQVksR0FDWlosRUFBYyxFQUNkTSxFQUFRLEVBb0VWLFFBQ0VkLElBQU9BLElBRVJ0RCxXQUFXQyxPQUFPQyxZQUNyQixJQUFJRixZQUFhQSxjQUNqQkEsWUFBV0MsT0FBU0QsV0FBV0MsV0FFL0JELFdBQVdDLE9BQU9vRixVQUFZLFdBQzVCLFlBT0EsU0FBU0MsR0FBS0MsR0FDWixHQUFJQyxHQUFJLEdBQUkzQixlQUVQMEIsSUFBZ0Msa0JBQWJBLEtBSXhCQyxFQUFFekIsS0FBSyxNQUFPMEIsRUFBaUIsbUJBQW1CLEdBQ2xERCxFQUFFRSxtQkFBcUIsV0FDckIsSUFDdUIsSUFBakJGLEVBQUVHLGFBRUpDLEdBQWdCLEVBRUEsTUFBYkosRUFBRUssUUFDSEMsR0FBa0IsRUFFbEJQLEdBQVMsRUFBTUMsRUFBRU8sZ0JBRWpCQyxRQUFRQyxNQUFNLDZCQUNkSCxHQUFrQixFQUVsQlAsR0FBUyxFQUFPLFFBSXRCLE1BQU9XLEdBQ0xGLFFBQVFDLE1BQU0scUJBQXNCQyxFQUFFQyxlQUkxQ1gsRUFBRWpCLFFBR0osUUFBUzZCLEdBQVFDLEVBQVNkLEVBQVVlLEdBS2xDLFFBQVNDLEdBQVlDLEdBQ25CLEdBQUloRixHQUFLQyxFQUFLZ0YsQ0FFVkQsR0FFRmhGLEVBQU0sRUFBa0JpRSxFQUFpQixRQUFVaUIsbUJBQW1CTCxHQUN0RVosRUFBaUIsT0FBUSxHQUFJeEUsT0FBTzBGLFVBQVksUUFBVUQsbUJBQW1CTCxHQUV6RUMsRUFDRjlFLEVBQU02RSxHQUVONUUsRUFBTTRFLEVBQVFPLE1BQU0sS0FDcEJILEVBQTRCLElBQWZoRixFQUFJTSxPQUFnQixJQUFNLElBQ3ZDUCxFQUFNNkUsRUFBVUksRUFBWSxPQUFRLEdBQUl4RixPQUFPMEYsV0FJbkRFLEVBQVksT0FBUXJGLEdBR3RCLFFBQVNxRixHQUFZQyxFQUFRdEYsR0FDM0IsR0FBSW9DLEdBQU0sR0FBSUMsZ0JBQ1prRCxHQUNFbkQsSUFBS0EsRUFDTHBDLElBQUtBLEVBR1RvQyxHQUFJRyxLQUFLK0MsRUFBUXRGLEdBQUssR0FFdEJvQyxFQUFJb0QsaUJBQWlCLFVBQVcsV0FDOUIsR0FBSW5CLEdBQVNqQyxFQUFJaUMsUUFBVSxDQUV2QkEsSUFBVSxLQUFnQixJQUFUQSxFQUNuQk4sRUFBU3dCLEdBR00sU0FBWEQsRUFDRkQsRUFBWSxNQUFPckYsR0FFZnNFLEVBQ0ZQLEVBQVN3QixFQUFTLEdBQUlFLE9BQU0sd0NBQTBDcEIsSUFHdEVOLEVBQVN3QixLQU1qQm5ELEVBQUlXLE9BckROLEdBQUs4QixHQUFZZCxHQUFnQyxrQkFBYkEsR0F3RHBDLE1BQUtLLEdBSUlXLEVBQVlULEdBRlpvQixLQUFLNUIsS0FBS2lCLEdBbEdyQixHQUFJZCxHQUFpQix5QkFFakJHLEdBQWdCLEVBQ2xCRSxHQUFrQixDQXNHcEIsUUFDRU0sUUFBU0EsRUFDVGQsS0FBTUEsS0FLVixJQUFJdEYsWUFBYUEsY0FFakJBLFlBQVdDLE9BQVNELFdBQVdDLFdBRS9CRCxXQUFXQyxPQUFPa0gsVUFBWSxXQUU1QixRQUFTQyxHQUFnQkMsRUFBV0MsR0FDbEMsR0FBSUMsR0FBUyxlQUFpQkQsRUFBUUUsS0FBS0QsT0FBUyxLQUNoREUsRUFBUSxVQUFZSCxFQUFRRyxNQUFRLEtBQ3BDQyxFQUFPLGNBQWdCSixFQUFRSSxLQUFPLE9BQ3RDQyxFQUFTLGlCQUFtQkwsRUFBUU0sS0FBTyxPQUFTLFVBQVksS0FDaEVDLEVBQVMsZ0JBQWtCUCxFQUFRTyxPQUFTLFNBQVcsVUFBWSxLQUNuRUMsRUFBWSxxQkFBdUJSLEVBQVFRLFVBQVksWUFBYyxRQUFVLEtBQy9FQyxFQUFZLHFCQUF1QlQsRUFBUVUsZUFBaUIsSUFFaEUsT0FBTyxJQUFNWCxFQUFZLEtBQU9FLEVBQVNFLEVBQVFDLEVBQU9DLEVBQVNFLEVBQVNDLEVBQVlDLEVBQVksSUFHcEcsUUFBU0UsR0FBWUMsR0FHbkIsSUFBSyxHQUZEQyxHQUFRQyxTQUFTQyxjQUFjLFNBRTFCQyxFQUFJLEVBQUd2RyxFQUFTbUcsRUFBTW5HLE9BQVlBLEVBQUp1RyxFQUFZQSxJQUNqREgsRUFBTUksWUFBWUgsU0FBU0ksZUFBZU4sRUFBTUksSUFHbERGLFVBQVNLLEtBQUtGLFlBQVlKLEdBOEI1QixRQUFTTyxHQUFVQyxFQUFVQyxHQUMzQkQsRUFBU0UsUUFBUSxTQUFTQyxHQUNwQkEsRUFBS0MsT0FBU0QsRUFBS0UsYUFDckJmLEdBQWNiLEVBQWdCMEIsRUFBS0MsTUFBT0QsRUFBS0UsZUFHN0NGLEVBQUtFLFlBQVl4QixLQUFLeUIsT0FDVyxXQUEvQkgsRUFBS0UsWUFBWXhCLEtBQUt5QixNQUFxQkgsRUFBS0UsWUFBWXhCLEtBQUtELFFBQ25FdUIsRUFBS0UsWUFBWXhCLEtBQUtoRyxJQUN0QjBILEVBQWVKLEVBQUtFLFlBQVl4QixLQUFLRCxPQUFRdUIsRUFBS0UsWUFBWXhCLEtBQUtoRyxJQUNqRW9ILEdBRW9DLFdBQS9CRSxFQUFLRSxZQUFZeEIsS0FBS3lCLE1BQXFCSCxFQUFLRSxZQUFZeEIsS0FBS0QsUUFDeEU0QixFQUFlTCxFQUFLRSxZQUFZeEIsS0FBS0QsT0FBUXFCLE1BTXJELFFBQVNNLEdBQWUzQixFQUFRL0YsRUFBS29ILEdBQ25DLEdBQUlRLEdBQVEsS0FDUkMsRUFBTyxnQkFBa0I5QixFQUFTLGVBQXNCL0YsRUFBTSxLQUVsRW9ILEdBQWFBLEdBQWNSLFNBRTNCZ0IsRUFBUVIsRUFBV1UsWUFBWSxHQUVqQixPQUFWRixHQUNGQSxFQUFNRyxRQUFRLGFBQWNGLEdBSWhDLFFBQVNGLEdBQWU1QixFQUFRcUIsR0FDOUIsR0FBSVksR0FBYXBCLFNBQVNDLGNBQWMsT0FFeENPLEdBQWFBLEdBQWNSLFNBRTNCb0IsRUFBV0MsYUFBYSxNQUFPLGNBQy9CRCxFQUFXQyxhQUFhLE9BQVEsWUFDaENELEVBQVdDLGFBQWEsT0FBUSwyQ0FDOUJsQyxHQUVpQixPQUFmaUMsR0FDRlosRUFBV2MscUJBQXFCLFFBQVEsR0FBR25CLFlBQVlpQixHQUkzRCxRQUFTRyxHQUFjQyxHQUlyQixJQUFLLEdBSEQ3SCxHQUFTNkgsRUFBSzdILE9BQ2hCOEgsS0FFT3ZCLEVBQUksRUFBT3ZHLEVBQUp1RyxFQUFZQSxJQUMxQnVCLEVBQU92QixHQUFLLEdBQUl3QixPQUNoQkQsRUFBT3ZCLEdBQUd5QixJQUFNSCxFQUFLdEIsR0FJekIsUUFBUzBCLEdBQWtCQyxHQUt6QixJQUFLLEdBRkhDLEdBRkVDLEVBQVFDLE9BQU9DLFNBQVNDLE9BQU9DLFVBQVUsR0FDM0NDLEVBQU9MLEVBQU12RCxNQUFNLEtBR1owQixFQUFJLEVBQUdBLEVBQUlrQyxFQUFLekksT0FBUXVHLElBRy9CLEdBRkE0QixFQUFPTSxFQUFLbEMsR0FBRzFCLE1BQU0sS0FFakJzRCxFQUFLLElBQU1ELEVBQ2IsTUFBT1Esb0JBQW1CUCxFQUFLLEdBSW5DLE9BQU8sR0FHVCxPQUNFRixrQkFBbUJBLEVBQ25CNUMsZ0JBQWtCQSxFQUNsQmEsWUFBa0JBLEVBQ2xCUyxVQUFrQkEsRUFDbEJRLGVBQWtCQSxFQUNsQkMsZUFBa0JBLEVBQ2xCUSxjQUFrQkEsTUFVcEIsU0FBVWUsRUFBUUMsR0FDRyxnQkFBWkMsVUFBMEMsbUJBQVhDLFFBQXlCQSxPQUFPRCxRQUFVRCxJQUM5RCxrQkFBWEcsU0FBeUJBLE9BQU9DLElBQU1ELE9BQU9ILEdBQ3BERCxFQUFPTSxPQUFTTCxLQUNsQnpELEtBQU0sV0FBYyxZQUlsQixTQUFTK0QsS0FDTCxNQUFPQyxJQUFhQyxNQUFNLEtBQU1DLFdBS3BDLFFBQVNDLEdBQWlCOUYsR0FDdEIyRixHQUFlM0YsRUFHbkIsUUFBUytGLEdBQVFDLEdBQ2IsTUFBaUQsbUJBQTFDQyxPQUFPQyxVQUFVMUksU0FBUzJJLEtBQUtILEdBRzFDLFFBQVNJLEdBQU9KLEdBQ1osTUFBT0EsYUFBaUJ0SyxPQUFrRCxrQkFBMUN1SyxPQUFPQyxVQUFVMUksU0FBUzJJLEtBQUtILEdBR25FLFFBQVNLLEdBQUlDLEVBQUtDLEdBQ2QsR0FBY3hELEdBQVZ5RCxJQUNKLEtBQUt6RCxFQUFJLEVBQUdBLEVBQUl1RCxFQUFJOUosU0FBVXVHLEVBQzFCeUQsRUFBSUMsS0FBS0YsRUFBR0QsRUFBSXZELEdBQUlBLEdBRXhCLE9BQU95RCxHQUdYLFFBQVNFLEdBQVdDLEVBQUdDLEdBQ25CLE1BQU9YLFFBQU9DLFVBQVV2RyxlQUFld0csS0FBS1EsRUFBR0MsR0FHbkQsUUFBU0MsR0FBT0YsRUFBR0MsR0FDZixJQUFLLEdBQUk3RCxLQUFLNkQsR0FDTkYsRUFBV0UsRUFBRzdELEtBQ2Q0RCxFQUFFNUQsR0FBSzZELEVBQUU3RCxHQVlqQixPQVJJMkQsR0FBV0UsRUFBRyxjQUNkRCxFQUFFbkosU0FBV29KLEVBQUVwSixVQUdma0osRUFBV0UsRUFBRyxhQUNkRCxFQUFFRyxRQUFVRixFQUFFRSxTQUdYSCxFQUdYLFFBQVNJLEdBQXVCZixFQUFPZ0IsRUFBUUMsRUFBUUMsR0FDbkQsTUFBT0MsSUFBaUJuQixFQUFPZ0IsRUFBUUMsRUFBUUMsR0FBUSxHQUFNRSxNQUdqRSxRQUFTQyxLQUVMLE9BQ0lDLE9BQWtCLEVBQ2xCQyxnQkFDQUMsZUFDQUMsU0FBa0IsR0FDbEJDLGNBQWtCLEVBQ2xCQyxXQUFrQixFQUNsQkMsYUFBa0IsS0FDbEJDLGVBQWtCLEVBQ2xCQyxpQkFBa0IsRUFDbEJDLEtBQWtCLEdBSTFCLFFBQVNDLEdBQWdCQyxHQUlyQixNQUhhLE9BQVRBLEVBQUVDLE1BQ0ZELEVBQUVDLElBQU1iLEtBRUxZLEVBQUVDLElBR2IsUUFBU0MsR0FBZUYsR0FDcEIsR0FBa0IsTUFBZEEsRUFBRUcsU0FBa0IsQ0FDcEIsR0FBSUMsR0FBUUwsRUFBZ0JDLEVBQzVCQSxHQUFFRyxXQUFZRSxNQUFNTCxFQUFFTSxHQUFHbkgsY0FDckJpSCxFQUFNWixTQUFXLElBQ2hCWSxFQUFNZixPQUNOZSxFQUFNVCxjQUNOUyxFQUFNRyxnQkFDTkgsRUFBTVYsV0FDTlUsRUFBTVIsZUFDTlEsRUFBTVAsaUJBRVBHLEVBQUVRLFVBQ0ZSLEVBQUVHLFNBQVdILEVBQUVHLFVBQ2EsSUFBeEJDLEVBQU1YLGVBQ3dCLElBQTlCVyxFQUFNZCxhQUFhL0ssUUFDRGtNLFNBQWxCTCxFQUFNTSxTQUdsQixNQUFPVixHQUFFRyxTQUdiLFFBQVNRLEdBQXNCUCxHQUMzQixHQUFJSixHQUFJbEIsRUFBc0I4QixJQVE5QixPQVBhLE9BQVRSLEVBQ0F4QixFQUFPbUIsRUFBZ0JDLEdBQUlJLEdBRzNCTCxFQUFnQkMsR0FBR0gsaUJBQWtCLEVBR2xDRyxFQUdYLFFBQVNhLEdBQVk5QyxHQUNqQixNQUFpQixVQUFWQSxFQU9YLFFBQVMrQyxHQUFXQyxFQUFJQyxHQUNwQixHQUFJbEcsR0FBR21HLEVBQU1DLENBaUNiLElBL0JLTCxFQUFZRyxFQUFLRyxvQkFDbEJKLEVBQUdJLGlCQUFtQkgsRUFBS0csa0JBRTFCTixFQUFZRyxFQUFLSSxNQUNsQkwsRUFBR0ssR0FBS0osRUFBS0ksSUFFWlAsRUFBWUcsRUFBS0ssTUFDbEJOLEVBQUdNLEdBQUtMLEVBQUtLLElBRVpSLEVBQVlHLEVBQUtNLE1BQ2xCUCxFQUFHTyxHQUFLTixFQUFLTSxJQUVaVCxFQUFZRyxFQUFLUixXQUNsQk8sRUFBR1AsUUFBVVEsRUFBS1IsU0FFakJLLEVBQVlHLEVBQUtPLFFBQ2xCUixFQUFHUSxLQUFPUCxFQUFLTyxNQUVkVixFQUFZRyxFQUFLUSxVQUNsQlQsRUFBR1MsT0FBU1IsRUFBS1EsUUFFaEJYLEVBQVlHLEVBQUtTLFdBQ2xCVixFQUFHVSxRQUFVVCxFQUFLUyxTQUVqQlosRUFBWUcsRUFBS2YsT0FDbEJjLEVBQUdkLElBQU1GLEVBQWdCaUIsSUFFeEJILEVBQVlHLEVBQUtVLFdBQ2xCWCxFQUFHVyxRQUFVVixFQUFLVSxTQUdsQkMsR0FBaUJwTixPQUFTLEVBQzFCLElBQUt1RyxJQUFLNkcsSUFDTlYsRUFBT1UsR0FBaUI3RyxHQUN4Qm9HLEVBQU1GLEVBQUtDLEdBQ05KLEVBQVlLLEtBQ2JILEVBQUdFLEdBQVFDLEVBS3ZCLE9BQU9ILEdBTVgsUUFBU2EsR0FBT0MsR0FDWmYsRUFBV3BILEtBQU1tSSxHQUNqQm5JLEtBQUs0RyxHQUFLLEdBQUk3TSxNQUFrQixNQUFib08sRUFBT3ZCLEdBQWF1QixFQUFPdkIsR0FBR25ILFVBQVl5SCxLQUd6RGtCLE1BQXFCLElBQ3JCQSxJQUFtQixFQUNuQnJFLEVBQW1Cc0UsYUFBYXJJLE1BQ2hDb0ksSUFBbUIsR0FJM0IsUUFBU0UsR0FBVUMsR0FDZixNQUFPQSxhQUFlTCxJQUFrQixNQUFQSyxHQUF1QyxNQUF4QkEsRUFBSWQsaUJBR3hELFFBQVNlLEdBQVVDLEdBQ2YsTUFBYSxHQUFUQSxFQUNPOU0sS0FBSytNLEtBQUtELEdBRVY5TSxLQUFLZ04sTUFBTUYsR0FJMUIsUUFBU0csR0FBTUMsR0FDWCxHQUFJQyxJQUFpQkQsRUFDakJFLEVBQVEsQ0FNWixPQUpzQixLQUFsQkQsR0FBdUJFLFNBQVNGLEtBQ2hDQyxFQUFRUCxFQUFTTSxJQUdkQyxFQUlYLFFBQVNFLEdBQWNDLEVBQVFDLEVBQVFDLEdBQ25DLEdBR0loSSxHQUhBaUksRUFBTTFOLEtBQUsyTixJQUFJSixFQUFPck8sT0FBUXNPLEVBQU90TyxRQUNyQzBPLEVBQWE1TixLQUFLNk4sSUFBSU4sRUFBT3JPLE9BQVNzTyxFQUFPdE8sUUFDN0M0TyxFQUFRLENBRVosS0FBS3JJLEVBQUksRUFBT2lJLEVBQUpqSSxFQUFTQSxLQUNaZ0ksR0FBZUYsRUFBTzlILEtBQU8rSCxFQUFPL0gsS0FDbkNnSSxHQUFlUixFQUFNTSxFQUFPOUgsTUFBUXdILEVBQU1PLEVBQU8vSCxNQUNuRHFJLEdBR1IsT0FBT0EsR0FBUUYsRUFHbkIsUUFBU0csTUFPVCxRQUFTQyxHQUFnQkMsR0FDckIsTUFBT0EsR0FBTUEsRUFBSTlPLGNBQWNnRCxRQUFRLElBQUssS0FBTzhMLEVBTXZELFFBQVNDLEdBQWFDLEdBR2xCLElBRkEsR0FBV0MsR0FBR0MsRUFBTTFFLEVBQVE1RixFQUF4QjBCLEVBQUksRUFFREEsRUFBSTBJLEVBQU1qUCxRQUFRLENBS3JCLElBSkE2RSxFQUFRaUssRUFBZ0JHLEVBQU0xSSxJQUFJMUIsTUFBTSxLQUN4Q3FLLEVBQUlySyxFQUFNN0UsT0FDVm1QLEVBQU9MLEVBQWdCRyxFQUFNMUksRUFBSSxJQUNqQzRJLEVBQU9BLEVBQU9BLEVBQUt0SyxNQUFNLEtBQU8sS0FDekJxSyxFQUFJLEdBQUcsQ0FFVixHQURBekUsRUFBUzJFLEVBQVd2SyxFQUFNd0ssTUFBTSxFQUFHSCxHQUFHSSxLQUFLLE1BRXZDLE1BQU83RSxFQUVYLElBQUkwRSxHQUFRQSxFQUFLblAsUUFBVWtQLEdBQUtkLEVBQWN2SixFQUFPc0ssR0FBTSxJQUFTRCxFQUFJLEVBRXBFLEtBRUpBLEtBRUozSSxJQUVKLE1BQU8sTUFHWCxRQUFTNkksR0FBV0csR0FDaEIsR0FBSUMsR0FBWSxJQUVoQixLQUFLQyxHQUFRRixJQUE0QixtQkFBWHpHLFNBQ3RCQSxRQUFVQSxPQUFPRCxRQUNyQixJQUNJMkcsRUFBWUUsR0FBYUMsTUFDekJDLFFBQVEsWUFBY0wsR0FHdEJNLEVBQW1DTCxHQUNyQyxNQUFPckwsSUFFYixNQUFPc0wsSUFBUUYsR0FNbkIsUUFBU00sR0FBb0NkLEVBQUtlLEdBQzlDLEdBQUlwUCxFQWVKLE9BZElxTyxLQUVJck8sRUFEQTRMLEVBQVl3RCxHQUNMQyxFQUEwQmhCLEdBRzFCaUIsRUFBYWpCLEVBQUtlLEdBR3pCcFAsSUFFQWdQLEdBQWVoUCxJQUloQmdQLEdBQWFDLE1BR3hCLFFBQVNLLEdBQWNULEVBQU1PLEdBQ3pCLE1BQWUsUUFBWEEsR0FDQUEsRUFBT0csS0FBT1YsRUFDZEUsR0FBUUYsR0FBUUUsR0FBUUYsSUFBUyxHQUFJVixHQUNyQ1ksR0FBUUYsR0FBTVcsSUFBSUosR0FHbEJELEVBQW1DTixHQUU1QkUsR0FBUUYsV0FHUkUsSUFBUUYsR0FDUixNQUtmLFFBQVNRLEdBQTJCaEIsR0FDaEMsR0FBSXRFLEVBTUosSUFKSXNFLEdBQU9BLEVBQUk1QixTQUFXNEIsRUFBSTVCLFFBQVF3QyxRQUNsQ1osRUFBTUEsRUFBSTVCLFFBQVF3QyxRQUdqQlosRUFDRCxNQUFPVyxHQUdYLEtBQUtuRyxFQUFRd0YsR0FBTSxDQUdmLEdBREF0RSxFQUFTMkUsRUFBV0wsR0FFaEIsTUFBT3RFLEVBRVhzRSxJQUFPQSxHQUdYLE1BQU9DLEdBQWFELEdBS3hCLFFBQVNvQixHQUFjQyxFQUFNQyxHQUN6QixHQUFJQyxHQUFZRixFQUFLblEsYUFDckJzUSxJQUFRRCxHQUFhQyxHQUFRRCxFQUFZLEtBQU9DLEdBQVFGLEdBQWFELEVBR3pFLFFBQVNJLEdBQWVDLEdBQ3BCLE1BQXdCLGdCQUFWQSxHQUFxQkYsR0FBUUUsSUFBVUYsR0FBUUUsRUFBTXhRLGVBQWlCaU0sT0FHeEYsUUFBU3dFLEdBQXFCQyxHQUMxQixHQUNJQyxHQUNBbEUsRUFGQW1FLElBSUosS0FBS25FLElBQVFpRSxHQUNMekcsRUFBV3lHLEVBQWFqRSxLQUN4QmtFLEVBQWlCSixFQUFlOUQsR0FDNUJrRSxJQUNBQyxFQUFnQkQsR0FBa0JELEVBQVlqRSxJQUsxRCxPQUFPbUUsR0FHWCxRQUFTQyxHQUFXdEgsR0FDaEIsTUFBT0EsYUFBaUJ1SCxXQUFzRCxzQkFBMUN0SCxPQUFPQyxVQUFVMUksU0FBUzJJLEtBQUtILEdBR3ZFLFFBQVN3SCxHQUFZWixFQUFNYSxHQUN2QixNQUFPLFVBQVUvQyxHQUNiLE1BQWEsT0FBVEEsR0FDQWdELEVBQWEvTCxLQUFNaUwsRUFBTWxDLEdBQ3pCaEYsRUFBbUJzRSxhQUFhckksS0FBTThMLEdBQy9COUwsTUFFQWdNLEVBQWFoTSxLQUFNaUwsSUFLdEMsUUFBU2UsR0FBY0MsRUFBS2hCLEdBQ3hCLE1BQU9nQixHQUFJQyxVQUNQRCxFQUFJckYsR0FBRyxPQUFTcUYsRUFBSW5FLE9BQVMsTUFBUSxJQUFNbUQsS0FBVS9ELElBRzdELFFBQVM2RSxHQUFjRSxFQUFLaEIsRUFBTWxDLEdBQzFCa0QsRUFBSUMsV0FDSkQsRUFBSXJGLEdBQUcsT0FBU3FGLEVBQUluRSxPQUFTLE1BQVEsSUFBTW1ELEdBQU1sQyxHQU16RCxRQUFTb0QsR0FBUWIsRUFBT3ZDLEdBQ3BCLEdBQUlrQyxFQUNKLElBQXFCLGdCQUFWSyxHQUNQLElBQUtMLElBQVFLLEdBQ1R0TCxLQUFLK0ssSUFBSUUsRUFBTUssRUFBTUwsUUFJekIsSUFEQUssRUFBUUQsRUFBZUMsR0FDbkJLLEVBQVczTCxLQUFLc0wsSUFDaEIsTUFBT3RMLE1BQUtzTCxHQUFPdkMsRUFHM0IsT0FBTy9JLE1BR1gsUUFBU29NLEdBQVMzRCxFQUFRNEQsRUFBY0MsR0FDcEMsR0FBSUMsR0FBWSxHQUFLNVEsS0FBSzZOLElBQUlmLEdBQzFCK0QsRUFBY0gsRUFBZUUsRUFBVTFSLE9BQ3ZDNFIsRUFBT2hFLEdBQVUsQ0FDckIsUUFBUWdFLEVBQVFILEVBQVksSUFBTSxHQUFNLEtBQ3BDM1EsS0FBSytRLElBQUksR0FBSS9RLEtBQUtnUixJQUFJLEVBQUdILElBQWMzUSxXQUFXcEIsT0FBTyxHQUFLOFIsRUFldEUsUUFBU0ssR0FBZ0IxUCxFQUFPMlAsRUFBUUMsRUFBU3pPLEdBQzdDLEdBQUkwTyxHQUFPMU8sQ0FDYSxpQkFBYkEsS0FDUDBPLEVBQU8sV0FDSCxNQUFPL00sTUFBSzNCLE9BR2hCbkIsSUFDQThQLEdBQXFCOVAsR0FBUzZQLEdBRTlCRixJQUNBRyxHQUFxQkgsRUFBTyxJQUFNLFdBQzlCLE1BQU9ULEdBQVNXLEVBQUs5SSxNQUFNakUsS0FBTWtFLFdBQVkySSxFQUFPLEdBQUlBLEVBQU8sTUFHbkVDLElBQ0FFLEdBQXFCRixHQUFXLFdBQzVCLE1BQU85TSxNQUFLaU4sYUFBYUgsUUFBUUMsRUFBSzlJLE1BQU1qRSxLQUFNa0UsV0FBWWhILEtBSzFFLFFBQVNnUSxHQUF1QjdJLEdBQzVCLE1BQUlBLEdBQU04SSxNQUFNLFlBQ0w5SSxFQUFNdkcsUUFBUSxXQUFZLElBRTlCdUcsRUFBTXZHLFFBQVEsTUFBTyxJQUdoQyxRQUFTc1AsR0FBbUIvSCxHQUN4QixHQUE0Q2pFLEdBQUd2RyxFQUEzQ3dTLEVBQVFoSSxFQUFPOEgsTUFBTUcsR0FFekIsS0FBS2xNLEVBQUksRUFBR3ZHLEVBQVN3UyxFQUFNeFMsT0FBWUEsRUFBSnVHLEVBQVlBLElBRXZDaU0sRUFBTWpNLEdBRE40TCxHQUFxQkssRUFBTWpNLElBQ2hCNEwsR0FBcUJLLEVBQU1qTSxJQUUzQjhMLEVBQXVCRyxFQUFNak0sR0FJaEQsT0FBTyxVQUFVNkssR0FDYixHQUFJc0IsR0FBUyxFQUNiLEtBQUtuTSxFQUFJLEVBQU92RyxFQUFKdUcsRUFBWUEsSUFDcEJtTSxHQUFVRixFQUFNak0sWUFBY3dLLFVBQVd5QixFQUFNak0sR0FBR29ELEtBQUt5SCxFQUFLNUcsR0FBVWdJLEVBQU1qTSxFQUVoRixPQUFPbU0sSUFLZixRQUFTQyxHQUFhbEgsRUFBR2pCLEdBQ3JCLE1BQUtpQixHQUFFNEYsV0FJUDdHLEVBQVNvSSxFQUFhcEksRUFBUWlCLEVBQUUyRyxjQUNoQ1MsR0FBZ0JySSxHQUFVcUksR0FBZ0JySSxJQUFXK0gsRUFBbUIvSCxHQUVqRXFJLEdBQWdCckksR0FBUWlCLElBTnBCQSxFQUFFMkcsYUFBYVUsY0FTOUIsUUFBU0YsR0FBYXBJLEVBQVFDLEdBRzFCLFFBQVNzSSxHQUE0QnZKLEdBQ2pDLE1BQU9pQixHQUFPdUksZUFBZXhKLElBQVVBLEVBSDNDLEdBQUlqRCxHQUFJLENBT1IsS0FEQTBNLEdBQXNCQyxVQUFZLEVBQzNCM00sR0FBSyxHQUFLME0sR0FBc0JuVCxLQUFLMEssSUFDeENBLEVBQVNBLEVBQU92SCxRQUFRZ1EsR0FBdUJGLEdBQy9DRSxHQUFzQkMsVUFBWSxFQUNsQzNNLEdBQUssQ0FHVCxPQUFPaUUsR0E4QlgsUUFBUzJJLEdBQWU5USxFQUFPK1EsRUFBT0MsR0FDbENDLEdBQVFqUixHQUFTeU8sRUFBV3NDLEdBQVNBLEVBQVEsU0FBVUcsR0FDbkQsTUFBUUEsSUFBWUYsRUFBZUEsRUFBY0QsR0FJekQsUUFBU0ksR0FBdUJuUixFQUFPaUwsR0FDbkMsTUFBS3BELEdBQVdvSixHQUFTalIsR0FJbEJpUixHQUFRalIsR0FBT2lMLEVBQU9yQixRQUFTcUIsRUFBT0gsU0FIbEMsR0FBSXNHLFFBQU9DLEVBQWVyUixJQU96QyxRQUFTcVIsR0FBZUMsR0FDcEIsTUFBT0MsR0FBWUQsRUFBRTFRLFFBQVEsS0FBTSxJQUFJQSxRQUFRLHNDQUF1QyxTQUFVNFEsRUFBU0MsRUFBSUMsRUFBSUMsRUFBSUMsR0FDakgsTUFBT0gsSUFBTUMsR0FBTUMsR0FBTUMsS0FJakMsUUFBU0wsR0FBWUQsR0FDakIsTUFBT0EsR0FBRTFRLFFBQVEseUJBQTBCLFFBSy9DLFFBQVNpUixHQUFlN1IsRUFBT21CLEdBQzNCLEdBQUkrQyxHQUFHMkwsRUFBTzFPLENBU2QsS0FScUIsZ0JBQVZuQixLQUNQQSxHQUFTQSxJQUVXLGdCQUFibUIsS0FDUDBPLEVBQU8sU0FBVTFJLEVBQU9nSixHQUNwQkEsRUFBTWhQLEdBQVl1SyxFQUFNdkUsS0FHM0JqRCxFQUFJLEVBQUdBLEVBQUlsRSxFQUFNckMsT0FBUXVHLElBQzFCNE4sR0FBTzlSLEVBQU1rRSxJQUFNMkwsRUFJM0IsUUFBU2tDLEdBQW1CL1IsRUFBT21CLEdBQy9CMFEsRUFBYzdSLEVBQU8sU0FBVW1ILEVBQU9nSixFQUFPbEYsRUFBUWpMLEdBQ2pEaUwsRUFBTytHLEdBQUsvRyxFQUFPK0csT0FDbkI3USxFQUFTZ0csRUFBTzhELEVBQU8rRyxHQUFJL0csRUFBUWpMLEtBSTNDLFFBQVNpUyxHQUF3QmpTLEVBQU9tSCxFQUFPOEQsR0FDOUIsTUFBVDlELEdBQWlCVSxFQUFXaUssR0FBUTlSLElBQ3BDOFIsR0FBTzlSLEdBQU9tSCxFQUFPOEQsRUFBT2lILEdBQUlqSCxFQUFRakwsR0FjaEQsUUFBU21TLEdBQVlyVixFQUFNRSxHQUN2QixNQUFPLElBQUlILE1BQUtBLEtBQUt1VixJQUFJdFYsRUFBTUUsRUFBUSxFQUFHLElBQUlHLGFBa0RsRCxRQUFTa1YsR0FBY2pKLEVBQUdqQixHQUN0QixNQUFPakIsR0FBUXBFLEtBQUt3UCxTQUFXeFAsS0FBS3dQLFFBQVFsSixFQUFFcE0sU0FDMUM4RixLQUFLd1AsUUFBUUMsR0FBaUI5VSxLQUFLMEssR0FBVSxTQUFXLGNBQWNpQixFQUFFcE0sU0FJaEYsUUFBU3dWLEdBQW1CcEosRUFBR2pCLEdBQzNCLE1BQU9qQixHQUFRcEUsS0FBSzJQLGNBQWdCM1AsS0FBSzJQLGFBQWFySixFQUFFcE0sU0FDcEQ4RixLQUFLMlAsYUFBYUYsR0FBaUI5VSxLQUFLMEssR0FBVSxTQUFXLGNBQWNpQixFQUFFcE0sU0FHckYsUUFBUzBWLEdBQW1CQyxFQUFXeEssRUFBUUUsR0FDM0MsR0FBSW5FLEdBQUc2SyxFQUFLZ0MsQ0FRWixLQU5Lak8sS0FBSzhQLGVBQ045UCxLQUFLOFAsZ0JBQ0w5UCxLQUFLK1Asb0JBQ0wvUCxLQUFLZ1Esc0JBR0o1TyxFQUFJLEVBQU8sR0FBSkEsRUFBUUEsSUFBSyxDQVlyQixHQVZBNkssRUFBTTdHLEdBQXVCLElBQU1oRSxJQUMvQm1FLElBQVd2RixLQUFLK1AsaUJBQWlCM08sS0FDakNwQixLQUFLK1AsaUJBQWlCM08sR0FBSyxHQUFJa04sUUFBTyxJQUFNdE8sS0FBS2lRLE9BQU9oRSxFQUFLLElBQUluTyxRQUFRLElBQUssSUFBTSxJQUFLLEtBQ3pGa0MsS0FBS2dRLGtCQUFrQjVPLEdBQUssR0FBSWtOLFFBQU8sSUFBTXRPLEtBQUtrUSxZQUFZakUsRUFBSyxJQUFJbk8sUUFBUSxJQUFLLElBQU0sSUFBSyxNQUU5RnlILEdBQVd2RixLQUFLOFAsYUFBYTFPLEtBQzlCNk0sRUFBUSxJQUFNak8sS0FBS2lRLE9BQU9oRSxFQUFLLElBQU0sS0FBT2pNLEtBQUtrUSxZQUFZakUsRUFBSyxJQUNsRWpNLEtBQUs4UCxhQUFhMU8sR0FBSyxHQUFJa04sUUFBT0wsRUFBTW5RLFFBQVEsSUFBSyxJQUFLLE1BRzFEeUgsR0FBcUIsU0FBWEYsR0FBcUJyRixLQUFLK1AsaUJBQWlCM08sR0FBR3pHLEtBQUtrVixHQUM3RCxNQUFPek8sRUFDSixJQUFJbUUsR0FBcUIsUUFBWEYsR0FBb0JyRixLQUFLZ1Esa0JBQWtCNU8sR0FBR3pHLEtBQUtrVixHQUNwRSxNQUFPek8sRUFDSixLQUFLbUUsR0FBVXZGLEtBQUs4UCxhQUFhMU8sR0FBR3pHLEtBQUtrVixHQUM1QyxNQUFPek8sSUFPbkIsUUFBUytPLEdBQVVsRSxFQUFLbEQsR0FDcEIsR0FBSXFILEVBRUosT0FBS25FLEdBQUlDLFVBTVksZ0JBQVZuRCxLQUNQQSxFQUFRa0QsRUFBSWdCLGFBQWFvRCxZQUFZdEgsR0FFaEIsZ0JBQVZBLElBQ0FrRCxHQUlmbUUsRUFBYXpVLEtBQUsyTixJQUFJMkMsRUFBSW5TLE9BQVF1VixFQUFZcEQsRUFBSWpTLE9BQVErTyxJQUMxRGtELEVBQUlyRixHQUFHLE9BQVNxRixFQUFJbkUsT0FBUyxNQUFRLElBQU0sU0FBU2lCLEVBQU9xSCxHQUNwRG5FLEdBZElBLEVBaUJmLFFBQVNxRSxHQUFhdkgsR0FDbEIsTUFBYSxPQUFUQSxHQUNBb0gsRUFBU25RLEtBQU0rSSxHQUNmaEYsRUFBbUJzRSxhQUFhckksTUFBTSxHQUMvQkEsTUFFQWdNLEVBQWFoTSxLQUFNLFNBSWxDLFFBQVN1USxLQUNMLE1BQU9sQixHQUFZclAsS0FBS2hHLE9BQVFnRyxLQUFLOUYsU0FJekMsUUFBU3NXLElBQWtCcEMsR0FDdkIsTUFBSXBPLE1BQUt5USxtQkFDQTFMLEVBQVcvRSxLQUFNLGlCQUNsQjBRLEdBQW1CbE0sS0FBS3hFLE1BRXhCb08sRUFDT3BPLEtBQUsyUSx3QkFFTDNRLEtBQUs0USxtQkFHVDVRLEtBQUsyUSx5QkFBMkJ2QyxFQUNuQ3BPLEtBQUsyUSx3QkFBMEIzUSxLQUFLNFEsa0JBS2hELFFBQVNDLElBQWF6QyxHQUNsQixNQUFJcE8sTUFBS3lRLG1CQUNBMUwsRUFBVy9FLEtBQU0saUJBQ2xCMFEsR0FBbUJsTSxLQUFLeEUsTUFFeEJvTyxFQUNPcE8sS0FBSzhRLG1CQUVMOVEsS0FBSytRLGNBR1QvUSxLQUFLOFEsb0JBQXNCMUMsRUFDOUJwTyxLQUFLOFEsbUJBQXFCOVEsS0FBSytRLGFBSTNDLFFBQVNMLE1BQ0wsUUFBU00sR0FBVWhNLEVBQUdDLEdBQ2xCLE1BQU9BLEdBQUVwSyxPQUFTbUssRUFBRW5LLE9BR3hCLEdBQ0l1RyxHQUFHNkssRUFESGdGLEtBQWtCQyxLQUFpQkMsSUFFdkMsS0FBSy9QLEVBQUksRUFBTyxHQUFKQSxFQUFRQSxJQUVoQjZLLEVBQU03RyxHQUF1QixJQUFNaEUsSUFDbkM2UCxFQUFZbk0sS0FBSzlFLEtBQUtrUSxZQUFZakUsRUFBSyxLQUN2Q2lGLEVBQVdwTSxLQUFLOUUsS0FBS2lRLE9BQU9oRSxFQUFLLEtBQ2pDa0YsRUFBWXJNLEtBQUs5RSxLQUFLaVEsT0FBT2hFLEVBQUssS0FDbENrRixFQUFZck0sS0FBSzlFLEtBQUtrUSxZQUFZakUsRUFBSyxJQU8zQyxLQUhBZ0YsRUFBWUcsS0FBS0osR0FDakJFLEVBQVdFLEtBQUtKLEdBQ2hCRyxFQUFZQyxLQUFLSixHQUNaNVAsRUFBSSxFQUFPLEdBQUpBLEVBQVFBLElBQ2hCNlAsRUFBWTdQLEdBQUtxTixFQUFZd0MsRUFBWTdQLElBQ3pDOFAsRUFBVzlQLEdBQUtxTixFQUFZeUMsRUFBVzlQLElBQ3ZDK1AsRUFBWS9QLEdBQUtxTixFQUFZMEMsRUFBWS9QLEdBRzdDcEIsTUFBSytRLGFBQWUsR0FBSXpDLFFBQU8sS0FBTzZDLEVBQVloSCxLQUFLLEtBQU8sSUFBSyxLQUNuRW5LLEtBQUs0USxrQkFBb0I1USxLQUFLK1EsYUFDOUIvUSxLQUFLOFEsbUJBQXFCLEdBQUl4QyxRQUFPLEtBQU80QyxFQUFXL0csS0FBSyxLQUFPLEtBQU0sS0FDekVuSyxLQUFLMlEsd0JBQTBCLEdBQUlyQyxRQUFPLEtBQU8yQyxFQUFZOUcsS0FBSyxLQUFPLEtBQU0sS0FHbkYsUUFBU2tILElBQWUvSyxHQUNwQixHQUFJUixHQUNBZCxFQUFJc0IsRUFBRThJLEVBeUJWLE9BdkJJcEssSUFBcUMsS0FBaENxQixFQUFnQkMsR0FBR1IsV0FDeEJBLEVBQ0lkLEVBQUVzTSxJQUFlLEdBQUt0TSxFQUFFc00sSUFBZSxHQUFNQSxHQUM3Q3RNLEVBQUV1TSxJQUFlLEdBQUt2TSxFQUFFdU0sSUFBZWxDLEVBQVlySyxFQUFFd00sSUFBT3hNLEVBQUVzTSxLQUFVQyxHQUN4RXZNLEVBQUV5TSxJQUFlLEdBQUt6TSxFQUFFeU0sSUFBZSxJQUFtQixLQUFaek0sRUFBRXlNLE1BQStCLElBQWR6TSxFQUFFME0sS0FBK0IsSUFBZDFNLEVBQUUyTSxLQUFvQyxJQUFuQjNNLEVBQUU0TSxLQUF1QkgsR0FDaEl6TSxFQUFFME0sSUFBZSxHQUFLMU0sRUFBRTBNLElBQWUsR0FBTUEsR0FDN0MxTSxFQUFFMk0sSUFBZSxHQUFLM00sRUFBRTJNLElBQWUsR0FBTUEsR0FDN0MzTSxFQUFFNE0sSUFBZSxHQUFLNU0sRUFBRTRNLElBQWUsSUFBTUEsR0FDN0MsR0FFQXZMLEVBQWdCQyxHQUFHdUwscUJBQWtDTCxHQUFYMUwsR0FBbUJBLEVBQVd5TCxNQUN4RXpMLEVBQVd5TCxJQUVYbEwsRUFBZ0JDLEdBQUd3TCxnQkFBK0IsS0FBYmhNLElBQ3JDQSxFQUFXaU0sSUFFWDFMLEVBQWdCQyxHQUFHMEwsa0JBQWlDLEtBQWJsTSxJQUN2Q0EsRUFBV21NLElBR2Y1TCxFQUFnQkMsR0FBR1IsU0FBV0EsR0FHM0JRLEVBR1gsUUFBUzRMLElBQUtDLEdBQ05wTyxFQUFtQnFPLCtCQUFnQyxHQUMxQixtQkFBYnRULFVBQTZCQSxRQUFRb1QsTUFDakRwVCxRQUFRb1QsS0FBSyx3QkFBMEJDLEdBSS9DLFFBQVNFLElBQVVGLEVBQUt2TixHQUNwQixHQUFJME4sSUFBWSxDQUVoQixPQUFPcE4sR0FBTyxXQUtWLE1BSklvTixLQUNBSixHQUFLQyxFQUFNLGdCQUFrQkksTUFBTWhPLFVBQVUyRixNQUFNMUYsS0FBS04sV0FBV2lHLEtBQUssTUFBUSxNQUFPLEdBQUtwSyxRQUFTeVMsT0FDckdGLEdBQVksR0FFVDFOLEVBQUdYLE1BQU1qRSxLQUFNa0UsWUFDdkJVLEdBS1AsUUFBUzZOLElBQWdCckksRUFBTStILEdBQ3RCTyxHQUFhdEksS0FDZDhILEdBQUtDLEdBQ0xPLEdBQWF0SSxJQUFRLEdBNEM3QixRQUFTdUksSUFBY3hLLEdBQ25CLEdBQUkvRyxHQUFHd1IsRUFHSEMsRUFBV0MsRUFBWUMsRUFBWUMsRUFGbkNDLEVBQVM5SyxFQUFPVCxHQUNoQnlGLEVBQVErRixHQUFpQkMsS0FBS0YsSUFBV0csR0FBY0QsS0FBS0YsRUFHaEUsSUFBSTlGLEVBQU8sQ0FHUCxJQUZBOUcsRUFBZ0I4QixHQUFRL0IsS0FBTSxFQUV6QmhGLEVBQUksRUFBR3dSLEVBQUlTLEdBQVN4WSxPQUFZK1gsRUFBSnhSLEVBQU9BLElBQ3BDLEdBQUlpUyxHQUFTalMsR0FBRyxHQUFHK1IsS0FBS2hHLEVBQU0sSUFBSyxDQUMvQjJGLEVBQWFPLEdBQVNqUyxHQUFHLEdBQ3pCeVIsRUFBWVEsR0FBU2pTLEdBQUcsTUFBTyxDQUMvQixPQUdSLEdBQWtCLE1BQWQwUixFQUVBLE1BREEzSyxHQUFPMUIsVUFBVyxFQUNsQixNQUVKLElBQUkwRyxFQUFNLEdBQUksQ0FDVixJQUFLL0wsRUFBSSxFQUFHd1IsRUFBSVUsR0FBU3pZLE9BQVkrWCxFQUFKeFIsRUFBT0EsSUFDcEMsR0FBSWtTLEdBQVNsUyxHQUFHLEdBQUcrUixLQUFLaEcsRUFBTSxJQUFLLENBRS9CNEYsR0FBYzVGLEVBQU0sSUFBTSxLQUFPbUcsR0FBU2xTLEdBQUcsRUFDN0MsT0FHUixHQUFrQixNQUFkMlIsRUFFQSxNQURBNUssR0FBTzFCLFVBQVcsRUFDbEIsT0FHUixJQUFLb00sR0FBMkIsTUFBZEUsRUFFZCxNQURBNUssR0FBTzFCLFVBQVcsRUFDbEIsTUFFSixJQUFJMEcsRUFBTSxHQUFJLENBQ1YsSUFBSW9HLEdBQVFKLEtBQUtoRyxFQUFNLElBSW5CLE1BREFoRixHQUFPMUIsVUFBVyxFQUNsQixNQUhBdU0sR0FBVyxJQU1uQjdLLEVBQU9SLEdBQUttTCxHQUFjQyxHQUFjLEtBQU9DLEdBQVksSUFDM0RRLEdBQTBCckwsT0FFMUJBLEdBQU8xQixVQUFXLEVBSzFCLFFBQVNnTixJQUFpQnRMLEdBQ3RCLEdBQUl1RyxHQUFVZ0YsR0FBZ0JQLEtBQUtoTCxFQUFPVCxHQUUxQyxPQUFnQixRQUFaZ0gsR0FDQXZHLEVBQU92QixHQUFLLEdBQUk3TSxPQUFNMlUsRUFBUSxJQUM5QixTQUdKaUUsR0FBY3hLLEdBQ1ZBLEVBQU8xQixZQUFhLFVBQ2IwQixHQUFPMUIsU0FDZDFDLEVBQW1CNFAsd0JBQXdCeEwsSUFIL0N3SyxRQWlCSixRQUFTaUIsSUFBWUMsRUFBR3ZOLEVBQUd3TixFQUFHQyxFQUFHQyxFQUFHeEYsRUFBR3lGLEdBR25DLEdBQUluYSxHQUFPLEdBQUlDLE1BQUs4WixFQUFHdk4sRUFBR3dOLEVBQUdDLEVBQUdDLEVBQUd4RixFQUFHeUYsRUFNdEMsT0FIUSxLQUFKSixHQUFXQSxHQUFLLEdBQUs3SyxTQUFTbFAsRUFBS29hLGdCQUNuQ3BhLEVBQUtxYSxZQUFZTixHQUVkL1osRUFHWCxRQUFTc2EsSUFBZVAsR0FDcEIsR0FBSS9aLEdBQU8sR0FBSUMsTUFBS0EsS0FBS3VWLElBQUlyTCxNQUFNLEtBQU1DLFdBTXpDLE9BSFEsS0FBSjJQLEdBQVdBLEdBQUssR0FBSzdLLFNBQVNsUCxFQUFLRyxtQkFDbkNILEVBQUt1YSxlQUFlUixHQUVqQi9aLEVBMkNYLFFBQVN3YSxJQUFXdGEsR0FDaEIsTUFBT3VhLElBQVd2YSxHQUFRLElBQU0sSUFHcEMsUUFBU3VhLElBQVd2YSxHQUNoQixNQUFRQSxHQUFPLElBQU0sR0FBS0EsRUFBTyxNQUFRLEdBQU1BLEVBQU8sTUFBUSxFQWFsRSxRQUFTd2EsTUFDTCxNQUFPRCxJQUFXdlUsS0FBS2hHLFFBSTNCLFFBQVN5YSxJQUFnQnphLEVBQU0wYSxFQUFLQyxHQUNoQyxHQUNJQyxHQUFNLEVBQUlGLEVBQU1DLEVBRWhCRSxHQUFTLEVBQUlULEdBQWNwYSxFQUFNLEVBQUc0YSxHQUFLRSxZQUFjSixHQUFPLENBRWxFLFFBQVFHLEVBQVFELEVBQU0sRUFJMUIsUUFBU0csSUFBbUIvYSxFQUFNZ2IsRUFBTUMsRUFBU1AsRUFBS0MsR0FDbEQsR0FHSU8sR0FBU0MsRUFIVEMsR0FBZ0IsRUFBSUgsRUFBVVAsR0FBTyxFQUNyQ1csRUFBYVosR0FBZ0J6YSxFQUFNMGEsRUFBS0MsR0FDeENXLEVBQVksRUFBSSxHQUFLTixFQUFPLEdBQUtJLEVBQWVDLENBY3BELE9BWGlCLElBQWJDLEdBQ0FKLEVBQVVsYixFQUFPLEVBQ2pCbWIsRUFBZWIsR0FBV1ksR0FBV0ksR0FDOUJBLEVBQVloQixHQUFXdGEsSUFDOUJrYixFQUFVbGIsRUFBTyxFQUNqQm1iLEVBQWVHLEVBQVloQixHQUFXdGEsS0FFdENrYixFQUFVbGIsRUFDVm1iLEVBQWVHLElBSWZ0YixLQUFNa2IsRUFDTkksVUFBV0gsR0FJbkIsUUFBU0ksSUFBV3RKLEVBQUt5SSxFQUFLQyxHQUMxQixHQUVJYSxHQUFTTixFQUZURyxFQUFhWixHQUFnQnhJLEVBQUlqUyxPQUFRMGEsRUFBS0MsR0FDOUNLLEVBQU9yWixLQUFLZ04sT0FBT3NELEVBQUlxSixZQUFjRCxFQUFhLEdBQUssR0FBSyxDQWNoRSxPQVhXLEdBQVBMLEdBQ0FFLEVBQVVqSixFQUFJalMsT0FBUyxFQUN2QndiLEVBQVVSLEVBQU9TLEdBQVlQLEVBQVNSLEVBQUtDLElBQ3BDSyxFQUFPUyxHQUFZeEosRUFBSWpTLE9BQVEwYSxFQUFLQyxJQUMzQ2EsRUFBVVIsRUFBT1MsR0FBWXhKLEVBQUlqUyxPQUFRMGEsRUFBS0MsR0FDOUNPLEVBQVVqSixFQUFJalMsT0FBUyxJQUV2QmtiLEVBQVVqSixFQUFJalMsT0FDZHdiLEVBQVVSLElBSVZBLEtBQU1RLEVBQ054YixLQUFNa2IsR0FJZCxRQUFTTyxJQUFZemIsRUFBTTBhLEVBQUtDLEdBQzVCLEdBQUlVLEdBQWFaLEdBQWdCemEsRUFBTTBhLEVBQUtDLEdBQ3hDZSxFQUFpQmpCLEdBQWdCemEsRUFBTyxFQUFHMGEsRUFBS0MsRUFDcEQsUUFBUUwsR0FBV3RhLEdBQVFxYixFQUFhSyxHQUFrQixFQUk5RCxRQUFTQyxJQUFTM1EsRUFBR0MsRUFBRzJRLEdBQ3BCLE1BQVMsT0FBTDVRLEVBQ09BLEVBRUYsTUFBTEMsRUFDT0EsRUFFSjJRLEVBR1gsUUFBU0MsSUFBaUIxTixHQUV0QixHQUFJMk4sR0FBVyxHQUFJL2IsTUFBS2dLLEVBQW1CZ1MsTUFDM0MsT0FBSTVOLEdBQU82TixTQUNDRixFQUFTN2IsaUJBQWtCNmIsRUFBUzNiLGNBQWUyYixFQUFTemIsZUFFaEV5YixFQUFTNUIsY0FBZTRCLEVBQVNHLFdBQVlILEVBQVNJLFdBT2xFLFFBQVNDLElBQWlCaE8sR0FDdEIsR0FBSS9HLEdBQUd0SCxFQUFrQnNjLEVBQWFDLEVBQXpCaFMsSUFFYixLQUFJOEQsRUFBT3ZCLEdBQVgsQ0E2QkEsSUF6QkF3UCxFQUFjUCxHQUFpQjFOLEdBRzNCQSxFQUFPK0csSUFBeUIsTUFBbkIvRyxFQUFPaUgsR0FBR21DLEtBQXFDLE1BQXBCcEosRUFBT2lILEdBQUdrQyxLQUNsRGdGLEdBQXNCbk8sR0FJdEJBLEVBQU9vTyxhQUNQRixFQUFZVixHQUFTeE4sRUFBT2lILEdBQUdvQyxJQUFPNEUsRUFBWTVFLEtBRTlDckosRUFBT29PLFdBQWFqQyxHQUFXK0IsS0FDL0JoUSxFQUFnQjhCLEdBQVEwSixvQkFBcUIsR0FHakQvWCxFQUFPc2EsR0FBY2lDLEVBQVcsRUFBR2xPLEVBQU9vTyxZQUMxQ3BPLEVBQU9pSCxHQUFHa0MsSUFBU3hYLEVBQUtLLGNBQ3hCZ08sRUFBT2lILEdBQUdtQyxJQUFRelgsRUFBS08sY0FRdEIrRyxFQUFJLEVBQU8sRUFBSkEsR0FBeUIsTUFBaEIrRyxFQUFPaUgsR0FBR2hPLEtBQWNBLEVBQ3pDK0csRUFBT2lILEdBQUdoTyxHQUFLaUQsRUFBTWpELEdBQUtnVixFQUFZaFYsRUFJMUMsTUFBVyxFQUFKQSxFQUFPQSxJQUNWK0csRUFBT2lILEdBQUdoTyxHQUFLaUQsRUFBTWpELEdBQXNCLE1BQWhCK0csRUFBT2lILEdBQUdoTyxHQUFxQixJQUFOQSxFQUFVLEVBQUksRUFBSytHLEVBQU9pSCxHQUFHaE8sRUFJN0QsTUFBcEIrRyxFQUFPaUgsR0FBR3FDLEtBQ2dCLElBQXRCdEosRUFBT2lILEdBQUdzQyxLQUNZLElBQXRCdkosRUFBT2lILEdBQUd1QyxLQUNpQixJQUEzQnhKLEVBQU9pSCxHQUFHd0MsTUFDZHpKLEVBQU9xTyxVQUFXLEVBQ2xCck8sRUFBT2lILEdBQUdxQyxJQUFRLEdBR3RCdEosRUFBT3ZCLElBQU11QixFQUFPNk4sUUFBVTVCLEdBQWdCUixJQUFZM1AsTUFBTSxLQUFNSSxHQUduRCxNQUFmOEQsRUFBT04sTUFDUE0sRUFBT3ZCLEdBQUc2UCxjQUFjdE8sRUFBT3ZCLEdBQUc4UCxnQkFBa0J2TyxFQUFPTixNQUczRE0sRUFBT3FPLFdBQ1ByTyxFQUFPaUgsR0FBR3FDLElBQVEsS0FJMUIsUUFBUzZFLElBQXNCbk8sR0FDM0IsR0FBSXdPLEdBQUdDLEVBQVU1QixFQUFNQyxFQUFTUCxFQUFLQyxFQUFLa0MsRUFBTUMsQ0FFaERILEdBQUl4TyxFQUFPK0csR0FDQyxNQUFSeUgsRUFBRUksSUFBcUIsTUFBUEosRUFBRUssR0FBb0IsTUFBUEwsRUFBRU0sR0FDakN2QyxFQUFNLEVBQ05DLEVBQU0sRUFNTmlDLEVBQVdqQixHQUFTZ0IsRUFBRUksR0FBSTVPLEVBQU9pSCxHQUFHb0MsSUFBTytELEdBQVcyQixLQUFzQixFQUFHLEdBQUdsZCxNQUNsRmdiLEVBQU9XLEdBQVNnQixFQUFFSyxFQUFHLEdBQ3JCL0IsRUFBVVUsR0FBU2dCLEVBQUVNLEVBQUcsSUFDVixFQUFWaEMsR0FBZUEsRUFBVSxLQUN6QjZCLEdBQWtCLEtBR3RCcEMsRUFBTXZNLEVBQU9ILFFBQVFtUCxNQUFNekMsSUFDM0JDLEVBQU14TSxFQUFPSCxRQUFRbVAsTUFBTXhDLElBRTNCaUMsRUFBV2pCLEdBQVNnQixFQUFFUyxHQUFJalAsRUFBT2lILEdBQUdvQyxJQUFPK0QsR0FBVzJCLEtBQXNCeEMsRUFBS0MsR0FBSzNhLE1BQ3RGZ2IsRUFBT1csR0FBU2dCLEVBQUVBLEVBQUcsR0FFVixNQUFQQSxFQUFFN0MsR0FFRm1CLEVBQVUwQixFQUFFN0MsR0FDRSxFQUFWbUIsR0FBZUEsRUFBVSxLQUN6QjZCLEdBQWtCLElBRVIsTUFBUEgsRUFBRTNYLEdBRVRpVyxFQUFVMEIsRUFBRTNYLEVBQUkwVixHQUNaaUMsRUFBRTNYLEVBQUksR0FBSzJYLEVBQUUzWCxFQUFJLEtBQ2pCOFgsR0FBa0IsSUFJdEI3QixFQUFVUCxHQUdQLEVBQVBNLEdBQVlBLEVBQU9TLEdBQVltQixFQUFVbEMsRUFBS0MsR0FDOUN0TyxFQUFnQjhCLEdBQVEySixnQkFBaUIsRUFDZixNQUFuQmdGLEVBQ1B6USxFQUFnQjhCLEdBQVE2SixrQkFBbUIsR0FFM0M2RSxFQUFPOUIsR0FBbUI2QixFQUFVNUIsRUFBTUMsRUFBU1AsRUFBS0MsR0FDeER4TSxFQUFPaUgsR0FBR29DLElBQVFxRixFQUFLN2MsS0FDdkJtTyxFQUFPb08sV0FBYU0sRUFBS3ZCLFdBUWpDLFFBQVM5QixJQUEwQnJMLEdBRS9CLEdBQUlBLEVBQU9SLEtBQU81RCxFQUFtQnNULFNBRWpDLE1BREExRSxJQUFjeEssR0FDZCxNQUdKQSxHQUFPaUgsTUFDUC9JLEVBQWdCOEIsR0FBUXhDLE9BQVEsQ0FHaEMsSUFDSXZFLEdBQUdrVyxFQUFhdEksRUFBUTlSLEVBQU9xYSxFQUQvQnRFLEVBQVMsR0FBSzlLLEVBQU9ULEdBRXJCOFAsRUFBZXZFLEVBQU9wWSxPQUN0QjRjLEVBQXlCLENBSTdCLEtBRkF6SSxFQUFTdkIsRUFBYXRGLEVBQU9SLEdBQUlRLEVBQU9ILFNBQVNtRixNQUFNRyxRQUVsRGxNLEVBQUksRUFBR0EsRUFBSTROLEVBQU9uVSxPQUFRdUcsSUFDM0JsRSxFQUFROFIsRUFBTzVOLEdBQ2ZrVyxHQUFlckUsRUFBTzlGLE1BQU1rQixFQUFzQm5SLEVBQU9pTCxTQUFnQixHQUdyRW1QLElBQ0FDLEVBQVV0RSxFQUFPeFksT0FBTyxFQUFHd1ksRUFBT3JZLFFBQVEwYyxJQUN0Q0MsRUFBUTFjLE9BQVMsR0FDakJ3TCxFQUFnQjhCLEdBQVF0QyxZQUFZZixLQUFLeVMsR0FFN0N0RSxFQUFTQSxFQUFPL0ksTUFBTStJLEVBQU9yWSxRQUFRMGMsR0FBZUEsRUFBWXpjLFFBQ2hFNGMsR0FBMEJILEVBQVl6YyxRQUd0Q21TLEdBQXFCOVAsSUFDakJvYSxFQUNBalIsRUFBZ0I4QixHQUFReEMsT0FBUSxFQUdoQ1UsRUFBZ0I4QixHQUFRdkMsYUFBYWQsS0FBSzVILEdBRTlDaVMsRUFBd0JqUyxFQUFPb2EsRUFBYW5QLElBRXZDQSxFQUFPckIsVUFBWXdRLEdBQ3hCalIsRUFBZ0I4QixHQUFRdkMsYUFBYWQsS0FBSzVILEVBS2xEbUosR0FBZ0I4QixHQUFRcEMsY0FBZ0J5UixFQUFlQyxFQUNuRHhFLEVBQU9wWSxPQUFTLEdBQ2hCd0wsRUFBZ0I4QixHQUFRdEMsWUFBWWYsS0FBS21PLEdBSXpDNU0sRUFBZ0I4QixHQUFRbkIsV0FBWSxHQUNoQ21CLEVBQU9pSCxHQUFHcUMsS0FBUyxJQUNuQnRKLEVBQU9pSCxHQUFHcUMsSUFBUSxJQUN0QnBMLEVBQWdCOEIsR0FBUW5CLFFBQVVELFFBR3RDb0IsRUFBT2lILEdBQUdxQyxJQUFRaUcsR0FBZ0J2UCxFQUFPSCxRQUFTRyxFQUFPaUgsR0FBR3FDLElBQU90SixFQUFPd1AsV0FFMUV4QixHQUFnQmhPLEdBQ2hCa0osR0FBY2xKLEdBSWxCLFFBQVN1UCxJQUFpQnBTLEVBQVFzUyxFQUFNQyxHQUNwQyxHQUFJQyxFQUVKLE9BQWdCLE9BQVpELEVBRU9ELEVBRWdCLE1BQXZCdFMsRUFBT3lTLGFBQ0F6UyxFQUFPeVMsYUFBYUgsRUFBTUMsR0FDWCxNQUFmdlMsRUFBTzBTLE1BRWRGLEVBQU94UyxFQUFPMFMsS0FBS0gsR0FDZkMsR0FBZSxHQUFQRixJQUNSQSxHQUFRLElBRVBFLEdBQWlCLEtBQVRGLElBQ1RBLEVBQU8sR0FFSkEsR0FHQUEsRUFLZixRQUFTSyxJQUF5QjlQLEdBQzlCLEdBQUkrUCxHQUNBQyxFQUVBQyxFQUNBaFgsRUFDQWlYLENBRUosSUFBeUIsSUFBckJsUSxFQUFPUixHQUFHOU0sT0FHVixNQUZBd0wsR0FBZ0I4QixHQUFRakMsZUFBZ0IsRUFDeENpQyxFQUFPdkIsR0FBSyxHQUFJN00sTUFBS21OLEtBQ3JCLE1BR0osS0FBSzlGLEVBQUksRUFBR0EsRUFBSStHLEVBQU9SLEdBQUc5TSxPQUFRdUcsSUFDOUJpWCxFQUFlLEVBQ2ZILEVBQWE5USxLQUFlZSxHQUNOLE1BQWxCQSxFQUFPNk4sVUFDUGtDLEVBQVdsQyxRQUFVN04sRUFBTzZOLFNBRWhDa0MsRUFBV3ZRLEdBQUtRLEVBQU9SLEdBQUd2RyxHQUMxQm9TLEdBQTBCMEUsR0FFckIxUixFQUFlMFIsS0FLcEJHLEdBQWdCaFMsRUFBZ0I2UixHQUFZblMsY0FHNUNzUyxHQUFrRSxHQUFsRGhTLEVBQWdCNlIsR0FBWXRTLGFBQWEvSyxPQUV6RHdMLEVBQWdCNlIsR0FBWUksTUFBUUQsR0FFakIsTUFBZkQsR0FBc0NBLEVBQWZDLEtBQ3ZCRCxFQUFjQyxFQUNkRixFQUFhRCxHQUlyQmhULEdBQU9pRCxFQUFRZ1EsR0FBY0QsR0FHakMsUUFBU0ssSUFBaUJwUSxHQUN0QixJQUFJQSxFQUFPdkIsR0FBWCxDQUlBLEdBQUl4RixHQUFJbUssRUFBcUJwRCxFQUFPVCxHQUNwQ1MsR0FBT2lILEdBQUsxSyxHQUFLdEQsRUFBRXBILEtBQU1vSCxFQUFFbEgsTUFBT2tILEVBQUVoSCxLQUFPZ0gsRUFBRXRILEtBQU1zSCxFQUFFd1csS0FBTXhXLEVBQUVvWCxPQUFRcFgsRUFBRXFYLE9BQVFyWCxFQUFFc1gsYUFBYyxTQUFVblEsR0FDckcsTUFBT0EsSUFBT29RLFNBQVNwUSxFQUFLLE1BR2hDNE4sR0FBZ0JoTyxJQUdwQixRQUFTeVEsSUFBa0J6USxHQUN2QixHQUFJdEQsR0FBTSxHQUFJcUQsR0FBT21KLEdBQWN3SCxHQUFjMVEsSUFPakQsT0FOSXRELEdBQUkyUixXQUVKM1IsRUFBSWlVLElBQUksRUFBRyxLQUNYalUsRUFBSTJSLFNBQVd6UCxRQUdabEMsRUFHWCxRQUFTZ1UsSUFBZTFRLEdBQ3BCLEdBQUk5RCxHQUFROEQsRUFBT1QsR0FDZnJDLEVBQVM4QyxFQUFPUixFQUlwQixPQUZBUSxHQUFPSCxRQUFVRyxFQUFPSCxTQUFXNEMsRUFBMEJ6QyxFQUFPUCxJQUV0RCxPQUFWdkQsR0FBOEIwQyxTQUFYMUIsR0FBa0MsS0FBVmhCLEVBQ3BDNEMsR0FBc0JqQixXQUFXLEtBR3ZCLGdCQUFWM0IsS0FDUDhELEVBQU9ULEdBQUtyRCxFQUFROEQsRUFBT0gsUUFBUStRLFNBQVMxVSxJQUc1Q2lFLEVBQVNqRSxHQUNGLEdBQUk2RCxHQUFPbUosR0FBY2hOLEtBQ3pCRCxFQUFRaUIsR0FDZjRTLEdBQXlCOVAsR0FDbEI5QyxFQUNQbU8sR0FBMEJyTCxHQUNuQjFELEVBQU9KLEdBQ2Q4RCxFQUFPdkIsR0FBS3ZDLEVBRVoyVSxHQUFnQjdRLEdBR2YzQixFQUFlMkIsS0FDaEJBLEVBQU92QixHQUFLLE1BR1R1QixJQUdYLFFBQVM2USxJQUFnQjdRLEdBQ3JCLEdBQUk5RCxHQUFROEQsRUFBT1QsRUFDTFgsVUFBVjFDLEVBQ0E4RCxFQUFPdkIsR0FBSyxHQUFJN00sTUFBS2dLLEVBQW1CZ1MsT0FDakN0UixFQUFPSixHQUNkOEQsRUFBT3ZCLEdBQUssR0FBSTdNLE9BQU1zSyxHQUNFLGdCQUFWQSxHQUNkb1AsR0FBaUJ0TCxHQUNWL0QsRUFBUUMsSUFDZjhELEVBQU9pSCxHQUFLMUssRUFBSUwsRUFBTTZGLE1BQU0sR0FBSSxTQUFVM0IsR0FDdEMsTUFBT29RLFVBQVNwUSxFQUFLLE1BRXpCNE4sR0FBZ0JoTyxJQUNTLGdCQUFaLEdBQ2JvUSxHQUFpQnBRLEdBQ1EsZ0JBQVosR0FFYkEsRUFBT3ZCLEdBQUssR0FBSTdNLE1BQUtzSyxHQUVyQk4sRUFBbUI0UCx3QkFBd0J4TCxHQUluRCxRQUFTM0MsSUFBa0JuQixFQUFPZ0IsRUFBUUMsRUFBUUMsRUFBUTBULEdBQ3RELEdBQUlyRCxLQWVKLE9BYnVCLGlCQUFiLEtBQ05yUSxFQUFTRCxFQUNUQSxFQUFTeUIsUUFJYjZPLEVBQUVuTyxrQkFBbUIsRUFDckJtTyxFQUFFSSxRQUFVSixFQUFFOU4sT0FBU21SLEVBQ3ZCckQsRUFBRWhPLEdBQUt0QyxFQUNQc1EsRUFBRWxPLEdBQUtyRCxFQUNQdVIsRUFBRWpPLEdBQUt0QyxFQUNQdVEsRUFBRTlPLFFBQVV2QixFQUVMcVQsR0FBaUJoRCxHQUc1QixRQUFTc0IsSUFBb0I3UyxFQUFPZ0IsRUFBUUMsRUFBUUMsR0FDaEQsTUFBT0MsSUFBaUJuQixFQUFPZ0IsRUFBUUMsRUFBUUMsR0FBUSxHQWdDM0QsUUFBUzJULElBQU90VSxFQUFJdVUsR0FDaEIsR0FBSXRVLEdBQUt6RCxDQUlULElBSHVCLElBQW5CK1gsRUFBUXRlLFFBQWdCdUosRUFBUStVLEVBQVEsTUFDeENBLEVBQVVBLEVBQVEsS0FFakJBLEVBQVF0ZSxPQUNULE1BQU9xYyxLQUdYLEtBREFyUyxFQUFNc1UsRUFBUSxHQUNUL1gsRUFBSSxFQUFHQSxFQUFJK1gsRUFBUXRlLFNBQVV1RyxJQUN6QitYLEVBQVEvWCxHQUFHOEssV0FBYWlOLEVBQVEvWCxHQUFHd0QsR0FBSUMsTUFDeENBLEVBQU1zVSxFQUFRL1gsR0FHdEIsT0FBT3lELEdBSVgsUUFBU3lFLE1BQ0wsR0FBSThQLE1BQVVsUCxNQUFNMUYsS0FBS04sVUFBVyxFQUVwQyxPQUFPZ1YsSUFBTyxXQUFZRSxHQUc5QixRQUFTek0sTUFDTCxHQUFJeU0sTUFBVWxQLE1BQU0xRixLQUFLTixVQUFXLEVBRXBDLE9BQU9nVixJQUFPLFVBQVdFLEdBTzdCLFFBQVNDLElBQVVDLEdBQ2YsR0FBSTVOLEdBQWtCSCxFQUFxQitOLEdBQ3ZDQyxFQUFRN04sRUFBZ0IxUixNQUFRLEVBQ2hDd2YsRUFBVzlOLEVBQWdCK04sU0FBVyxFQUN0Q3hKLEVBQVN2RSxFQUFnQnhSLE9BQVMsRUFDbEN3ZixFQUFRaE8sRUFBZ0JzSixNQUFRLEVBQ2hDMkUsRUFBT2pPLEVBQWdCdFIsS0FBTyxFQUM5QndmLEVBQVFsTyxFQUFnQmtNLE1BQVEsRUFDaENpQyxFQUFVbk8sRUFBZ0I4TSxRQUFVLEVBQ3BDc0IsRUFBVXBPLEVBQWdCK00sUUFBVSxFQUNwQ3NCLEVBQWVyTyxFQUFnQmdOLGFBQWUsQ0FHbEQxWSxNQUFLZ2EsZUFBaUJELEVBQ1IsSUFBVkQsRUFDVSxJQUFWRCxFQUNRLEtBQVJELEVBR0o1WixLQUFLaWEsT0FBU04sRUFDRixFQUFSRCxFQUlKMVosS0FBS3dQLFNBQVdTLEVBQ0QsRUFBWHVKLEVBQ1EsR0FBUkQsRUFFSnZaLEtBQUtrYSxTQUVMbGEsS0FBS2dJLFFBQVU0QyxJQUVmNUssS0FBS21hLFVBR1QsUUFBU0MsSUFBWTdSLEdBQ2pCLE1BQU9BLGFBQWU4USxJQUsxQixRQUFTZ0IsSUFBUW5kLEVBQU9xQyxHQUNwQnFOLEVBQWUxUCxFQUFPLEVBQUcsRUFBRyxXQUN4QixHQUFJbWQsR0FBU3JhLEtBQUtzYSxZQUNkN04sRUFBTyxHQUtYLE9BSmEsR0FBVDROLElBQ0FBLEdBQVVBLEVBQ1Y1TixFQUFPLEtBRUpBLEVBQU9MLEtBQVlpTyxFQUFTLElBQUssR0FBSzlhLEVBQVk2TSxJQUFXLEVBQVcsR0FBSSxLQXVCM0YsUUFBU21PLElBQWlCQyxFQUFTdkgsR0FDL0IsR0FBSXdILElBQVl4SCxHQUFVLElBQUk5RixNQUFNcU4sT0FDaENFLEVBQVVELEVBQVFBLEVBQVE1ZixPQUFTLE9BQ25DOGYsR0FBV0QsRUFBUSxJQUFJdk4sTUFBTXlOLE1BQWlCLElBQUssRUFBRyxHQUN0RGYsSUFBdUIsR0FBWGMsRUFBTSxJQUFXL1IsRUFBTStSLEVBQU0sR0FFN0MsT0FBb0IsTUFBYkEsRUFBTSxHQUFhZCxHQUFXQSxFQUl6QyxRQUFTZ0IsSUFBZ0J4VyxFQUFPeVcsR0FDNUIsR0FBSWpXLEdBQUtrVyxDQUNULE9BQUlELEdBQU1oVCxRQUNOakQsRUFBTWlXLEVBQU1FLFFBQ1pELEdBQVF6UyxFQUFTakUsSUFBVUksRUFBT0osSUFBVUEsR0FBUzZTLEdBQW1CN1MsS0FBWVEsRUFFcEZBLEVBQUkrQixHQUFHcVUsU0FBU3BXLEVBQUkrQixHQUFLbVUsR0FDekJoWCxFQUFtQnNFLGFBQWF4RCxHQUFLLEdBQzlCQSxHQUVBcVMsR0FBbUI3UyxHQUFPNlcsUUFJekMsUUFBU0MsSUFBZTdVLEdBR3BCLE1BQW9ELEtBQTVDM0ssS0FBS3lmLE1BQU05VSxFQUFFTSxHQUFHeVUsb0JBQXNCLElBcUJsRCxRQUFTQyxJQUFjalgsRUFBT2tYLEdBQzFCLEdBQ0lDLEdBREFuQixFQUFTcmEsS0FBSytILFNBQVcsQ0FFN0IsT0FBSy9ILE1BQUtrTSxVQUdHLE1BQVQ3SCxHQUNxQixnQkFBVkEsR0FDUEEsRUFBUWtXLEdBQWlCa0IsR0FBa0JwWCxHQUNwQzFJLEtBQUs2TixJQUFJbkYsR0FBUyxLQUN6QkEsRUFBZ0IsR0FBUkEsSUFFUHJFLEtBQUs4SCxRQUFVeVQsSUFDaEJDLEVBQWNMLEdBQWNuYixPQUVoQ0EsS0FBSytILFFBQVUxRCxFQUNmckUsS0FBSzhILFFBQVMsRUFDSyxNQUFmMFQsR0FDQXhiLEtBQUs4WSxJQUFJMEMsRUFBYSxLQUV0Qm5CLElBQVdoVyxLQUNOa1gsR0FBaUJ2YixLQUFLMGIsa0JBQ3ZCQyxHQUEwQjNiLEtBQU00YixHQUF1QnZYLEVBQVFnVyxFQUFRLEtBQU0sR0FBRyxHQUN4RXJhLEtBQUswYixvQkFDYjFiLEtBQUswYixtQkFBb0IsRUFDekIzWCxFQUFtQnNFLGFBQWFySSxNQUFNLEdBQ3RDQSxLQUFLMGIsa0JBQW9CLE9BRzFCMWIsTUFFQUEsS0FBSzhILE9BQVN1UyxFQUFTYyxHQUFjbmIsTUEzQjVCLE1BQVRxRSxFQUFnQnJFLEtBQU9rSCxJQStCdEMsUUFBUzJVLElBQVl4WCxFQUFPa1gsR0FDeEIsTUFBYSxPQUFUbFgsR0FDcUIsZ0JBQVZBLEtBQ1BBLEdBQVNBLEdBR2JyRSxLQUFLc2EsVUFBVWpXLEVBQU9rWCxHQUVmdmIsT0FFQ0EsS0FBS3NhLFlBSXJCLFFBQVN3QixJQUFnQlAsR0FDckIsTUFBT3ZiLE1BQUtzYSxVQUFVLEVBQUdpQixHQUc3QixRQUFTUSxJQUFrQlIsR0FTdkIsTUFSSXZiLE1BQUs4SCxTQUNMOUgsS0FBS3NhLFVBQVUsRUFBR2lCLEdBQ2xCdmIsS0FBSzhILFFBQVMsRUFFVnlULEdBQ0F2YixLQUFLZ2MsU0FBU2IsR0FBY25iLE1BQU8sTUFHcENBLEtBR1gsUUFBU2ljLE1BTUwsTUFMSWpjLE1BQUs2SCxLQUNMN0gsS0FBS3NhLFVBQVV0YSxLQUFLNkgsTUFDTSxnQkFBWjdILE1BQUswSCxJQUNuQjFILEtBQUtzYSxVQUFVQyxHQUFpQjJCLEdBQWFsYyxLQUFLMEgsS0FFL0MxSCxLQUdYLFFBQVNtYyxJQUFzQjlYLEdBQzNCLE1BQUtyRSxNQUFLa00sV0FHVjdILEVBQVFBLEVBQVE2UyxHQUFtQjdTLEdBQU9pVyxZQUFjLEdBRWhEdGEsS0FBS3NhLFlBQWNqVyxHQUFTLEtBQU8sSUFKaEMsRUFPZixRQUFTK1gsTUFDTCxNQUNJcGMsTUFBS3NhLFlBQWN0YSxLQUFLZ2IsUUFBUTlnQixNQUFNLEdBQUdvZ0IsYUFDekN0YSxLQUFLc2EsWUFBY3RhLEtBQUtnYixRQUFROWdCLE1BQU0sR0FBR29nQixZQUlqRCxRQUFTK0IsTUFDTCxJQUFLbFYsRUFBWW5ILEtBQUtzYyxlQUNsQixNQUFPdGMsTUFBS3NjLGFBR2hCLElBQUkxRyxLQUtKLElBSEF4TyxFQUFXd08sRUFBRzVWLE1BQ2Q0VixFQUFJaUQsR0FBY2pELEdBRWRBLEVBQUV4RyxHQUFJLENBQ04sR0FBSW1OLEdBQVEzRyxFQUFFOU4sT0FBUzFDLEVBQXNCd1EsRUFBRXhHLElBQU04SCxHQUFtQnRCLEVBQUV4RyxHQUMxRXBQLE1BQUtzYyxjQUFnQnRjLEtBQUtrTSxXQUN0QmpELEVBQWMyTSxFQUFFeEcsR0FBSW1OLEVBQU1DLFdBQWEsTUFFM0N4YyxNQUFLc2MsZUFBZ0IsQ0FHekIsT0FBT3RjLE1BQUtzYyxjQUdoQixRQUFTRyxNQUNMLE1BQU96YyxNQUFLa00sV0FBYWxNLEtBQUs4SCxRQUFTLEVBRzNDLFFBQVM0VSxNQUNMLE1BQU8xYyxNQUFLa00sVUFBWWxNLEtBQUs4SCxRQUFTLEVBRzFDLFFBQVM2VSxNQUNMLE1BQU8zYyxNQUFLa00sVUFBWWxNLEtBQUs4SCxRQUEyQixJQUFqQjlILEtBQUsrSCxTQUFnQixFQVVoRSxRQUFTNlQsSUFBd0J2WCxFQUFPdUYsR0FDcEMsR0FHSTZDLEdBQ0FtUSxFQUNBQyxFQUxBdkQsRUFBV2pWLEVBRVg4SSxFQUFRLElBdURaLE9BbERJaU4sSUFBVy9WLEdBQ1hpVixHQUNJckYsR0FBSzVQLEVBQU0yVixjQUNYbEcsRUFBS3pQLEVBQU00VixNQUNYakcsRUFBSzNQLEVBQU1tTCxTQUVTLGdCQUFWbkwsSUFDZGlWLEtBQ0kxUCxFQUNBMFAsRUFBUzFQLEdBQU92RixFQUVoQmlWLEVBQVNTLGFBQWUxVixJQUVsQjhJLEVBQVEyUCxHQUFZM0osS0FBSzlPLEtBQ25Db0ksRUFBcUIsTUFBYlUsRUFBTSxHQUFjLEdBQUssRUFDakNtTSxHQUNJekYsRUFBSyxFQUNMQyxFQUFLbEwsRUFBTXVFLEVBQU1vRSxLQUFnQjlFLEVBQ2pDc0gsRUFBS25MLEVBQU11RSxFQUFNc0UsS0FBZ0JoRixFQUNqQ25HLEVBQUtzQyxFQUFNdUUsRUFBTXVFLEtBQWdCakYsRUFDakMrQixFQUFLNUYsRUFBTXVFLEVBQU13RSxLQUFnQmxGLEVBQ2pDd0gsR0FBS3JMLEVBQU11RSxFQUFNeUUsS0FBZ0JuRixLQUUzQlUsRUFBUTRQLEdBQVM1SixLQUFLOU8sS0FDaENvSSxFQUFxQixNQUFiVSxFQUFNLEdBQWMsR0FBSyxFQUNqQ21NLEdBQ0l6RixFQUFJbUosR0FBUzdQLEVBQU0sR0FBSVYsR0FDdkJ1SCxFQUFJZ0osR0FBUzdQLEVBQU0sR0FBSVYsR0FDdkJxSCxFQUFJa0osR0FBUzdQLEVBQU0sR0FBSVYsR0FDdkJzSCxFQUFJaUosR0FBUzdQLEVBQU0sR0FBSVYsR0FDdkJuRyxFQUFJMFcsR0FBUzdQLEVBQU0sR0FBSVYsR0FDdkIrQixFQUFJd08sR0FBUzdQLEVBQU0sR0FBSVYsR0FDdkJrSyxFQUFJcUcsR0FBUzdQLEVBQU0sR0FBSVYsS0FFUixNQUFaNk0sRUFDUEEsS0FDMkIsZ0JBQWJBLEtBQTBCLFFBQVVBLElBQVksTUFBUUEsTUFDdEV1RCxFQUFVSSxHQUFrQi9GLEdBQW1Cb0MsRUFBU2hTLE1BQU80UCxHQUFtQm9DLEVBQVNqUyxLQUUzRmlTLEtBQ0FBLEVBQVNyRixHQUFLNEksRUFBUTlDLGFBQ3RCVCxFQUFTdEYsRUFBSTZJLEVBQVE1TSxRQUd6QjJNLEVBQU0sR0FBSXZELElBQVNDLEdBRWZjLEdBQVcvVixJQUFVVSxFQUFXVixFQUFPLGFBQ3ZDdVksRUFBSTVVLFFBQVUzRCxFQUFNMkQsU0FHakI0VSxFQUtYLFFBQVNJLElBQVVFLEVBQUt6USxHQUlwQixHQUFJNUgsR0FBTXFZLEdBQU9DLFdBQVdELEVBQUlwZixRQUFRLElBQUssS0FFN0MsUUFBUTZJLE1BQU05QixHQUFPLEVBQUlBLEdBQU80SCxFQUdwQyxRQUFTMlEsSUFBMEJDLEVBQU1kLEdBQ3JDLEdBQUkxWCxJQUFPa1YsYUFBYyxFQUFHOUosT0FBUSxFQVVwQyxPQVJBcEwsR0FBSW9MLE9BQVNzTSxFQUFNcmlCLFFBQVVtakIsRUFBS25qQixRQUNDLElBQTlCcWlCLEVBQU12aUIsT0FBU3FqQixFQUFLcmpCLFFBQ3JCcWpCLEVBQUtyQyxRQUFRbEMsSUFBSWpVLEVBQUlvTCxPQUFRLEtBQUtxTixRQUFRZixNQUN4QzFYLEVBQUlvTCxPQUdWcEwsRUFBSWtWLGNBQWdCd0MsR0FBVWMsRUFBS3JDLFFBQVFsQyxJQUFJalUsRUFBSW9MLE9BQVEsS0FFcERwTCxFQUdYLFFBQVNvWSxJQUFrQkksRUFBTWQsR0FDN0IsR0FBSTFYLEVBQ0osT0FBTXdZLEdBQUtuUixXQUFhcVEsRUFBTXJRLFdBSTlCcVEsRUFBUTFCLEdBQWdCMEIsRUFBT2MsR0FDM0JBLEVBQUtFLFNBQVNoQixHQUNkMVgsRUFBTXVZLEdBQTBCQyxFQUFNZCxJQUV0QzFYLEVBQU11WSxHQUEwQmIsRUFBT2MsR0FDdkN4WSxFQUFJa1YsY0FBZ0JsVixFQUFJa1YsYUFDeEJsVixFQUFJb0wsUUFBVXBMLEVBQUlvTCxRQUdmcEwsSUFaS2tWLGFBQWMsRUFBRzlKLE9BQVEsR0FnQnpDLFFBQVN1TixJQUFZQyxFQUFXclQsR0FDNUIsTUFBTyxVQUFVNUMsRUFBS2tXLEdBQ2xCLEdBQUlDLEdBQUtDLENBVVQsT0FSZSxRQUFYRixHQUFvQi9XLE9BQU8rVyxLQUMzQmpMLEdBQWdCckksRUFBTSxZQUFjQSxFQUFRLHVEQUF5REEsRUFBTyxxQkFDNUd3VCxFQUFNcFcsRUFBS0EsRUFBTWtXLEVBQVFBLEVBQVNFLEdBR3RDcFcsRUFBcUIsZ0JBQVJBLElBQW9CQSxFQUFNQSxFQUN2Q21XLEVBQU0vQixHQUF1QnBVLEVBQUtrVyxHQUNsQy9CLEdBQTBCM2IsS0FBTTJkLEVBQUtGLEdBQzlCemQsTUFJZixRQUFTMmIsSUFBMkIxUCxFQUFLcU4sRUFBVXVFLEVBQVV4VixHQUN6RCxHQUFJMFIsR0FBZVQsRUFBU1UsY0FDeEJMLEVBQU9MLEVBQVNXLE1BQ2hCaEssRUFBU3FKLEVBQVM5SixPQUVqQnZELEdBQUlDLFlBS1Q3RCxFQUErQixNQUFoQkEsR0FBdUIsRUFBT0EsRUFFekMwUixHQUNBOU4sRUFBSXJGLEdBQUdxVSxTQUFTaFAsRUFBSXJGLEdBQUttVCxFQUFlOEQsR0FFeENsRSxHQUNBNU4sRUFBYUUsRUFBSyxPQUFRRCxFQUFhQyxFQUFLLFFBQVUwTixFQUFPa0UsR0FFN0Q1TixHQUNBRSxFQUFTbEUsRUFBS0QsRUFBYUMsRUFBSyxTQUFXZ0UsRUFBUzROLEdBRXBEeFYsR0FDQXRFLEVBQW1Cc0UsYUFBYTRELEVBQUswTixHQUFRMUosSUFPckQsUUFBUzZOLElBQTJCQyxFQUFNQyxHQUd0QyxHQUFJakksR0FBTWdJLEdBQVE3RyxLQUNkK0csRUFBTXBELEdBQWdCOUUsRUFBSy9WLE1BQU1rZSxRQUFRLE9BQ3pDbkQsRUFBTy9hLEtBQUsrYSxLQUFLa0QsRUFBSyxRQUFRLEdBQzlCNVksRUFBZ0IsR0FBUDBWLEVBQVksV0FDVixHQUFQQSxFQUFZLFdBQ0wsRUFBUEEsRUFBVyxVQUNKLEVBQVBBLEVBQVcsVUFDSixFQUFQQSxFQUFXLFVBQ0osRUFBUEEsRUFBVyxXQUFhLFdBRTVCeE4sRUFBU3lRLElBQVlyUyxFQUFXcVMsRUFBUTNZLElBQVcyWSxFQUFRM1ksS0FBWTJZLEVBQVEzWSxHQUVuRixPQUFPckYsTUFBS3FGLE9BQU9rSSxHQUFVdk4sS0FBS2lOLGFBQWFrUixTQUFTOVksRUFBUXJGLEtBQU1rWCxHQUFtQm5CLEtBRzdGLFFBQVNpRixNQUNMLE1BQU8sSUFBSTlTLEdBQU9sSSxNQUd0QixRQUFTc2QsSUFBU2paLEVBQU9pSCxHQUNyQixHQUFJOFMsR0FBYTlWLEVBQVNqRSxHQUFTQSxFQUFRNlMsR0FBbUI3UyxFQUM5RCxPQUFNckUsTUFBS2tNLFdBQWFrUyxFQUFXbFMsV0FHbkNaLEVBQVFELEVBQWdCbEUsRUFBWW1FLEdBQWlCLGNBQVJBLEdBQy9CLGdCQUFWQSxHQUNRdEwsTUFBUW9lLEdBRVJBLEdBQWNwZSxLQUFLZ2IsUUFBUWtELFFBQVE1UyxLQU5wQyxFQVVmLFFBQVNpUyxJQUFVbFosRUFBT2lILEdBQ3RCLEdBQUk4UyxHQUFhOVYsRUFBU2pFLEdBQVNBLEVBQVE2UyxHQUFtQjdTLEVBQzlELE9BQU1yRSxNQUFLa00sV0FBYWtTLEVBQVdsUyxXQUduQ1osRUFBUUQsRUFBZ0JsRSxFQUFZbUUsR0FBaUIsY0FBUkEsR0FDL0IsZ0JBQVZBLEdBQ2dCOFMsR0FBUnBlLE1BRUFBLEtBQUtnYixRQUFRcUQsTUFBTS9TLElBQVU4UyxJQU45QixFQVVmLFFBQVNFLElBQVdoWCxFQUFNRCxFQUFJaUUsR0FDMUIsTUFBT3RMLE1BQUtzZCxRQUFRaFcsRUFBTWdFLElBQVV0TCxLQUFLdWQsU0FBU2xXLEVBQUlpRSxHQUcxRCxRQUFTaVQsSUFBUWxhLEVBQU9pSCxHQUNwQixHQUNJa1QsR0FEQUosRUFBYTlWLEVBQVNqRSxHQUFTQSxFQUFRNlMsR0FBbUI3UyxFQUU5RCxPQUFNckUsTUFBS2tNLFdBQWFrUyxFQUFXbFMsV0FHbkNaLEVBQVFELEVBQWVDLEdBQVMsZUFDbEIsZ0JBQVZBLEdBQ1F0TCxRQUFVb2UsR0FFbEJJLEdBQVdKLEdBQ0ZwZSxLQUFLZ2IsUUFBUWtELFFBQVE1UyxJQUFXa1QsR0FBV0EsSUFBYXhlLEtBQUtnYixRQUFRcUQsTUFBTS9TLE1BUDdFLEVBV2YsUUFBU21ULElBQWVwYSxFQUFPaUgsR0FDM0IsTUFBT3RMLE1BQUt1ZSxPQUFPbGEsRUFBT2lILElBQVV0TCxLQUFLc2QsUUFBUWpaLEVBQU1pSCxHQUczRCxRQUFTb1QsSUFBZ0JyYSxFQUFPaUgsR0FDNUIsTUFBT3RMLE1BQUt1ZSxPQUFPbGEsRUFBT2lILElBQVV0TCxLQUFLdWQsU0FBU2xaLEVBQU1pSCxHQUc1RCxRQUFTeVAsSUFBTTFXLEVBQU9pSCxFQUFPcVQsR0FDekIsR0FBSUMsR0FDQUMsRUFDQUMsRUFBT3ZSLENBRVgsT0FBS3ZOLE1BQUtrTSxXQUlWMFMsRUFBTy9ELEdBQWdCeFcsRUFBT3JFLE1BRXpCNGUsRUFBSzFTLFdBSVYyUyxFQUFvRCxLQUF2Q0QsRUFBS3RFLFlBQWN0YSxLQUFLc2EsYUFFckNoUCxFQUFRRCxFQUFlQyxHQUVULFNBQVZBLEdBQThCLFVBQVZBLEdBQStCLFlBQVZBLEdBQ3pDaUMsRUFBU3dSLEdBQVUvZSxLQUFNNGUsR0FDWCxZQUFWdFQsRUFDQWlDLEdBQWtCLEVBQ0QsU0FBVmpDLElBQ1BpQyxHQUFrQixNQUd0QnVSLEVBQVE5ZSxLQUFPNGUsRUFDZnJSLEVBQW1CLFdBQVZqQyxFQUFxQndULEVBQVEsSUFDeEIsV0FBVnhULEVBQXFCd1QsRUFBUSxJQUNuQixTQUFWeFQsRUFBbUJ3VCxFQUFRLEtBQ2pCLFFBQVZ4VCxHQUFtQndULEVBQVFELEdBQWEsTUFDOUIsU0FBVnZULEdBQW9Cd1QsRUFBUUQsR0FBYSxPQUN6Q0MsR0FFREgsRUFBVXBSLEVBQVMvRSxFQUFTK0UsSUF2QnhCckcsS0FOQUEsSUFnQ2YsUUFBUzZYLElBQVcvWixFQUFHQyxHQUVuQixHQUdJK1osR0FBU0MsRUFIVEMsRUFBMEMsSUFBdkJqYSxFQUFFakwsT0FBU2dMLEVBQUVoTCxTQUFpQmlMLEVBQUUvSyxRQUFVOEssRUFBRTlLLFNBRS9EaWxCLEVBQVNuYSxFQUFFZ1csUUFBUWxDLElBQUlvRyxFQUFnQixTQWEzQyxPQVZpQixHQUFiamEsRUFBSWthLEdBQ0pILEVBQVVoYSxFQUFFZ1csUUFBUWxDLElBQUlvRyxFQUFpQixFQUFHLFVBRTVDRCxHQUFVaGEsRUFBSWthLElBQVdBLEVBQVNILEtBRWxDQSxFQUFVaGEsRUFBRWdXLFFBQVFsQyxJQUFJb0csRUFBaUIsRUFBRyxVQUU1Q0QsR0FBVWhhLEVBQUlrYSxJQUFXSCxFQUFVRyxNQUc5QkQsRUFBaUJELEdBSzlCLFFBQVNwakIsTUFDTCxNQUFPbUUsTUFBS2diLFFBQVExVixPQUFPLE1BQU1ELE9BQU8sb0NBRzVDLFFBQVMrWixNQUNMLEdBQUk5WSxHQUFJdEcsS0FBS2diLFFBQVF2VixLQUNyQixPQUFJLEdBQUlhLEVBQUV0TSxRQUFVc00sRUFBRXRNLFFBQVUsS0FDeEIyUixFQUFXNVIsS0FBS3dLLFVBQVV2SSxhQUVuQmdFLEtBQUtxZixTQUFTcmpCLGNBRWR3UixFQUFhbEgsRUFBRyxnQ0FHcEJrSCxFQUFhbEgsRUFBRyxrQ0FJL0IsUUFBU2pCLElBQVFpYSxHQUNiLEdBQUkvUixHQUFTQyxFQUFheE4sS0FBTXNmLEdBQWV2YixFQUFtQndiLGNBQ2xFLE9BQU92ZixNQUFLaU4sYUFBYXVTLFdBQVdqUyxHQUd4QyxRQUFTakcsSUFBTXlXLEVBQU0wQixHQUNqQixNQUFJemYsTUFBS2tNLFlBQ0M1RCxFQUFTeVYsSUFBU0EsRUFBSzdSLFdBQ3hCZ0wsR0FBbUI2RyxHQUFNN1IsV0FDdkIwUCxJQUF3QnZVLEdBQUlySCxLQUFNc0gsS0FBTXlXLElBQU96WSxPQUFPdEYsS0FBS3NGLFVBQVVvYSxVQUFVRCxHQUUvRXpmLEtBQUtpTixhQUFhVSxjQUlqQyxRQUFTZ1MsSUFBU0YsR0FDZCxNQUFPemYsTUFBS3NILEtBQUs0UCxLQUFzQnVJLEdBRzNDLFFBQVNwWSxJQUFJMFcsRUFBTTBCLEdBQ2YsTUFBSXpmLE1BQUtrTSxZQUNDNUQsRUFBU3lWLElBQVNBLEVBQUs3UixXQUN4QmdMLEdBQW1CNkcsR0FBTTdSLFdBQ3ZCMFAsSUFBd0J0VSxLQUFNdEgsS0FBTXFILEdBQUkwVyxJQUFPelksT0FBT3RGLEtBQUtzRixVQUFVb2EsVUFBVUQsR0FFL0V6ZixLQUFLaU4sYUFBYVUsY0FJakMsUUFBU2lTLElBQU9ILEdBQ1osTUFBT3pmLE1BQUtxSCxHQUFHNlAsS0FBc0J1SSxHQU16QyxRQUFTbmEsSUFBUXNFLEdBQ2IsR0FBSWlXLEVBRUosT0FBWTlZLFVBQVI2QyxFQUNPNUosS0FBS2dJLFFBQVF3QyxPQUVwQnFWLEVBQWdCalYsRUFBMEJoQixHQUNyQixNQUFqQmlXLElBQ0E3ZixLQUFLZ0ksUUFBVTZYLEdBRVo3ZixNQWVmLFFBQVNpTixNQUNMLE1BQU9qTixNQUFLZ0ksUUFHaEIsUUFBU2tXLElBQVM1UyxHQUlkLE9BSEFBLEVBQVFELEVBQWVDLElBSXZCLElBQUssT0FDRHRMLEtBQUs5RixNQUFNLEVBRWYsS0FBSyxVQUNMLElBQUssUUFDRDhGLEtBQUtsRyxLQUFLLEVBRWQsS0FBSyxPQUNMLElBQUssVUFDTCxJQUFLLE1BQ0RrRyxLQUFLNFosTUFBTSxFQUVmLEtBQUssT0FDRDVaLEtBQUs2WixRQUFRLEVBRWpCLEtBQUssU0FDRDdaLEtBQUs4WixRQUFRLEVBRWpCLEtBQUssU0FDRDlaLEtBQUsrWixhQUFhLEdBZ0J0QixNQVpjLFNBQVZ6TyxHQUNBdEwsS0FBS2lWLFFBQVEsR0FFSCxZQUFWM0osR0FDQXRMLEtBQUs4ZixXQUFXLEdBSU4sWUFBVnhVLEdBQ0F0TCxLQUFLOUYsTUFBcUMsRUFBL0J5QixLQUFLZ04sTUFBTTNJLEtBQUs5RixRQUFVLElBR2xDOEYsS0FHWCxRQUFTcWUsSUFBTy9TLEdBRVosTUFEQUEsR0FBUUQsRUFBZUMsR0FDVHZFLFNBQVZ1RSxHQUFpQyxnQkFBVkEsRUFDaEJ0TCxLQUVKQSxLQUFLa2UsUUFBUTVTLEdBQU93TixJQUFJLEVBQWMsWUFBVnhOLEVBQXNCLE9BQVNBLEdBQVEwUSxTQUFTLEVBQUcsTUFHMUYsUUFBUytELE1BQ0wsT0FBUS9mLEtBQUs0RyxHQUE0QixLQUFyQjVHLEtBQUsrSCxTQUFXLEdBR3hDLFFBQVNpWSxNQUNMLE1BQU9ya0IsTUFBS2dOLE9BQU8zSSxLQUFPLEtBRzlCLFFBQVNxZixNQUNMLE1BQU9yZixNQUFLK0gsUUFBVSxHQUFJaE8sT0FBTWlHLE1BQVFBLEtBQUs0RyxHQUdqRCxRQUFTNFYsTUFDTCxHQUFJbFcsR0FBSXRHLElBQ1IsUUFBUXNHLEVBQUV0TSxPQUFRc00sRUFBRXBNLFFBQVNvTSxFQUFFeE0sT0FBUXdNLEVBQUVzUixPQUFRdFIsRUFBRWtTLFNBQVVsUyxFQUFFbVMsU0FBVW5TLEVBQUVvUyxlQUcvRSxRQUFTdUgsTUFDTCxHQUFJM1osR0FBSXRHLElBQ1IsUUFDSXVaLE1BQU9qVCxFQUFFdE0sT0FDVGlXLE9BQVEzSixFQUFFcE0sUUFDVkosS0FBTXdNLEVBQUV4TSxPQUNSOGYsTUFBT3RULEVBQUVzVCxRQUNUQyxRQUFTdlQsRUFBRXVULFVBQ1hDLFFBQVN4VCxFQUFFd1QsVUFDWEMsYUFBY3pULEVBQUV5VCxnQkFJeEIsUUFBU21HLE1BRUwsTUFBT2xnQixNQUFLa00sVUFBWWxNLEtBQUtoRSxjQUFnQixPQUdqRCxRQUFTbWtCLE1BQ0wsTUFBTzNaLEdBQWV4RyxNQUcxQixRQUFTb2dCLE1BQ0wsTUFBT2xiLE1BQVdtQixFQUFnQnJHLE9BR3RDLFFBQVNxZ0IsTUFDTCxNQUFPaGEsR0FBZ0JyRyxNQUFNOEYsU0FHakMsUUFBU3dhLE1BQ0wsT0FDSWpjLE1BQU9yRSxLQUFLMEgsR0FDWnJDLE9BQVFyRixLQUFLMkgsR0FDYnJDLE9BQVF0RixLQUFLZ0ksUUFDYmlSLE1BQU9qWixLQUFLOEgsT0FDWnZDLE9BQVF2RixLQUFLOEcsU0FjckIsUUFBU3laLElBQXdCcmpCLEVBQU9zakIsR0FDcEM1VCxFQUFlLEdBQUkxUCxFQUFPQSxFQUFNckMsUUFBUyxFQUFHMmxCLEdBa0NoRCxRQUFTQyxJQUFnQnBjLEdBQ3JCLE1BQU9xYyxJQUFxQmxjLEtBQUt4RSxLQUN6QnFFLEVBQ0FyRSxLQUFLZ1YsT0FDTGhWLEtBQUtpVixVQUNMalYsS0FBS2lOLGFBQWFrSyxNQUFNekMsSUFDeEIxVSxLQUFLaU4sYUFBYWtLLE1BQU14QyxLQUdwQyxRQUFTZ00sSUFBbUJ0YyxHQUN4QixNQUFPcWMsSUFBcUJsYyxLQUFLeEUsS0FDekJxRSxFQUFPckUsS0FBSzRnQixVQUFXNWdCLEtBQUs4ZixhQUFjLEVBQUcsR0FHekQsUUFBU2UsTUFDTCxNQUFPcEwsSUFBWXpWLEtBQUtoRyxPQUFRLEVBQUcsR0FHdkMsUUFBUzhtQixNQUNMLEdBQUlDLEdBQVcvZ0IsS0FBS2lOLGFBQWFrSyxLQUNqQyxPQUFPMUIsSUFBWXpWLEtBQUtoRyxPQUFRK21CLEVBQVNyTSxJQUFLcU0sRUFBU3BNLEtBRzNELFFBQVMrTCxJQUFxQnJjLEVBQU8yUSxFQUFNQyxFQUFTUCxFQUFLQyxHQUNyRCxHQUFJcU0sRUFDSixPQUFhLE9BQVQzYyxFQUNPa1IsR0FBV3ZWLEtBQU0wVSxFQUFLQyxHQUFLM2EsTUFFbENnbkIsRUFBY3ZMLEdBQVlwUixFQUFPcVEsRUFBS0MsR0FDbENLLEVBQU9nTSxJQUNQaE0sRUFBT2dNLEdBRUpDLEdBQVd6YyxLQUFLeEUsS0FBTXFFLEVBQU8yUSxFQUFNQyxFQUFTUCxFQUFLQyxJQUloRSxRQUFTc00sSUFBV3JLLEVBQVU1QixFQUFNQyxFQUFTUCxFQUFLQyxHQUM5QyxHQUFJdU0sR0FBZ0JuTSxHQUFtQjZCLEVBQVU1QixFQUFNQyxFQUFTUCxFQUFLQyxHQUNqRTdhLEVBQU9zYSxHQUFjOE0sRUFBY2xuQixLQUFNLEVBQUdrbkIsRUFBYzVMLFVBTTlELE9BSEF0VixNQUFLaEcsS0FBS0YsRUFBS0csa0JBQ2YrRixLQUFLOUYsTUFBTUosRUFBS0ssZUFDaEI2RixLQUFLbEcsS0FBS0EsRUFBS08sY0FDUjJGLEtBb0JYLFFBQVNtaEIsSUFBZTljLEdBQ3BCLE1BQWdCLE9BQVRBLEVBQWdCMUksS0FBSytNLE1BQU0xSSxLQUFLOUYsUUFBVSxHQUFLLEdBQUs4RixLQUFLOUYsTUFBb0IsR0FBYm1LLEVBQVEsR0FBU3JFLEtBQUs5RixRQUFVLEdBNEIzRyxRQUFTa25CLElBQVluVixHQUNqQixNQUFPc0osSUFBV3RKLEVBQUtqTSxLQUFLbVgsTUFBTXpDLElBQUsxVSxLQUFLbVgsTUFBTXhDLEtBQUtLLEtBUTNELFFBQVNxTSxNQUNMLE1BQU9yaEIsTUFBS21YLE1BQU16QyxJQUd0QixRQUFTNE0sTUFDTCxNQUFPdGhCLE1BQUttWCxNQUFNeEMsSUFLdEIsUUFBUzRNLElBQVlsZCxHQUNqQixHQUFJMlEsR0FBT2hWLEtBQUtpTixhQUFhK0gsS0FBS2hWLEtBQ2xDLE9BQWdCLE9BQVRxRSxFQUFnQjJRLEVBQU9oVixLQUFLOFksSUFBcUIsR0FBaEJ6VSxFQUFRMlEsR0FBVyxLQUcvRCxRQUFTd00sSUFBZW5kLEdBQ3BCLEdBQUkyUSxHQUFPTyxHQUFXdlYsS0FBTSxFQUFHLEdBQUdnVixJQUNsQyxPQUFnQixPQUFUM1EsRUFBZ0IyUSxFQUFPaFYsS0FBSzhZLElBQXFCLEdBQWhCelUsRUFBUTJRLEdBQVcsS0E4RS9ELFFBQVN5TSxJQUFhcGQsRUFBT2lCLEdBQ3pCLE1BQXFCLGdCQUFWakIsR0FDQUEsRUFHTnNDLE1BQU10QyxJQUlYQSxFQUFRaUIsRUFBT29jLGNBQWNyZCxHQUNSLGdCQUFWQSxHQUNBQSxFQUdKLE1BUklzVSxTQUFTdFUsRUFBTyxJQWMvQixRQUFTc2QsSUFBZ0JyYixFQUFHakIsR0FDeEIsTUFBT2pCLEdBQVFwRSxLQUFLNGhCLFdBQWE1aEIsS0FBSzRoQixVQUFVdGIsRUFBRWxNLE9BQzlDNEYsS0FBSzRoQixVQUFVNWhCLEtBQUs0aEIsVUFBVUMsU0FBU2xuQixLQUFLMEssR0FBVSxTQUFXLGNBQWNpQixFQUFFbE0sT0FJekYsUUFBUzBuQixJQUFxQnhiLEdBQzFCLE1BQU90RyxNQUFLK2hCLGVBQWV6YixFQUFFbE0sT0FJakMsUUFBUzRuQixJQUFtQjFiLEdBQ3hCLE1BQU90RyxNQUFLaWlCLGFBQWEzYixFQUFFbE0sT0FHL0IsUUFBUzhuQixJQUFxQkMsRUFBYTljLEVBQVFFLEdBQy9DLEdBQUluRSxHQUFHNkssRUFBS2dDLENBU1osS0FQS2pPLEtBQUtvaUIsaUJBQ05waUIsS0FBS29pQixrQkFDTHBpQixLQUFLcWlCLHFCQUNMcmlCLEtBQUtzaUIsdUJBQ0x0aUIsS0FBS3VpQix1QkFHSm5oQixFQUFJLEVBQU8sRUFBSkEsRUFBT0EsSUFBSyxDQWNwQixHQVhBNkssRUFBTWlMLElBQW9CLElBQU0sSUFBSTljLElBQUlnSCxHQUNwQ21FLElBQVd2RixLQUFLdWlCLG1CQUFtQm5oQixLQUNuQ3BCLEtBQUt1aUIsbUJBQW1CbmhCLEdBQUssR0FBSWtOLFFBQU8sSUFBTXRPLEtBQUt3aUIsU0FBU3ZXLEVBQUssSUFBSW5PLFFBQVEsSUFBSyxNQUFTLElBQUssS0FDaEdrQyxLQUFLc2lCLG9CQUFvQmxoQixHQUFLLEdBQUlrTixRQUFPLElBQU10TyxLQUFLeWlCLGNBQWN4VyxFQUFLLElBQUluTyxRQUFRLElBQUssTUFBUyxJQUFLLEtBQ3RHa0MsS0FBS3FpQixrQkFBa0JqaEIsR0FBSyxHQUFJa04sUUFBTyxJQUFNdE8sS0FBSzBpQixZQUFZelcsRUFBSyxJQUFJbk8sUUFBUSxJQUFLLE1BQVMsSUFBSyxNQUVqR2tDLEtBQUtvaUIsZUFBZWhoQixLQUNyQjZNLEVBQVEsSUFBTWpPLEtBQUt3aUIsU0FBU3ZXLEVBQUssSUFBTSxLQUFPak0sS0FBS3lpQixjQUFjeFcsRUFBSyxJQUFNLEtBQU9qTSxLQUFLMGlCLFlBQVl6VyxFQUFLLElBQ3pHak0sS0FBS29pQixlQUFlaGhCLEdBQUssR0FBSWtOLFFBQU9MLEVBQU1uUSxRQUFRLElBQUssSUFBSyxNQUc1RHlILEdBQXFCLFNBQVhGLEdBQXFCckYsS0FBS3VpQixtQkFBbUJuaEIsR0FBR3pHLEtBQUt3bkIsR0FDL0QsTUFBTy9nQixFQUNKLElBQUltRSxHQUFxQixRQUFYRixHQUFvQnJGLEtBQUtzaUIsb0JBQW9CbGhCLEdBQUd6RyxLQUFLd25CLEdBQ3RFLE1BQU8vZ0IsRUFDSixJQUFJbUUsR0FBcUIsT0FBWEYsR0FBbUJyRixLQUFLcWlCLGtCQUFrQmpoQixHQUFHekcsS0FBS3duQixHQUNuRSxNQUFPL2dCLEVBQ0osS0FBS21FLEdBQVV2RixLQUFLb2lCLGVBQWVoaEIsR0FBR3pHLEtBQUt3bkIsR0FDOUMsTUFBTy9nQixJQU9uQixRQUFTdWhCLElBQWlCdGUsR0FDdEIsSUFBS3JFLEtBQUtrTSxVQUNOLE1BQWdCLE9BQVQ3SCxFQUFnQnJFLEtBQU9rSCxHQUVsQyxJQUFJOU0sR0FBTTRGLEtBQUs4SCxPQUFTOUgsS0FBSzRHLEdBQUdrTyxZQUFjOVUsS0FBSzRHLEdBQUdnYyxRQUN0RCxPQUFhLE9BQVR2ZSxHQUNBQSxFQUFRb2QsR0FBYXBkLEVBQU9yRSxLQUFLaU4sY0FDMUJqTixLQUFLOFksSUFBSXpVLEVBQVFqSyxFQUFLLE1BRXRCQSxFQUlmLFFBQVN5b0IsSUFBdUJ4ZSxHQUM1QixJQUFLckUsS0FBS2tNLFVBQ04sTUFBZ0IsT0FBVDdILEVBQWdCckUsS0FBT2tILEdBRWxDLElBQUkrTixJQUFXalYsS0FBSzVGLE1BQVEsRUFBSTRGLEtBQUtpTixhQUFha0ssTUFBTXpDLEtBQU8sQ0FDL0QsT0FBZ0IsT0FBVHJRLEVBQWdCNFEsRUFBVWpWLEtBQUs4WSxJQUFJelUsRUFBUTRRLEVBQVMsS0FHL0QsUUFBUzZOLElBQW9CemUsR0FDekIsTUFBS3JFLE1BQUtrTSxVQU1NLE1BQVQ3SCxFQUFnQnJFLEtBQUs1RixPQUFTLEVBQUk0RixLQUFLNUYsSUFBSTRGLEtBQUs1RixNQUFRLEVBQUlpSyxFQUFRQSxFQUFRLEdBTC9ELE1BQVRBLEVBQWdCckUsS0FBT2tILElBNEJ0QyxRQUFTNmIsSUFBaUIxZSxHQUN0QixHQUFJaVIsR0FBWTNaLEtBQUt5ZixPQUFPcGIsS0FBS2diLFFBQVFrRCxRQUFRLE9BQVNsZSxLQUFLZ2IsUUFBUWtELFFBQVEsU0FBVyxPQUFTLENBQ25HLE9BQWdCLE9BQVQ3WixFQUFnQmlSLEVBQVl0VixLQUFLOFksSUFBS3pVLEVBQVFpUixFQUFZLEtBS3JFLFFBQVMwTixNQUNMLE1BQU9oakIsTUFBSzRaLFFBQVUsSUFBTSxHQXdCaEMsUUFBUy9CLElBQVUzYSxFQUFPK2xCLEdBQ3RCclcsRUFBZTFQLEVBQU8sRUFBRyxFQUFHLFdBQ3hCLE1BQU84QyxNQUFLaU4sYUFBYTRLLFNBQVM3WCxLQUFLNFosUUFBUzVaLEtBQUs2WixVQUFXb0osS0FheEUsUUFBU0MsSUFBZTlVLEVBQVU5SSxHQUM5QixNQUFPQSxHQUFPNmQsZUFxRGxCLFFBQVNDLElBQVkvZSxHQUdqQixNQUFpRCxPQUF4Q0EsRUFBUSxJQUFJdkosY0FBY3VvQixPQUFPLEdBSTlDLFFBQVNDLElBQWdCMUosRUFBT0MsRUFBUzBKLEdBQ3JDLE1BQUkzSixHQUFRLEdBQ0QySixFQUFVLEtBQU8sS0FFakJBLEVBQVUsS0FBTyxLQStGaEMsUUFBU0MsSUFBUW5mLEVBQU9nSixHQUNwQkEsRUFBTXVFLElBQWVoSixFQUF1QixLQUFoQixLQUFPdkUsSUFpQnZDLFFBQVNvZixNQUNMLE1BQU96akIsTUFBSzhILE9BQVMsTUFBUSxHQUdqQyxRQUFTNGIsTUFDTCxNQUFPMWpCLE1BQUs4SCxPQUFTLDZCQUErQixHQTRHeEQsUUFBUzZiLElBQW9CdGYsR0FDekIsTUFBTzZTLElBQTJCLElBQVI3UyxHQUc5QixRQUFTdWYsTUFDTCxNQUFPMU0sSUFBbUJqVCxNQUFNLEtBQU1DLFdBQVcyZixZQVlyRCxRQUFTQyxJQUEyQmxhLEVBQUtxQyxFQUFLOEosR0FDMUMsR0FBSXhJLEdBQVN2TixLQUFLK2pCLFVBQVVuYSxFQUM1QixPQUFPK0IsR0FBVzRCLEdBQVVBLEVBQU8vSSxLQUFLeUgsRUFBSzhKLEdBQU94SSxFQVl4RCxRQUFTTSxJQUFnQmpFLEdBQ3JCLEdBQUl2RSxHQUFTckYsS0FBS2drQixnQkFBZ0JwYSxHQUM5QnFhLEVBQWNqa0IsS0FBS2drQixnQkFBZ0JwYSxFQUFJOU4sY0FFM0MsT0FBSXVKLEtBQVc0ZSxFQUNKNWUsR0FHWHJGLEtBQUtna0IsZ0JBQWdCcGEsR0FBT3FhLEVBQVlubUIsUUFBUSxtQkFBb0IsU0FBVTBKLEdBQzFFLE1BQU9BLEdBQUkwQyxNQUFNLEtBR2RsSyxLQUFLZ2tCLGdCQUFnQnBhLElBS2hDLFFBQVMrRCxNQUNMLE1BQU8zTixNQUFLa2tCLGFBTWhCLFFBQVNwWCxJQUFTckUsR0FDZCxNQUFPekksTUFBS21rQixTQUFTcm1CLFFBQVEsS0FBTTJLLEdBR3ZDLFFBQVMyYixJQUFvQm5SLEdBQ3pCLE1BQU9BLEdBbUJYLFFBQVNvUixJQUF3QjViLEVBQVFnWCxFQUFleE0sRUFBUXFSLEdBQzVELEdBQUkvVyxHQUFTdk4sS0FBS3VrQixjQUFjdFIsRUFDaEMsT0FBUXRILEdBQVc0QixHQUNmQSxFQUFPOUUsRUFBUWdYLEVBQWV4TSxFQUFRcVIsR0FDdEMvVyxFQUFPelAsUUFBUSxNQUFPMkssR0FHOUIsUUFBUytiLElBQVl6SixFQUFNeE4sR0FDdkIsR0FBSWxJLEdBQVNyRixLQUFLdWtCLGNBQWN4SixFQUFPLEVBQUksU0FBVyxPQUN0RCxPQUFPcFAsR0FBV3RHLEdBQVVBLEVBQU9rSSxHQUFVbEksRUFBT3ZILFFBQVEsTUFBT3lQLEdBR3ZFLFFBQVNrWCxJQUFpQnRjLEdBQ3RCLEdBQUlaLEdBQU1uRyxDQUNWLEtBQUtBLElBQUsrRyxHQUNOWixFQUFPWSxFQUFPL0csR0FDVnVLLEVBQVdwRSxHQUNYdkgsS0FBS29CLEdBQUttRyxFQUVWdkgsS0FBSyxJQUFNb0IsR0FBS21HLENBS3hCdkgsTUFBSzBrQixxQkFBdUIsR0FBSXBXLFFBQU90TyxLQUFLMmtCLGNBQWNDLE9BQVMsSUFBTSxVQUFZQSxRQW9EekYsUUFBU0MsSUFBWXhmLEVBQVF5ZixFQUFPQyxFQUFPQyxHQUN2QyxHQUFJMWYsR0FBU3NGLElBQ1RuRixFQUFNTCxJQUF3QjJGLElBQUlpYSxFQUFRRixFQUM5QyxPQUFPeGYsR0FBT3lmLEdBQU90ZixFQUFLSixHQUc5QixRQUFTNGYsSUFBTTVmLEVBQVF5ZixFQUFPQyxFQUFPRyxFQUFPRixHQVF4QyxHQVBzQixnQkFBWDNmLEtBQ1B5ZixFQUFRemYsRUFDUkEsRUFBUzBCLFFBR2IxQixFQUFTQSxHQUFVLEdBRU4sTUFBVHlmLEVBQ0EsTUFBT0QsSUFBV3hmLEVBQVF5ZixFQUFPQyxFQUFPQyxFQUc1QyxJQUFJNWpCLEdBQ0ErakIsSUFDSixLQUFLL2pCLEVBQUksRUFBTzhqQixFQUFKOWpCLEVBQVdBLElBQ25CK2pCLEVBQUkvakIsR0FBS3lqQixHQUFXeGYsRUFBUWpFLEVBQUcyakIsRUFBT0MsRUFFMUMsT0FBT0csR0FHWCxRQUFTQyxJQUFtQi9mLEVBQVF5ZixHQUNoQyxNQUFPRyxJQUFLNWYsRUFBUXlmLEVBQU8sU0FBVSxHQUFJLFNBRzdDLFFBQVNPLElBQXdCaGdCLEVBQVF5ZixHQUNyQyxNQUFPRyxJQUFLNWYsRUFBUXlmLEVBQU8sY0FBZSxHQUFJLFNBR2xELFFBQVNRLElBQXFCamdCLEVBQVF5ZixHQUNsQyxNQUFPRyxJQUFLNWYsRUFBUXlmLEVBQU8sV0FBWSxFQUFHLE9BRzlDLFFBQVNTLElBQTBCbGdCLEVBQVF5ZixHQUN2QyxNQUFPRyxJQUFLNWYsRUFBUXlmLEVBQU8sZ0JBQWlCLEVBQUcsT0FHbkQsUUFBU1UsSUFBd0JuZ0IsRUFBUXlmLEdBQ3JDLE1BQU9HLElBQUs1ZixFQUFReWYsRUFBTyxjQUFlLEVBQUcsT0FxQmpELFFBQVNXLE1BQ0wsR0FBSWxxQixHQUFpQnlFLEtBQUtrYSxLQWExQixPQVhBbGEsTUFBS2dhLGNBQWdCMEwsR0FBUTFsQixLQUFLZ2EsZUFDbENoYSxLQUFLaWEsTUFBZ0J5TCxHQUFRMWxCLEtBQUtpYSxPQUNsQ2phLEtBQUt3UCxRQUFnQmtXLEdBQVExbEIsS0FBS3dQLFNBRWxDalUsRUFBS3dlLGFBQWdCMkwsR0FBUW5xQixFQUFLd2UsY0FDbEN4ZSxFQUFLdWUsUUFBZ0I0TCxHQUFRbnFCLEVBQUt1ZSxTQUNsQ3ZlLEVBQUtzZSxRQUFnQjZMLEdBQVFucUIsRUFBS3NlLFNBQ2xDdGUsRUFBS3FlLE1BQWdCOEwsR0FBUW5xQixFQUFLcWUsT0FDbENyZSxFQUFLMFUsT0FBZ0J5VixHQUFRbnFCLEVBQUswVSxRQUNsQzFVLEVBQUtnZSxNQUFnQm1NLEdBQVFucUIsRUFBS2dlLE9BRTNCdlosS0FHWCxRQUFTMmxCLElBQW9Dck0sRUFBVWpWLEVBQU8wRSxFQUFPMFUsR0FDakUsR0FBSWxCLEdBQVFYLEdBQXVCdlgsRUFBTzBFLEVBTTFDLE9BSkF1USxHQUFTVSxlQUFpQnlELEVBQVlsQixFQUFNdkMsY0FDNUNWLEVBQVNXLE9BQWlCd0QsRUFBWWxCLEVBQU10QyxNQUM1Q1gsRUFBUzlKLFNBQWlCaU8sRUFBWWxCLEVBQU0vTSxRQUVyQzhKLEVBQVNhLFVBSXBCLFFBQVN5TCxJQUE0QnZoQixFQUFPMEUsR0FDeEMsTUFBTzRjLElBQW1DM2xCLEtBQU1xRSxFQUFPMEUsRUFBTyxHQUlsRSxRQUFTOGMsSUFBaUN4aEIsRUFBTzBFLEdBQzdDLE1BQU80YyxJQUFtQzNsQixLQUFNcUUsRUFBTzBFLEVBQU8sSUFHbEUsUUFBUytjLElBQVNyZCxHQUNkLE1BQWEsR0FBVEEsRUFDTzlNLEtBQUtnTixNQUFNRixHQUVYOU0sS0FBSytNLEtBQUtELEdBSXpCLFFBQVNzZCxNQUNMLEdBSUlqTSxHQUFTRCxFQUFTRCxFQUFPTCxFQUFPeU0sRUFKaENqTSxFQUFlL1osS0FBS2dhLGNBQ3BCTCxFQUFlM1osS0FBS2lhLE1BQ3BCaEssRUFBZWpRLEtBQUt3UCxRQUNwQmpVLEVBQWV5RSxLQUFLa2EsS0F3Q3hCLE9BbkNPSCxJQUFnQixHQUFLSixHQUFRLEdBQUsxSixHQUFVLEdBQzFCLEdBQWhCOEosR0FBNkIsR0FBUkosR0FBdUIsR0FBVjFKLElBQ3ZDOEosR0FBdUQsTUFBdkMrTCxHQUFRRyxHQUFhaFcsR0FBVTBKLEdBQy9DQSxFQUFPLEVBQ1AxSixFQUFTLEdBS2IxVSxFQUFLd2UsYUFBZUEsRUFBZSxJQUVuQ0QsRUFBb0J0UixFQUFTdVIsRUFBZSxLQUM1Q3hlLEVBQUt1ZSxRQUFlQSxFQUFVLEdBRTlCRCxFQUFvQnJSLEVBQVNzUixFQUFVLElBQ3ZDdmUsRUFBS3NlLFFBQWVBLEVBQVUsR0FFOUJELEVBQW9CcFIsRUFBU3FSLEVBQVUsSUFDdkN0ZSxFQUFLcWUsTUFBZUEsRUFBUSxHQUU1QkQsR0FBUW5SLEVBQVNvUixFQUFRLElBR3pCb00sRUFBaUJ4ZCxFQUFTMGQsR0FBYXZNLElBQ3ZDMUosR0FBVStWLEVBQ1ZyTSxHQUFRbU0sR0FBUUcsR0FBYUQsSUFHN0J6TSxFQUFRL1EsRUFBU3lILEVBQVMsSUFDMUJBLEdBQVUsR0FFVjFVLEVBQUtvZSxLQUFTQSxFQUNkcGUsRUFBSzBVLE9BQVNBLEVBQ2QxVSxFQUFLZ2UsTUFBU0EsRUFFUHZaLEtBR1gsUUFBU2ttQixJQUFjdk0sR0FHbkIsTUFBYyxNQUFQQSxFQUFjLE9BR3pCLFFBQVNzTSxJQUFjaFcsR0FFbkIsTUFBZ0IsUUFBVEEsRUFBa0IsS0FHN0IsUUFBU2tXLElBQUk3YSxHQUNULEdBQUlxTyxHQUNBMUosRUFDQThKLEVBQWUvWixLQUFLZ2EsYUFJeEIsSUFGQTFPLEVBQVFELEVBQWVDLEdBRVQsVUFBVkEsR0FBK0IsU0FBVkEsRUFHckIsTUFGQXFPLEdBQVMzWixLQUFLaWEsTUFBVUYsRUFBZSxNQUN2QzlKLEVBQVNqUSxLQUFLd1AsUUFBVTBXLEdBQWF2TSxHQUNwQixVQUFWck8sRUFBb0IyRSxFQUFTQSxFQUFTLEVBSTdDO09BREEwSixFQUFPM1osS0FBS2lhLE1BQVF0ZSxLQUFLeWYsTUFBTTZLLEdBQWFqbUIsS0FBS3dQLFVBQ3pDbEUsR0FDSixJQUFLLE9BQVcsTUFBT3FPLEdBQU8sRUFBUUksRUFBZSxNQUNyRCxLQUFLLE1BQVcsTUFBT0osR0FBZUksRUFBZSxLQUNyRCxLQUFLLE9BQVcsTUFBYyxJQUFQSixFQUFlSSxFQUFlLElBQ3JELEtBQUssU0FBVyxNQUFjLE1BQVBKLEVBQWVJLEVBQWUsR0FDckQsS0FBSyxTQUFXLE1BQWMsT0FBUEosRUFBZUksRUFBZSxHQUVyRCxLQUFLLGNBQWUsTUFBT3BlLE1BQUtnTixNQUFhLE1BQVBnUixHQUFnQkksQ0FDdEQsU0FBUyxLQUFNLElBQUloYSxPQUFNLGdCQUFrQnVMLElBTXZELFFBQVM4YSxNQUNMLE1BQ0lwbUIsTUFBS2dhLGNBQ1EsTUFBYmhhLEtBQUtpYSxNQUNKamEsS0FBS3dQLFFBQVUsR0FBTSxPQUNLLFFBQTNCNUcsRUFBTTVJLEtBQUt3UCxRQUFVLElBSTdCLFFBQVM2VyxJQUFRQyxHQUNiLE1BQU8sWUFDSCxNQUFPdG1CLE1BQUttbUIsR0FBR0csSUFhdkIsUUFBU0MsSUFBbUJqYixHQUV4QixNQURBQSxHQUFRRCxFQUFlQyxHQUNoQnRMLEtBQUtzTCxFQUFRLE9BR3hCLFFBQVNrYixJQUFXcGMsR0FDaEIsTUFBTyxZQUNILE1BQU9wSyxNQUFLa2EsTUFBTTlQLElBWTFCLFFBQVNzUCxNQUNMLE1BQU9sUixHQUFTeEksS0FBSzJaLE9BQVMsR0FhbEMsUUFBUzhNLElBQWtCeFQsRUFBUXhLLEVBQVFnWCxFQUFlNkUsRUFBVWhmLEdBQ2hFLE1BQU9BLEdBQU9vaEIsYUFBYWplLEdBQVUsSUFBS2dYLEVBQWV4TSxFQUFRcVIsR0FHckUsUUFBU3FDLElBQWlDQyxFQUFnQm5ILEVBQWVuYSxHQUNyRSxHQUFJZ1UsR0FBV3NDLEdBQXVCZ0wsR0FBZ0JwZCxNQUNsRHNRLEVBQVdzQixHQUFNOUIsRUFBUzZNLEdBQUcsTUFDN0J0TSxFQUFXdUIsR0FBTTlCLEVBQVM2TSxHQUFHLE1BQzdCdk0sRUFBV3dCLEdBQU05QixFQUFTNk0sR0FBRyxNQUM3QnhNLEVBQVd5QixHQUFNOUIsRUFBUzZNLEdBQUcsTUFDN0JsVyxFQUFXbUwsR0FBTTlCLEVBQVM2TSxHQUFHLE1BQzdCNU0sRUFBVzZCLEdBQU05QixFQUFTNk0sR0FBRyxNQUU3Qm5oQixFQUFJOFUsRUFBVStNLEdBQVdyWSxJQUFNLElBQUtzTCxJQUNyQixHQUFYRCxJQUEyQixNQUMzQkEsRUFBVWdOLEdBQVd2Z0IsSUFBTSxLQUFNdVQsSUFDdEIsR0FBWEQsSUFBMkIsTUFDM0JBLEVBQVVpTixHQUFXOVMsSUFBTSxLQUFNNkYsSUFDdEIsR0FBWEQsSUFBMkIsTUFDM0JBLEVBQVVrTixHQUFXL1MsSUFBTSxLQUFNNkYsSUFDdEIsR0FBWDFKLElBQTJCLE1BQzNCQSxFQUFVNFcsR0FBVzdTLElBQU0sS0FBTS9ELElBQ3RCLEdBQVhzSixJQUEyQixPQUFtQixLQUFNQSxFQUs1RCxPQUhBdlUsR0FBRSxHQUFLeWEsRUFDUHphLEVBQUUsSUFBTTRoQixFQUFpQixFQUN6QjVoQixFQUFFLEdBQUtNLEVBQ0FtaEIsR0FBa0J4aUIsTUFBTSxLQUFNZSxHQUl6QyxRQUFTOGhCLElBQWdEQyxFQUFXQyxHQUNoRSxNQUE4QmpnQixVQUExQjhmLEdBQVdFLElBQ0osRUFFR2hnQixTQUFWaWdCLEVBQ09ILEdBQVdFLElBRXRCRixHQUFXRSxHQUFhQyxHQUNqQixHQUdYLFFBQVN0SCxJQUFVdUgsR0FDZixHQUFJM2hCLEdBQVN0RixLQUFLaU4sYUFDZE0sRUFBU29aLEdBQWdDM21CLE1BQU9pbkIsRUFBWTNoQixFQU1oRSxPQUpJMmhCLEtBQ0ExWixFQUFTakksRUFBT2tmLFlBQVl4a0IsS0FBTXVOLElBRy9CakksRUFBT2thLFdBQVdqUyxHQUs3QixRQUFTMlosTUFRTCxHQUdJck4sR0FBU0QsRUFBT0wsRUFIaEJPLEVBQVVxTixHQUFnQm5uQixLQUFLZ2EsZUFBaUIsSUFDaERMLEVBQWV3TixHQUFnQm5uQixLQUFLaWEsT0FDcENoSyxFQUFla1gsR0FBZ0JubkIsS0FBS3dQLFFBSXhDcUssR0FBb0JyUixFQUFTc1IsRUFBVSxJQUN2Q0YsRUFBb0JwUixFQUFTcVIsRUFBVSxJQUN2Q0MsR0FBVyxHQUNYRCxHQUFXLEdBR1hOLEVBQVMvUSxFQUFTeUgsRUFBUyxJQUMzQkEsR0FBVSxFQUlWLElBQUltWCxHQUFJN04sRUFDSnZGLEVBQUkvRCxFQUNKb1gsRUFBSTFOLEVBQ0o1RixFQUFJNkYsRUFDSnRULEVBQUl1VCxFQUNKckwsRUFBSXNMLEVBQ0p3TixFQUFRdG5CLEtBQUt1bkIsV0FFakIsT0FBS0QsSUFNVyxFQUFSQSxFQUFZLElBQU0sSUFDdEIsS0FDQ0YsRUFBSUEsRUFBSSxJQUFNLEtBQ2RwVCxFQUFJQSxFQUFJLElBQU0sS0FDZHFULEVBQUlBLEVBQUksSUFBTSxLQUNidFQsR0FBS3pOLEdBQUtrSSxFQUFLLElBQU0sS0FDdEJ1RixFQUFJQSxFQUFJLElBQU0sS0FDZHpOLEVBQUlBLEVBQUksSUFBTSxLQUNka0ksRUFBSUEsRUFBSSxJQUFNLElBWFIsTUFsNkdmLEdBQUl4SyxJQWdPQXVHLEdBM0dBdEMsR0FBbUJsRSxFQUFtQmtFLG9CQWlEdENHLElBQW1CLEVBeURuQmtDLE1BaUhBYyxNQWdGQWtDLEdBQW1CLG1MQUVuQlEsR0FBd0IsNkNBRXhCSixNQUVBVixNQW9GQXdhLEdBQWlCLEtBQ2pCQyxHQUFpQixPQUNqQkMsR0FBaUIsUUFDakJDLEdBQWlCLFFBQ2pCQyxHQUFpQixhQUNqQkMsR0FBaUIsUUFDakJDLEdBQWlCLFlBQ2pCQyxHQUFpQixnQkFDakJDLEdBQWlCLFVBQ2pCQyxHQUFpQixVQUNqQkMsR0FBaUIsZUFFakJDLEdBQWlCLE1BQ2pCQyxHQUFpQixXQUVqQmxNLEdBQWlCLHFCQUNqQlQsR0FBbUIsMEJBRW5CNE0sR0FBaUIsdUJBSWpCQyxHQUFZLG1IQUdabmEsTUEyQkFhLE1BOEJBd0MsR0FBTyxFQUNQRixHQUFRLEVBQ1JDLEdBQU8sRUFDUEUsR0FBTyxFQUNQQyxHQUFTLEVBQ1RDLEdBQVMsRUFDVEMsR0FBYyxFQUNkRyxHQUFPLEVBQ1BFLEdBQVUsQ0FRZHJGLEdBQWUsS0FBTSxLQUFNLEdBQUksS0FBTSxXQUNqQyxNQUFPNU0sTUFBSzlGLFFBQVUsSUFHMUIwUyxFQUFlLE1BQU8sRUFBRyxFQUFHLFNBQVV2SCxHQUNsQyxNQUFPckYsTUFBS2lOLGFBQWFpRCxZQUFZbFEsS0FBTXFGLEtBRy9DdUgsRUFBZSxPQUFRLEVBQUcsRUFBRyxTQUFVdkgsR0FDbkMsTUFBT3JGLE1BQUtpTixhQUFhZ0QsT0FBT2pRLEtBQU1xRixLQUsxQzJGLEVBQWEsUUFBUyxLQUl0QmdELEVBQWMsSUFBUTZaLElBQ3RCN1osRUFBYyxLQUFRNlosR0FBV0osSUFDakN6WixFQUFjLE1BQVEsU0FBVUksRUFBVTlJLEdBQ3RDLE1BQU9BLEdBQU9rTCxpQkFBaUJwQyxLQUVuQ0osRUFBYyxPQUFRLFNBQVVJLEVBQVU5SSxHQUN0QyxNQUFPQSxHQUFPdUwsWUFBWXpDLEtBRzlCVyxHQUFlLElBQUssTUFBTyxTQUFVMUssRUFBT2dKLEdBQ3hDQSxFQUFNaUUsSUFBUzFJLEVBQU12RSxHQUFTLElBR2xDMEssR0FBZSxNQUFPLFFBQVMsU0FBVTFLLEVBQU9nSixFQUFPbEYsRUFBUWpMLEdBQzNELEdBQUloRCxHQUFRaU8sRUFBT0gsUUFBUXFJLFlBQVloTSxFQUFPbkgsRUFBT2lMLEVBQU9yQixRQUUvQyxPQUFUNU0sRUFDQW1ULEVBQU1pRSxJQUFTcFgsRUFFZm1NLEVBQWdCOEIsR0FBUWxDLGFBQWU1QixHQU0vQyxJQUFJb0wsSUFBbUIsaUNBQ25COFksR0FBc0Isd0ZBQXdGN29CLE1BQU0sS0FNcEg4b0IsR0FBMkIsa0RBQWtEOW9CLE1BQU0sS0EyRW5GK29CLEdBQTBCSCxHQWlCMUJJLEdBQXFCSixHQWtHckI1VixLQVNKM08sR0FBbUJxTyw2QkFBOEIsQ0FJakQsSUFBSWMsSUFBbUIsa0pBQ25CRSxHQUFnQiw2SUFFaEJHLEdBQVUsd0JBRVZGLEtBQ0MsZUFBZ0Isd0JBQ2hCLGFBQWMsb0JBQ2QsZUFBZ0IsbUJBQ2hCLGFBQWMsZUFBZSxJQUM3QixXQUFZLGdCQUNaLFVBQVcsY0FBYyxJQUN6QixhQUFjLGVBQ2QsV0FBWSxVQUVaLGFBQWMsZ0JBQ2QsWUFBYSxlQUFlLElBQzVCLFVBQVcsVUFJWkMsS0FDQyxnQkFBaUIsd0JBQ2pCLGdCQUFpQix1QkFDakIsV0FBWSxtQkFDWixRQUFTLGNBQ1QsY0FBZSxzQkFDZixjQUFlLHFCQUNmLFNBQVUsaUJBQ1YsT0FBUSxhQUNSLEtBQU0sU0FHUEksR0FBa0IscUJBdUV0QjNQLEdBQW1CNFAsd0JBQTBCdEIsR0FDekMsNExBSUEsU0FBVWxLLEdBQ05BLEVBQU92QixHQUFLLEdBQUk3TSxNQUFLb08sRUFBT1QsSUFBTVMsRUFBTzZOLFFBQVUsT0FBUyxPQTRCcEVwSixFQUFlLElBQUssRUFBRyxFQUFHLFdBQ3RCLEdBQUlpSCxHQUFJN1QsS0FBS2hHLE1BQ2IsT0FBWSxPQUFMNlosRUFBWSxHQUFLQSxFQUFJLElBQU1BLElBR3RDakgsRUFBZSxHQUFJLEtBQU0sR0FBSSxFQUFHLFdBQzVCLE1BQU81TSxNQUFLaEcsT0FBUyxNQUd6QjRTLEVBQWUsR0FBSSxPQUFVLEdBQVUsRUFBRyxRQUMxQ0EsRUFBZSxHQUFJLFFBQVUsR0FBVSxFQUFHLFFBQzFDQSxFQUFlLEdBQUksU0FBVSxHQUFHLEdBQU8sRUFBRyxRQUkxQzVCLEVBQWEsT0FBUSxLQUlyQmdELEVBQWMsSUFBVW9hLElBQ3hCcGEsRUFBYyxLQUFVNlosR0FBV0osSUFDbkN6WixFQUFjLE9BQVVpYSxHQUFXTixJQUNuQzNaLEVBQWMsUUFBVWthLEdBQVdOLElBQ25DNVosRUFBYyxTQUFVa2EsR0FBV04sSUFFbkM3WSxHQUFlLFFBQVMsVUFBV3lDLElBQ25DekMsRUFBYyxPQUFRLFNBQVUxSyxFQUFPZ0osR0FDbkNBLEVBQU1tRSxJQUF5QixJQUFqQm5OLEVBQU14SixPQUFla0osRUFBbUI0a0Isa0JBQWtCdGtCLEdBQVN1RSxFQUFNdkUsS0FFM0YwSyxFQUFjLEtBQU0sU0FBVTFLLEVBQU9nSixHQUNqQ0EsRUFBTW1FLElBQVF6TixFQUFtQjRrQixrQkFBa0J0a0IsS0FFdkQwSyxFQUFjLElBQUssU0FBVTFLLEVBQU9nSixHQUNoQ0EsRUFBTW1FLElBQVFtSCxTQUFTdFUsRUFBTyxNQWVsQ04sRUFBbUI0a0Isa0JBQW9CLFNBQVV0a0IsR0FDN0MsTUFBT3VFLEdBQU12RSxJQUFVdUUsRUFBTXZFLEdBQVMsR0FBSyxLQUFPLEtBS3RELElBQUl1a0IsSUFBYS9jLEVBQVcsWUFBWSxFQWdOeEM5SCxHQUFtQnNULFNBQVcsWUFrUDlCLElBQUl3UixJQUFleFcsR0FDZCxtR0FDQSxXQUNJLEdBQUlrSyxHQUFRckYsR0FBbUJqVCxNQUFNLEtBQU1DLFVBQzNDLE9BQUlsRSxNQUFLa00sV0FBYXFRLEVBQU1yUSxVQUNUbE0sS0FBUnVjLEVBQWV2YyxLQUFPdWMsRUFFdEJ0VixNQUtoQjZoQixHQUFlelcsR0FDZixtR0FDQSxXQUNJLEdBQUlrSyxHQUFRckYsR0FBbUJqVCxNQUFNLEtBQU1DLFVBQzNDLE9BQUlsRSxNQUFLa00sV0FBYXFRLEVBQU1yUSxVQUNqQnFRLEVBQVF2YyxLQUFPQSxLQUFPdWMsRUFFdEJ0VixNQXdDZjhPLEdBQU0sV0FDTixNQUFPaGMsTUFBS2djLElBQU1oYyxLQUFLZ2MsT0FBUyxHQUFLaGMsTUF3RHpDc2dCLElBQU8sSUFBSyxLQUNaQSxHQUFPLEtBQU0sSUFJYnJNLEVBQWMsSUFBTXlOLElBQ3BCek4sRUFBYyxLQUFNeU4sSUFDcEIxTSxHQUFlLElBQUssTUFBTyxTQUFVMUssRUFBT2dKLEVBQU9sRixHQUMvQ0EsRUFBTzZOLFNBQVUsRUFDakI3TixFQUFPTixLQUFPMFMsR0FBaUJrQixHQUFrQnBYLElBUXJELElBQUl1VyxJQUFjLGlCQW9DbEI3VyxHQUFtQnNFLGFBQWUsWUEwSWxDLElBQUl5VSxJQUFjLHlEQUlkQyxHQUFXLCtIQStEZm5CLElBQXVCaFgsR0FBS3lVLEdBQVM5VSxTQXNGckMsSUFBSXdrQixJQUF5QnZMLEdBQVksRUFBRyxPQUN4Q3dMLEdBQXlCeEwsR0FBWSxHQUFJLFdBdUk3Q3paLEdBQW1Cd2IsY0FBZ0Isc0JBc0VuQyxJQUFJMEosSUFBTzVXLEdBQ1Asa0pBQ0EsU0FBVXpJLEdBQ04sTUFBWTdDLFVBQVI2QyxFQUNPNUosS0FBS2lOLGFBRUxqTixLQUFLc0YsT0FBT3NFLElBdUgvQmdELEdBQWUsR0FBSSxLQUFNLEdBQUksRUFBRyxXQUM1QixNQUFPNU0sTUFBSzRXLFdBQWEsTUFHN0JoSyxFQUFlLEdBQUksS0FBTSxHQUFJLEVBQUcsV0FDNUIsTUFBTzVNLE1BQUtrcEIsY0FBZ0IsTUFPaEMzSSxHQUF1QixPQUFZLFlBQ25DQSxHQUF1QixRQUFZLFlBQ25DQSxHQUF1QixPQUFTLGVBQ2hDQSxHQUF1QixRQUFTLGVBSWhDdlYsRUFBYSxXQUFZLE1BQ3pCQSxFQUFhLGNBQWUsTUFJNUJnRCxFQUFjLElBQVVvYSxJQUN4QnBhLEVBQWMsSUFBVW9hLElBQ3hCcGEsRUFBYyxLQUFVNlosR0FBV0osSUFDbkN6WixFQUFjLEtBQVU2WixHQUFXSixJQUNuQ3paLEVBQWMsT0FBVWlhLEdBQVdOLElBQ25DM1osRUFBYyxPQUFVaWEsR0FBV04sSUFDbkMzWixFQUFjLFFBQVVrYSxHQUFXTixJQUNuQzVaLEVBQWMsUUFBVWthLEdBQVdOLElBRW5DM1ksR0FBbUIsT0FBUSxRQUFTLE9BQVEsU0FBVSxTQUFVNUssRUFBTzJRLEVBQU03TSxFQUFRakwsR0FDakY4WCxFQUFLOVgsRUFBTXpDLE9BQU8sRUFBRyxJQUFNbU8sRUFBTXZFLEtBR3JDNEssR0FBbUIsS0FBTSxNQUFPLFNBQVU1SyxFQUFPMlEsRUFBTTdNLEVBQVFqTCxHQUMzRDhYLEVBQUs5WCxHQUFTNkcsRUFBbUI0a0Isa0JBQWtCdGtCLEtBc0R2RHVJLEVBQWUsSUFBSyxFQUFHLEtBQU0sV0FJN0I1QixFQUFhLFVBQVcsS0FJeEJnRCxFQUFjLElBQUt3WixJQUNuQnpZLEVBQWMsSUFBSyxTQUFVMUssRUFBT2dKLEdBQ2hDQSxFQUFNaUUsSUFBOEIsR0FBcEIxSSxFQUFNdkUsR0FBUyxLQVduQ3VJLEVBQWUsS0FBTSxLQUFNLEdBQUksS0FBTSxRQUNyQ0EsRUFBZSxLQUFNLEtBQU0sR0FBSSxLQUFNLFdBSXJDNUIsRUFBYSxPQUFRLEtBQ3JCQSxFQUFhLFVBQVcsS0FJeEJnRCxFQUFjLElBQU02WixJQUNwQjdaLEVBQWMsS0FBTTZaLEdBQVdKLElBQy9CelosRUFBYyxJQUFNNlosSUFDcEI3WixFQUFjLEtBQU02WixHQUFXSixJQUUvQnhZLEdBQW1CLElBQUssS0FBTSxJQUFLLE1BQU8sU0FBVTVLLEVBQU8yUSxFQUFNN00sRUFBUWpMLEdBQ3JFOFgsRUFBSzlYLEVBQU16QyxPQUFPLEVBQUcsSUFBTW1PLEVBQU12RSxJQVdyQyxJQUFJOGtCLEtBQ0F6VSxJQUFNLEVBQ05DLElBQU0sRUF5QlYvSCxHQUFlLEtBQU0sS0FBTSxHQUFJLEtBQU0sUUFJckM1QixFQUFhLE9BQVEsS0FJckJnRCxFQUFjLElBQU02WixJQUNwQjdaLEVBQWMsS0FBTTZaLEdBQVdKLElBQy9CelosRUFBYyxLQUFNLFNBQVVJLEVBQVU5SSxHQUNwQyxNQUFPOEksR0FBVzlJLEVBQU9xZixjQUFnQnJmLEVBQU9vZix1QkFHcEQzVixHQUFlLElBQUssTUFBT3dDLElBQzNCeEMsRUFBYyxLQUFNLFNBQVUxSyxFQUFPZ0osR0FDakNBLEVBQU1rRSxJQUFRM0ksRUFBTXZFLEVBQU04SSxNQUFNMGEsSUFBVyxHQUFJLEtBS25ELElBQUl1QixJQUFtQnZkLEVBQVcsUUFBUSxFQUkxQ2UsR0FBZSxJQUFLLEVBQUcsS0FBTSxPQUU3QkEsRUFBZSxLQUFNLEVBQUcsRUFBRyxTQUFVdkgsR0FDakMsTUFBT3JGLE1BQUtpTixhQUFheVYsWUFBWTFpQixLQUFNcUYsS0FHL0N1SCxFQUFlLE1BQU8sRUFBRyxFQUFHLFNBQVV2SCxHQUNsQyxNQUFPckYsTUFBS2lOLGFBQWF3VixjQUFjemlCLEtBQU1xRixLQUdqRHVILEVBQWUsT0FBUSxFQUFHLEVBQUcsU0FBVXZILEdBQ25DLE1BQU9yRixNQUFLaU4sYUFBYXVWLFNBQVN4aUIsS0FBTXFGLEtBRzVDdUgsRUFBZSxJQUFLLEVBQUcsRUFBRyxXQUMxQkEsRUFBZSxJQUFLLEVBQUcsRUFBRyxjQUkxQjVCLEVBQWEsTUFBTyxLQUNwQkEsRUFBYSxVQUFXLEtBQ3hCQSxFQUFhLGFBQWMsS0FJM0JnRCxFQUFjLElBQVE2WixJQUN0QjdaLEVBQWMsSUFBUTZaLElBQ3RCN1osRUFBYyxJQUFRNlosSUFDdEI3WixFQUFjLEtBQVFzYSxJQUN0QnRhLEVBQWMsTUFBUXNhLElBQ3RCdGEsRUFBYyxPQUFRc2EsSUFFdEJyWixHQUFtQixLQUFNLE1BQU8sUUFBUyxTQUFVNUssRUFBTzJRLEVBQU03TSxFQUFRakwsR0FDcEUsR0FBSStYLEdBQVU5TSxFQUFPSCxRQUFRMFosY0FBY3JkLEVBQU9uSCxFQUFPaUwsRUFBT3JCLFFBRWpELE9BQVhtTyxFQUNBRCxFQUFLbEIsRUFBSW1CLEVBRVQ1TyxFQUFnQjhCLEdBQVF0QixlQUFpQnhDLElBSWpENEssR0FBbUIsSUFBSyxJQUFLLEtBQU0sU0FBVTVLLEVBQU8yUSxFQUFNN00sRUFBUWpMLEdBQzlEOFgsRUFBSzlYLEdBQVMwTCxFQUFNdkUsSUF3QnhCLElBQUlnbEIsSUFBd0IsMkRBQTJEM3BCLE1BQU0sS0FNekY0cEIsR0FBNkIsOEJBQThCNXBCLE1BQU0sS0FLakU2cEIsR0FBMkIsdUJBQXVCN3BCLE1BQU0sSUE0RTVEa04sR0FBZSxPQUFRLE9BQVEsR0FBSSxPQUFRLGFBSTNDNUIsRUFBYSxZQUFhLE9BSTFCZ0QsRUFBYyxNQUFRZ2EsSUFDdEJoYSxFQUFjLE9BQVEwWixJQUN0QjNZLEdBQWUsTUFBTyxRQUFTLFNBQVUxSyxFQUFPZ0osRUFBT2xGLEdBQ25EQSxFQUFPb08sV0FBYTNOLEVBQU12RSxLQWtCOUJ1SSxFQUFlLEtBQU0sS0FBTSxHQUFJLEVBQUcsUUFDbENBLEVBQWUsS0FBTSxLQUFNLEdBQUksRUFBR29XLElBRWxDcFcsRUFBZSxNQUFPLEVBQUcsRUFBRyxXQUN4QixNQUFPLEdBQUtvVyxHQUFRL2UsTUFBTWpFLE1BQVFvTSxFQUFTcE0sS0FBSzZaLFVBQVcsS0FHL0RqTixFQUFlLFFBQVMsRUFBRyxFQUFHLFdBQzFCLE1BQU8sR0FBS29XLEdBQVEvZSxNQUFNakUsTUFBUW9NLEVBQVNwTSxLQUFLNlosVUFBVyxHQUN2RHpOLEVBQVNwTSxLQUFLOFosVUFBVyxLQUdqQ2xOLEVBQWUsTUFBTyxFQUFHLEVBQUcsV0FDeEIsTUFBTyxHQUFLNU0sS0FBSzRaLFFBQVV4TixFQUFTcE0sS0FBSzZaLFVBQVcsS0FHeERqTixFQUFlLFFBQVMsRUFBRyxFQUFHLFdBQzFCLE1BQU8sR0FBSzVNLEtBQUs0WixRQUFVeE4sRUFBU3BNLEtBQUs2WixVQUFXLEdBQ2hEek4sRUFBU3BNLEtBQUs4WixVQUFXLEtBU2pDakMsR0FBUyxLQUFLLEdBQ2RBLEdBQVMsS0FBSyxHQUlkN00sRUFBYSxPQUFRLEtBUXJCZ0QsRUFBYyxJQUFNa1YsSUFDcEJsVixFQUFjLElBQU1rVixJQUNwQmxWLEVBQWMsSUFBTTZaLElBQ3BCN1osRUFBYyxJQUFNNlosSUFDcEI3WixFQUFjLEtBQU02WixHQUFXSixJQUMvQnpaLEVBQWMsS0FBTTZaLEdBQVdKLElBRS9CelosRUFBYyxNQUFPOFosSUFDckI5WixFQUFjLFFBQVMrWixJQUN2Qi9aLEVBQWMsTUFBTzhaLElBQ3JCOVosRUFBYyxRQUFTK1osSUFFdkJoWixHQUFlLElBQUssTUFBTzBDLElBQzNCMUMsR0FBZSxJQUFLLEtBQU0sU0FBVTFLLEVBQU9nSixFQUFPbEYsR0FDOUNBLEVBQU9xaEIsTUFBUXJoQixFQUFPSCxRQUFRZ1EsS0FBSzNULEdBQ25DOEQsRUFBT3dQLFVBQVl0VCxJQUV2QjBLLEdBQWUsSUFBSyxNQUFPLFNBQVUxSyxFQUFPZ0osRUFBT2xGLEdBQy9Da0YsRUFBTW9FLElBQVE3SSxFQUFNdkUsR0FDcEJnQyxFQUFnQjhCLEdBQVFuQixTQUFVLElBRXRDK0gsRUFBYyxNQUFPLFNBQVUxSyxFQUFPZ0osRUFBT2xGLEdBQ3pDLEdBQUlzaEIsR0FBTXBsQixFQUFNeEosT0FBUyxDQUN6QndTLEdBQU1vRSxJQUFRN0ksRUFBTXZFLEVBQU01SixPQUFPLEVBQUdndkIsSUFDcENwYyxFQUFNcUUsSUFBVTlJLEVBQU12RSxFQUFNNUosT0FBT2d2QixJQUNuQ3BqQixFQUFnQjhCLEdBQVFuQixTQUFVLElBRXRDK0gsRUFBYyxRQUFTLFNBQVUxSyxFQUFPZ0osRUFBT2xGLEdBQzNDLEdBQUl1aEIsR0FBT3JsQixFQUFNeEosT0FBUyxFQUN0Qjh1QixFQUFPdGxCLEVBQU14SixPQUFTLENBQzFCd1MsR0FBTW9FLElBQVE3SSxFQUFNdkUsRUFBTTVKLE9BQU8sRUFBR2l2QixJQUNwQ3JjLEVBQU1xRSxJQUFVOUksRUFBTXZFLEVBQU01SixPQUFPaXZCLEVBQU0sSUFDekNyYyxFQUFNc0UsSUFBVS9JLEVBQU12RSxFQUFNNUosT0FBT2t2QixJQUNuQ3RqQixFQUFnQjhCLEdBQVFuQixTQUFVLElBRXRDK0gsRUFBYyxNQUFPLFNBQVUxSyxFQUFPZ0osR0FDbEMsR0FBSW9jLEdBQU1wbEIsRUFBTXhKLE9BQVMsQ0FDekJ3UyxHQUFNb0UsSUFBUTdJLEVBQU12RSxFQUFNNUosT0FBTyxFQUFHZ3ZCLElBQ3BDcGMsRUFBTXFFLElBQVU5SSxFQUFNdkUsRUFBTTVKLE9BQU9ndkIsTUFFdkMxYSxFQUFjLFFBQVMsU0FBVTFLLEVBQU9nSixHQUNwQyxHQUFJcWMsR0FBT3JsQixFQUFNeEosT0FBUyxFQUN0Qjh1QixFQUFPdGxCLEVBQU14SixPQUFTLENBQzFCd1MsR0FBTW9FLElBQVE3SSxFQUFNdkUsRUFBTTVKLE9BQU8sRUFBR2l2QixJQUNwQ3JjLEVBQU1xRSxJQUFVOUksRUFBTXZFLEVBQU01SixPQUFPaXZCLEVBQU0sSUFDekNyYyxFQUFNc0UsSUFBVS9JLEVBQU12RSxFQUFNNUosT0FBT2t2QixLQVd2QyxJQUFJQyxJQUE2QixnQkFnQjdCQyxHQUFhaGUsRUFBVyxTQUFTLEVBSXJDZSxHQUFlLEtBQU0sS0FBTSxHQUFJLEVBQUcsVUFJbEM1QixFQUFhLFNBQVUsS0FJdkJnRCxFQUFjLElBQU02WixJQUNwQjdaLEVBQWMsS0FBTTZaLEdBQVdKLElBQy9CMVksR0FBZSxJQUFLLE1BQU8yQyxHQUkzQixJQUFJb1ksSUFBZWplLEVBQVcsV0FBVyxFQUl6Q2UsR0FBZSxLQUFNLEtBQU0sR0FBSSxFQUFHLFVBSWxDNUIsRUFBYSxTQUFVLEtBSXZCZ0QsRUFBYyxJQUFNNlosSUFDcEI3WixFQUFjLEtBQU02WixHQUFXSixJQUMvQjFZLEdBQWUsSUFBSyxNQUFPNEMsR0FJM0IsSUFBSW9ZLElBQWVsZSxFQUFXLFdBQVcsRUFJekNlLEdBQWUsSUFBSyxFQUFHLEVBQUcsV0FDdEIsU0FBVTVNLEtBQUswWSxjQUFnQixPQUduQzlMLEVBQWUsR0FBSSxLQUFNLEdBQUksRUFBRyxXQUM1QixTQUFVNU0sS0FBSzBZLGNBQWdCLE1BR25DOUwsRUFBZSxHQUFJLE1BQU8sR0FBSSxFQUFHLGVBQ2pDQSxFQUFlLEdBQUksT0FBUSxHQUFJLEVBQUcsV0FDOUIsTUFBNEIsSUFBckI1TSxLQUFLMFksZ0JBRWhCOUwsRUFBZSxHQUFJLFFBQVMsR0FBSSxFQUFHLFdBQy9CLE1BQTRCLEtBQXJCNU0sS0FBSzBZLGdCQUVoQjlMLEVBQWUsR0FBSSxTQUFVLEdBQUksRUFBRyxXQUNoQyxNQUE0QixLQUFyQjVNLEtBQUswWSxnQkFFaEI5TCxFQUFlLEdBQUksVUFBVyxHQUFJLEVBQUcsV0FDakMsTUFBNEIsS0FBckI1TSxLQUFLMFksZ0JBRWhCOUwsRUFBZSxHQUFJLFdBQVksR0FBSSxFQUFHLFdBQ2xDLE1BQTRCLEtBQXJCNU0sS0FBSzBZLGdCQUVoQjlMLEVBQWUsR0FBSSxZQUFhLEdBQUksRUFBRyxXQUNuQyxNQUE0QixLQUFyQjVNLEtBQUswWSxnQkFNaEIxTixFQUFhLGNBQWUsTUFJNUJnRCxFQUFjLElBQVFnYSxHQUFXUixJQUNqQ3haLEVBQWMsS0FBUWdhLEdBQVdQLElBQ2pDelosRUFBYyxNQUFRZ2EsR0FBV04sR0FFakMsSUFBSXhxQixHQUNKLEtBQUtBLEdBQVEsT0FBUUEsR0FBTXJDLFFBQVUsRUFBR3FDLElBQVMsSUFDN0M4USxFQUFjOVEsR0FBT2lyQixHQU96QixLQUFLanJCLEdBQVEsSUFBS0EsR0FBTXJDLFFBQVUsRUFBR3FDLElBQVMsSUFDMUM2UixFQUFjN1IsR0FBT3NtQixHQUl6QixJQUFJd0csSUFBb0JuZSxFQUFXLGdCQUFnQixFQUluRGUsR0FBZSxJQUFNLEVBQUcsRUFBRyxZQUMzQkEsRUFBZSxLQUFNLEVBQUcsRUFBRyxXQVkzQixJQUFJcWQsSUFBeUIvaEIsRUFBTzNELFNBRXBDMGxCLElBQXVCblIsSUFBb0JpUSxHQUMzQ2tCLEdBQXVCOUwsU0FBb0JMLEdBQzNDbU0sR0FBdUJqUCxNQUFvQkEsR0FDM0NpUCxHQUF1QmxQLEtBQW9CQSxHQUMzQ2tQLEdBQXVCNUwsTUFBb0JBLEdBQzNDNEwsR0FBdUI1a0IsT0FBb0JBLEdBQzNDNGtCLEdBQXVCM2lCLEtBQW9CQSxHQUMzQzJpQixHQUF1QnRLLFFBQW9CQSxHQUMzQ3NLLEdBQXVCNWlCLEdBQW9CQSxHQUMzQzRpQixHQUF1QnJLLE1BQW9CQSxHQUMzQ3FLLEdBQXVCQyxJQUFvQi9kLEVBQzNDOGQsR0FBdUI1SixVQUFvQkEsR0FDM0M0SixHQUF1QjNNLFFBQW9CQSxHQUMzQzJNLEdBQXVCMU0sU0FBb0JBLEdBQzNDME0sR0FBdUIzTCxVQUFvQkEsR0FDM0MyTCxHQUF1QjFMLE9BQW9CQSxHQUMzQzBMLEdBQXVCeEwsY0FBb0JBLEdBQzNDd0wsR0FBdUJ2TCxlQUFvQkEsR0FDM0N1TCxHQUF1Qi9kLFFBQW9CaVUsR0FDM0M4SixHQUF1QmhCLEtBQW9CQSxHQUMzQ2dCLEdBQXVCM2tCLE9BQW9CQSxHQUMzQzJrQixHQUF1QmhkLFdBQW9CQSxHQUMzQ2dkLEdBQXVCdGQsSUFBb0JtYyxHQUMzQ21CLEdBQXVCM2dCLElBQW9CdWYsR0FDM0NvQixHQUF1QjdKLGFBQW9CQSxHQUMzQzZKLEdBQXVCbGYsSUFBb0JvQixFQUMzQzhkLEdBQXVCL0wsUUFBb0JBLEdBQzNDK0wsR0FBdUJqTyxTQUFvQmdOLEdBQzNDaUIsR0FBdUJ6TixRQUFvQkEsR0FDM0N5TixHQUF1QmhLLFNBQW9CQSxHQUMzQ2dLLEdBQXVCNUssT0FBb0JBLEdBQzNDNEssR0FBdUJqdUIsWUFBb0JvakIsR0FDM0M2SyxHQUF1Qi9KLE9BQW9CQSxHQUMzQytKLEdBQXVCcHVCLFNBQW9CQSxHQUMzQ291QixHQUF1QmpLLEtBQW9CQSxHQUMzQ2lLLEdBQXVCOWtCLFFBQW9CNGEsR0FDM0NrSyxHQUF1QjNKLGFBQW9CQSxHQUczQzJKLEdBQXVCandCLEtBQWE0dUIsR0FDcENxQixHQUF1QjFWLFdBQWFDLEdBR3BDeVYsR0FBdUJyVCxTQUFjNkosR0FDckN3SixHQUF1QmYsWUFBY3ZJLEdBR3JDc0osR0FBdUJ4USxRQUFVd1EsR0FBdUJ6USxTQUFXMkgsR0FHbkU4SSxHQUF1Qi92QixNQUFjb1csRUFDckMyWixHQUF1QjVhLFlBQWNrQixFQUdyQzBaLEdBQXVCalYsS0FBaUJpVixHQUF1QnZRLE1BQWU2SCxHQUM5RTBJLEdBQXVCckosUUFBaUJxSixHQUF1QkUsU0FBZTNJLEdBQzlFeUksR0FBdUJ4VSxZQUFpQnFMLEdBQ3hDbUosR0FBdUJHLGVBQWlCdkosR0FHeENvSixHQUF1Qm53QixLQUFhc3ZCLEdBQ3BDYSxHQUF1Qjd2QixJQUFhNnZCLEdBQXVCdFEsS0FBbUJnSixHQUM5RXNILEdBQXVCaFYsUUFBYTROLEdBQ3BDb0gsR0FBdUJuSyxXQUFhZ0QsR0FDcENtSCxHQUF1QjNVLFVBQWF5TixHQUdwQ2tILEdBQXVCclMsS0FBT3FTLEdBQXVCclEsTUFBUWlRLEdBRzdESSxHQUF1QnpSLE9BQVN5UixHQUF1QnBRLFFBQVVpUSxHQUdqRUcsR0FBdUJ4UixPQUFTd1IsR0FBdUJuUSxRQUFVaVEsR0FHakVFLEdBQXVCdlIsWUFBY3VSLEdBQXVCbFEsYUFBZWlRLEdBRzNFQyxHQUF1QjNQLFVBQXVCZ0IsR0FDOUMyTyxHQUF1QnhrQixJQUF1QnFXLEdBQzlDbU8sR0FBdUIvTyxNQUF1QmEsR0FDOUNrTyxHQUF1QnBHLFVBQXVCNUgsR0FDOUNnTyxHQUF1QjlOLHFCQUF1QkEsR0FDOUM4TixHQUF1QkksTUFBdUJqTyxHQUM5QzZOLEdBQXVCSyxhQUF1QmpPLEdBQzlDNE4sR0FBdUJ4TixRQUF1QkEsR0FDOUN3TixHQUF1QnZOLFlBQXVCQSxHQUM5Q3VOLEdBQXVCdE4sTUFBdUJBLEdBQzlDc04sR0FBdUJoUixNQUF1QjBELEdBRzlDc04sR0FBdUJNLFNBQVc5RyxHQUNsQ3dHLEdBQXVCTyxTQUFXOUcsR0FHbEN1RyxHQUF1QlEsTUFBU3BZLEdBQVUsa0RBQW1EK1csSUFDN0ZhLEdBQXVCaGEsT0FBU29DLEdBQVUsbURBQW9EL0IsR0FDOUYyWixHQUF1QjFRLE1BQVNsSCxHQUFVLGlEQUFrRHVXLElBQzVGcUIsR0FBdUJTLEtBQVNyWSxHQUFVLDRHQUE2R3dKLEdBRXZKLElBQUk4TyxJQUFrQlYsR0FVbEJXLElBQ0FDLFFBQVUsZ0JBQ1ZDLFFBQVUsbUJBQ1ZDLFNBQVcsZUFDWEMsUUFBVSxvQkFDVkMsU0FBVyxzQkFDWEMsU0FBVyxLQVFYQyxJQUNBQyxJQUFPLFlBQ1BDLEdBQU8sU0FDUEMsRUFBTyxhQUNQQyxHQUFPLGVBQ1BDLElBQU8sc0JBQ1BDLEtBQU8sNkJBa0JQQyxHQUFxQixlQU1yQkMsR0FBaUIsS0FDakJDLEdBQXNCLFVBVXRCQyxJQUNBQyxPQUFTLFFBQ1RDLEtBQVMsU0FDVHZkLEVBQUssZ0JBQ0xsSSxFQUFLLFdBQ0wwbEIsR0FBSyxhQUNMalksRUFBSyxVQUNMa1ksR0FBSyxXQUNMblksRUFBSyxRQUNMb1ksR0FBSyxVQUNMbFksRUFBSyxVQUNMbVksR0FBSyxZQUNMdFksRUFBSyxTQUNMdVksR0FBSyxZQThCTEMsR0FBbUIzaUIsRUFBT25GLFNBRTlCOG5CLElBQWlCdEksVUFBa0I2RyxHQUNuQ3lCLEdBQWlCbE8sU0FBa0IyRixHQUNuQ3VJLEdBQWlCckksZ0JBQWtCbUgsR0FDbkNrQixHQUFpQnhlLGVBQWtCQSxHQUNuQ3dlLEdBQWlCbkksYUFBa0J3SCxHQUNuQ1csR0FBaUIxZSxZQUFrQkEsR0FDbkMwZSxHQUFpQmxJLFNBQWtCd0gsR0FDbkNVLEdBQWlCdmYsUUFBa0JBLEdBQ25DdWYsR0FBaUIxSCxjQUFrQmlILEdBQ25DUyxHQUFpQnRULFNBQWtCcUwsR0FDbkNpSSxHQUFpQjdNLFdBQWtCNEUsR0FDbkNpSSxHQUFpQjlILGNBQWtCc0gsR0FDbkNRLEdBQWlCM0YsYUFBa0JyQyxHQUNuQ2dJLEdBQWlCN0gsV0FBa0JBLEdBQ25DNkgsR0FBaUJ0aEIsSUFBa0IwWixHQUduQzRILEdBQWlCcGMsT0FBMkJWLEVBQzVDOGMsR0FBaUI3YyxRQUFvQitZLEdBQ3JDOEQsR0FBaUJuYyxZQUEyQlIsRUFDNUMyYyxHQUFpQjFjLGFBQW9CNlksR0FDckM2RCxHQUFpQmhjLFlBQTJCVCxFQUM1Q3ljLEdBQWlCdGIsYUFBb0IyWCxHQUNyQzJELEdBQWlCeGIsWUFBb0JBLEdBQ3JDd2IsR0FBaUJ6YixrQkFBb0I2WCxHQUNyQzRELEdBQWlCN2IsaUJBQW9CQSxHQUdyQzZiLEdBQWlCclgsS0FBT29NLEdBQ3hCaUwsR0FBaUJsVixNQUFRZ1MsR0FDekJrRCxHQUFpQkMsZUFBaUJoTCxHQUNsQytLLEdBQWlCRSxlQUFpQmxMLEdBR2xDZ0wsR0FBaUI3SixTQUF3QmIsR0FDekMwSyxHQUFpQnpLLFVBQWlCeUgsR0FDbENnRCxHQUFpQjNKLFlBQXdCVixHQUN6Q3FLLEdBQWlCcEssYUFBaUJzSCxHQUNsQzhDLEdBQWlCNUosY0FBd0JYLEdBQ3pDdUssR0FBaUJ0SyxlQUFpQnVILEdBQ2xDK0MsR0FBaUIzSyxjQUF3QlEsR0FHekNtSyxHQUFpQnJVLEtBQU9vTCxHQUN4QmlKLEdBQWlCbEosZUFBaUJ5RyxHQUNsQ3lDLEdBQWlCeFUsU0FBV3lMLEdBZ0Q1QjVZLEVBQW1DLE1BQy9COGhCLGFBQWMsdUJBQ2QxZixRQUFVLFNBQVVyRSxHQUNoQixHQUFJeEQsR0FBSXdELEVBQVMsR0FDYjhFLEVBQXVDLElBQTdCM0UsRUFBTUgsRUFBUyxJQUFNLElBQWEsS0FDckMsSUFBTnhELEVBQVcsS0FDTCxJQUFOQSxFQUFXLEtBQ0wsSUFBTkEsRUFBVyxLQUFPLElBQ3ZCLE9BQU93RCxHQUFTOEUsS0FLeEJ4SixFQUFtQmtsQixLQUFPNVcsR0FBVSx3REFBeUQzSCxHQUM3RjNHLEVBQW1CMG9CLFNBQVdwYSxHQUFVLGdFQUFpRXpILEVBRXpHLElBQUk4YSxJQUFVL3BCLEtBQUs2TixJQW9KZmtqQixHQUFpQnJHLEdBQU8sTUFDeEJrQixHQUFpQmxCLEdBQU8sS0FDeEJzRyxHQUFpQnRHLEdBQU8sS0FDeEJ1RyxHQUFpQnZHLEdBQU8sS0FDeEJ3RyxHQUFpQnhHLEdBQU8sS0FDeEJ5RyxHQUFpQnpHLEdBQU8sS0FDeEIwRyxHQUFpQjFHLEdBQU8sS0FDeEIyRyxHQUFpQjNHLEdBQU8sS0FheEJ0TSxHQUFleU0sR0FBVyxnQkFDMUIxTSxHQUFlME0sR0FBVyxXQUMxQjNNLEdBQWUyTSxHQUFXLFdBQzFCNU0sR0FBZTRNLEdBQVcsU0FDMUI3TSxHQUFlNk0sR0FBVyxRQUMxQnZXLEdBQWV1VyxHQUFXLFVBQzFCak4sR0FBZWlOLEdBQVcsU0FNMUJwTCxHQUFRemYsS0FBS3lmLE1BQ2J5TCxJQUNBclksRUFBRyxHQUNIbEksRUFBRyxHQUNIeU4sRUFBRyxHQUNIRCxFQUFHLEdBQ0hFLEVBQUcsSUF5REhtVCxHQUFrQnhyQixLQUFLNk4sSUFvRHZCeWpCLEdBQTRCNVQsR0FBUzlVLFNBRXpDMG9CLElBQTBCempCLElBQWlCaWMsR0FDM0N3SCxHQUEwQm5VLElBQWlCOE0sR0FDM0NxSCxHQUEwQmpSLFNBQWlCNkosR0FDM0NvSCxHQUEwQjlHLEdBQWlCQSxHQUMzQzhHLEdBQTBCUCxlQUFpQkEsR0FDM0NPLEdBQTBCMUYsVUFBaUJBLEdBQzNDMEYsR0FBMEJOLFVBQWlCQSxHQUMzQ00sR0FBMEJMLFFBQWlCQSxHQUMzQ0ssR0FBMEJKLE9BQWlCQSxHQUMzQ0ksR0FBMEJILFFBQWlCQSxHQUMzQ0csR0FBMEJGLFNBQWlCQSxHQUMzQ0UsR0FBMEJELFFBQWlCQSxHQUMzQ0MsR0FBMEI5bkIsUUFBaUJpaEIsR0FDM0M2RyxHQUEwQjlTLFFBQWlCNEwsR0FDM0NrSCxHQUEwQi9DLElBQWlCM0QsR0FDM0MwRyxHQUEwQmxULGFBQWlCQSxHQUMzQ2tULEdBQTBCblQsUUFBaUJBLEdBQzNDbVQsR0FBMEJwVCxRQUFpQkEsR0FDM0NvVCxHQUEwQnJULE1BQWlCQSxHQUMzQ3FULEdBQTBCdFQsS0FBaUJBLEdBQzNDc1QsR0FBMEJ2VCxNQUFpQkEsR0FDM0N1VCxHQUEwQmhkLE9BQWlCQSxHQUMzQ2dkLEdBQTBCMVQsTUFBaUJBLEdBQzNDMFQsR0FBMEJ2TixTQUFpQkEsR0FDM0N1TixHQUEwQmp4QixZQUFpQmtyQixHQUMzQytGLEdBQTBCcHhCLFNBQWlCcXJCLEdBQzNDK0YsR0FBMEIvTSxPQUFpQmdILEdBQzNDK0YsR0FBMEIzbkIsT0FBaUJBLEdBQzNDMm5CLEdBQTBCaGdCLFdBQWlCQSxHQUczQ2dnQixHQUEwQkMsWUFBYzdhLEdBQVUsc0ZBQXVGNlUsSUFDekkrRixHQUEwQmhFLEtBQU9BLEdBTWpDcmMsRUFBZSxJQUFLLEVBQUcsRUFBRyxRQUMxQkEsRUFBZSxJQUFLLEVBQUcsRUFBRyxXQUkxQm9CLEVBQWMsSUFBS29hLElBQ25CcGEsRUFBYyxJQUFLcWEsSUFDbkJ0WixFQUFjLElBQUssU0FBVTFLLEVBQU9nSixFQUFPbEYsR0FDdkNBLEVBQU92QixHQUFLLEdBQUk3TSxNQUE2QixJQUF4Qm9qQixXQUFXOVksRUFBTyxPQUUzQzBLLEVBQWMsSUFBSyxTQUFVMUssRUFBT2dKLEVBQU9sRixHQUN2Q0EsRUFBT3ZCLEdBQUssR0FBSTdNLE1BQUs2TyxFQUFNdkUsTUFNL0JOLEVBQW1Cb3BCLFFBQVUsU0FFN0JocEIsRUFBZ0IrUyxJQUVoQm5ULEVBQW1CYSxHQUF3QitsQixHQUMzQzVtQixFQUFtQnVGLElBQXdCQSxHQUMzQ3ZGLEVBQW1CNEksSUFBd0JBLEdBQzNDNUksRUFBbUJnUyxJQUF3QkEsR0FDM0NoUyxFQUFtQjBCLElBQXdCTCxFQUMzQ3JCLEVBQW1CaWMsS0FBd0IyRCxHQUMzQzVmLEVBQW1Ca00sT0FBd0JtVixHQUMzQ3JoQixFQUFtQlUsT0FBd0JBLEVBQzNDVixFQUFtQnVCLE9BQXdCb0YsRUFDM0MzRyxFQUFtQnFwQixRQUF3Qm5tQixFQUMzQ2xELEVBQW1CdVYsU0FBd0JzQyxHQUMzQzdYLEVBQW1CdUUsU0FBd0JBLEVBQzNDdkUsRUFBbUJ5ZSxTQUF3QjhDLEdBQzNDdmhCLEVBQW1COGYsVUFBd0JELEdBQzNDN2YsRUFBbUJrSixXQUF3QnJDLEVBQzNDN0csRUFBbUJxVyxXQUF3QkEsR0FDM0NyVyxFQUFtQm1NLFlBQXdCbVYsR0FDM0N0aEIsRUFBbUIyZSxZQUF3QjhDLEdBQzNDemhCLEVBQW1COEcsYUFBd0JBLEVBQzNDOUcsRUFBbUIwZSxjQUF3QjhDLEdBQzNDeGhCLEVBQW1Cc0gsZUFBd0JBLEVBQzNDdEgsRUFBbUJzcEIsc0JBQXdCdkcsR0FDM0MvaUIsRUFBbUJRLFVBQXdCb21CLEVBRTNDLElBQUkyQyxJQUFVdnBCLENBRWQsT0FBT3VwQixNQUlZLG1CQUFaQyxVQUNUQSxRQUFRNXBCLE9BQU8sb0NBQ1o2cEIsU0FBUyxpQkFBa0Isd0JBQzNCQSxTQUFTLGdCQUFpQixRQUcvQixJQUFJcmxCLFdBSUFyUCxXQUFhQSxjQUNqQkEsWUFBVzIwQixZQUVYMzBCLFdBQVcyMEIsU0FBVyxTQUFXQyxHQUMvQixZQWNBLFNBQVNDLEtBR1AsR0FBSUMsS0FFQS9yQixRQUFTLGdCQUNUQyxZQUFlK3JCLEVBQWtCQyxXQUlyQ2gxQixZQUFXQyxPQUFPa0gsVUFBVXVCLFVBQVVvc0IsR0FFdENHLEVBQVdGLEVBQTBCLFNBQUlBLEVBQWtCOWEsV0FBYSxHQUN4RWdiLEdBQVlGLEVBQWtCRyxVQUFZSCxFQUFrQkksU0FBVyxJQUFNLEdBQzdFRixHQUFZRixFQUEwQixTQUFJQSxFQUFrQi9hLFdBQWEsR0FHekVvYixFQUF3Qmh0QixTQUFTQyxjQUFjLE9BQy9DK3NCLEVBQXNCL3RCLFVBQVksZ0JBRWxDZSxTQUFTaXRCLGVBQWUsYUFBYTlzQixZQUFZNnNCLEdBRWpERSxJQU1GLFFBQVNBLEtBQ1BWLEVBQVFXLElBQUk3cEIsS0FBSyxHQUFJLGdCQUFpQixLQUFNOHBCLEVBQU9DLFVBQVUsT0FDM0QsR0FBTSxHQUFNLEdBQU0sR0FBTSxHQU81QixRQUFTQyxHQUFvQkMsR0FDM0JaLEVBQW9CcnlCLEtBQUtDLE1BQU1ELEtBQUtFLFVBQVUreUIsSUFFOUNaLEVBQWtCYSxNQUFRSixFQUFPSyxPQUFPLE9BQ3hDZCxFQUFrQmUsT0FBU04sRUFBT0ssT0FBTyxPQUV6Q3p0QixTQUFTaXRCLGVBQWUsYUFBYWx0QixNQUFNeXRCLE1BQVFiLEVBQWtCYSxNQUFRLEtBQzdFeHRCLFNBQVNpdEIsZUFBZSxhQUFhbHRCLE1BQU0ydEIsT0FBU2YsRUFBa0JlLE9BQVMsS0FFL0VDLEVBQVcsR0FBSS8xQixZQUFXQyxPQUFPKzFCLFFBQVE1dEIsU0FBU2l0QixlQUFlLGFBQy9EanRCLFNBQVNpdEIsZUFBZSxxQkFFMUJSLElBR0YsUUFBU29CLEtBRVAsR0FBSWhCLEVBQVMsQ0FDWCxHQUFJaFksR0FBTSxHQUFJaGMsS0FFZG0wQixHQUFzQmMsVUFBWWxyQixPQUFPaVMsR0FBSzFRLE9BQU8wb0IsR0FFckRrQixFQUFhaHhCLFdBQVcsV0FDdEI4d0IsS0FDQyxNQUlQLFFBQVNHLEtBQ1BDLGFBQWFGLEdBR2YsUUFBU0csS0FFRkMsSUFDSHB6QixHQUFXNUMsTUFBUyxnQkFBaUJpMkIsY0FBaUI5ekIsS0FBS0UsVUFBVW15QixLQUNyRXdCLEdBQXVCLEdBR3pCTixJQUVBOXlCLEdBQVc1QyxNQUFTLE9BQVFpMkIsY0FBaUJ2QixJQUcvQyxRQUFTd0IsS0FDUEwsSUFHRixRQUFTTSxLQUNQLE1BQU8sbUJBR1QsUUFBU3Z6QixHQUFTL0MsR0FDaEJKLFdBQVdDLE9BQU9DLFlBQVlpRCxTQUFTdXpCLElBQWdCdDJCLEdBdEd6RCxHQUlJKzFCLEdBQ0FmLEVBQ0FILEVBTkFPLEVBQVMsR0FBSVosR0FBUStCLE1BQ3ZCNUIsRUFBb0IsS0FFbEJnQixFQUFXLEtBSVhRLEdBQXVCLENBa0czQixRQUNFSCxNQUFTQSxFQUNURSxLQUFRQSxFQUNSWixvQkFBdUJBLEVBQ3ZCZSxLQUFRQSxFQUNSdHpCLFNBQVlBLEVBQ1p1ekIsYUFBZ0JBLElBRWpCOUIsUUFFSCxJQUFJNTBCLFlBQWFBLGNBQ2pCQSxZQUFXQyxPQUFTRCxXQUFXQyxXQUUvQkQsV0FBV0MsT0FBTysxQixRQUFVLFNBQVVZLEVBQWVDLEdBQ25ELFlBSUEsU0FBU2hDLEtBQ1AsSUFDRWdDLEVBQWlCMXVCLE1BQU0ydEIsT0FBU2MsRUFBY3p1QixNQUFNMnRCLE9BQ3BELE1BQU81dkIsR0FDUEYsUUFBUW9ULEtBQUssOEJBQStCbFQsRUFBRTR3QixVQU9sRCxRQUFTQyxLQUNQLEdBQUlDLEVBQVMsQ0FFWCxLQUFPSCxFQUFpQkksWUFDdEJKLEVBQWlCSyxZQUFZTCxFQUFpQkksV0FJaERKLEdBQWlCMXVCLE1BQU0xRSxRQUFVLE9BR2pDbXpCLEVBQWN6dUIsTUFBTWd2QixXQUFhLFVBRWpDSCxHQUFVLEdBSWQsUUFBU0ksR0FBS04sR0FDWixHQUNFTyxHQURFQyxFQUFXbHZCLFNBQVNtdkIsd0JBR25CUCxJQWlCSEssRUFBSVIsRUFBaUJXLGNBQWMsWUFDbkNILEVBQUVuQixVQUFZWSxJQWhCZEYsRUFBY3p1QixNQUFNZ3ZCLFdBQWEsU0FFakNOLEVBQWlCMXVCLE1BQU0xRSxRQUFVLFFBR2pDNHpCLEVBQUlqdkIsU0FBU0MsY0FBYyxLQUMzQmd2QixFQUFFbkIsVUFBWVksRUFDZE8sRUFBRTV0QixhQUFhLFFBQVMsV0FFeEI2dEIsRUFBUy91QixZQUFZOHVCLEdBQ3JCUixFQUFpQnR1QixZQUFZK3VCLEdBRTdCTixHQUFVLEdBaERkLEdBQUlBLElBQVUsQ0EwRGQsT0FGQW5DLE1BR0VrQyxLQUFRQSxFQUNSSyxLQUFRQSxJQUtaLFNBQVdodEIsRUFBUWhDLEVBQVV3c0IsR0FDM0IsWUFZQSxTQUFTNkMsR0FBVXptQixFQUFPYSxHQUN4QixHQUFJOGpCLEdBQ0EvMEIsRUFBWSxHQUNaRSxFQUFZLEVBRVoyWSxPQUFNbk8sUUFBUTBGLElBQVVBLEVBQU1qUCxPQUFTLEdBQUswWCxNQUFNbk8sUUFBUXVHLElBQVdBLEVBQU85UCxPQUFTLElBRXRFLGNBQWJpUCxFQUFNLEtBQ1JwUSxFQUFZaVIsRUFBTyxJQUlKLGNBQWJiLEVBQU0sS0FFTmxRLEVBREUrUSxFQUFPLEdBQ0dBLEVBQU8sR0FHUCxXQUtoQjdSLFdBQVdDLE9BQU9DLFlBQVlxRCxPQUFPM0MsRUFBV0UsR0FHL0IscUJBQWJrUSxFQUFNLEtBQ1Iya0IsRUFBbUJqekIsS0FBS0MsTUFBTWtQLEVBQU8sSUFFckM3UixXQUFXMjBCLFNBQVNlLG9CQUFvQkMsS0FLOUMsUUFBU1MsS0FDUHAyQixXQUFXMjBCLFNBQVN5QixRQUd0QixRQUFTRSxLQUNQdDJCLFdBQVcyMEIsU0FBUzJCLE9BR3RCLFFBQVNHLEtBQ1B6MkIsV0FBVzIwQixTQUFTOEIsT0FwRHRCLEdBQUlpQixJQUFLLEdBQUk5QyxHQUFRK0IsT0FBUWxCLFVBQVUsS0FFdkNyckIsR0FBT3V0QixjQUFnQixXQUNyQixPQUFPLEdBR1R2dkIsRUFBU3d2QixLQUFLQyxZQUFjLFdBQzFCLE9BQU8sR0FnRExILEdBQWEsS0FBUEEsSUFDUjlDLEVBQVFXLElBQUl1QyxTQUFTLGNBQWdCSixFQUFJcEIsR0FDekMxQixFQUFRVyxJQUFJdUMsU0FBUyxlQUFpQkosRUFBSXRCLEdBQzFDeEIsRUFBUVcsSUFBSXVDLFNBQVMsY0FBZ0JKLEVBQUlqQixHQUN6QzdCLEVBQVFXLElBQUl1QyxTQUFTLGVBQWlCSixFQUFJRCxHQUMxQzdDLEVBQVFXLElBQUk3cEIsS0FBSyxHQUFJLGNBQWUsS0FBTWdzQixHQUFLLFlBQWEsWUFBYSx1QkFHMUV0dEIsT0FBUWhDLFNBQVV3c0IiLCJmaWxlIjoianMvd2lkZ2V0Lm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBXSURHRVRfQ09NTU9OX0NPTkZJRyA9IHtcbiAgQVVUSF9QQVRIX1VSTDogXCJ2MS93aWRnZXQvYXV0aFwiLFxuICBMT0dHRVJfQ0xJRU5UX0lEOiBcIjEwODg1MjcxNDcxMDktNnExbzJ2dGlobjM0MjkycGp0NGNraG1oY2swcmswbzcuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb21cIixcbiAgTE9HR0VSX0NMSUVOVF9TRUNSRVQ6IFwibmxaeXJjUExnNm9Fd085ZjlXZm4yOVdoXCIsXG4gIExPR0dFUl9SRUZSRVNIX1RPS0VOOiBcIjEveHp0NGt3ekUxSDdXOVZuS0I4Y0FhQ3g2emI0RXM0bktFb3FhWUhkVEQxNUlnT3JKRHRkdW42eks2WGlBVENLVFwiLFxuICBTVE9SQUdFX0VOVjogXCJwcm9kXCIsXG4gIFNUT1JFX1VSTDogXCJodHRwczovL3N0b3JlLWRvdC1ydmFzZXJ2ZXIyLmFwcHNwb3QuY29tL1wiXG59O1xuLyogZ2xvYmFsIGdhZGdldHMgKi9cblxudmFyIFJpc2VWaXNpb24gPSBSaXNlVmlzaW9uIHx8IHt9O1xuUmlzZVZpc2lvbi5Db21tb24gPSBSaXNlVmlzaW9uLkNvbW1vbiB8fCB7fTtcblxuUmlzZVZpc2lvbi5Db21tb24uTG9nZ2VyVXRpbHMgPSAoZnVuY3Rpb24oKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gICB2YXIgZGlzcGxheUlkID0gXCJcIixcbiAgICBjb21wYW55SWQgPSBcIlwiO1xuXG4gIC8qXG4gICAqICBQcml2YXRlIE1ldGhvZHNcbiAgICovXG5cbiAgLyogUmV0cmlldmUgcGFyYW1ldGVycyB0byBwYXNzIHRvIHRoZSBldmVudCBsb2dnZXIuICovXG4gIGZ1bmN0aW9uIGdldEV2ZW50UGFyYW1zKHBhcmFtcywgY2IpIHtcbiAgICB2YXIganNvbiA9IG51bGw7XG5cbiAgICAvLyBldmVudCBpcyByZXF1aXJlZC5cbiAgICBpZiAocGFyYW1zLmV2ZW50KSB7XG4gICAgICBqc29uID0gcGFyYW1zO1xuXG4gICAgICBpZiAoanNvbi5maWxlX3VybCkge1xuICAgICAgICBqc29uLmZpbGVfZm9ybWF0ID0gZ2V0RmlsZUZvcm1hdChqc29uLmZpbGVfdXJsKTtcbiAgICAgIH1cblxuICAgICAganNvbi5jb21wYW55X2lkID0gY29tcGFueUlkO1xuICAgICAganNvbi5kaXNwbGF5X2lkID0gZGlzcGxheUlkO1xuXG4gICAgICBjYihqc29uKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBjYihqc29uKTtcbiAgICB9XG4gIH1cblxuICAvLyBHZXQgc3VmZml4IGZvciBCUSB0YWJsZSBuYW1lLlxuICBmdW5jdGlvbiBnZXRTdWZmaXgoKSB7XG4gICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSgpLFxuICAgICAgeWVhciA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKSxcbiAgICAgIG1vbnRoID0gZGF0ZS5nZXRVVENNb250aCgpICsgMSxcbiAgICAgIGRheSA9IGRhdGUuZ2V0VVRDRGF0ZSgpO1xuXG4gICAgaWYgKG1vbnRoIDwgMTApIHtcbiAgICAgIG1vbnRoID0gXCIwXCIgKyBtb250aDtcbiAgICB9XG5cbiAgICBpZiAoZGF5IDwgMTApIHtcbiAgICAgIGRheSA9IFwiMFwiICsgZGF5O1xuICAgIH1cblxuICAgIHJldHVybiB5ZWFyICsgbW9udGggKyBkYXk7XG4gIH1cblxuICAvKlxuICAgKiAgUHVibGljIE1ldGhvZHNcbiAgICovXG4gIGZ1bmN0aW9uIGdldEZpbGVGb3JtYXQodXJsKSB7XG4gICAgdmFyIGhhc1BhcmFtcyA9IC9bPyMmXS8sXG4gICAgICBzdHI7XG5cbiAgICBpZiAoIXVybCB8fCB0eXBlb2YgdXJsICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBzdHIgPSB1cmwuc3Vic3RyKHVybC5sYXN0SW5kZXhPZihcIi5cIikgKyAxKTtcblxuICAgIC8vIGRvbid0IGluY2x1ZGUgYW55IHBhcmFtcyBhZnRlciB0aGUgZmlsZW5hbWVcbiAgICBpZiAoaGFzUGFyYW1zLnRlc3Qoc3RyKSkge1xuICAgICAgc3RyID0gc3RyLnN1YnN0cigwICwoc3RyLmluZGV4T2YoXCI/XCIpICE9PSAtMSkgPyBzdHIuaW5kZXhPZihcIj9cIikgOiBzdHIubGVuZ3RoKTtcblxuICAgICAgc3RyID0gc3RyLnN1YnN0cigwLCAoc3RyLmluZGV4T2YoXCIjXCIpICE9PSAtMSkgPyBzdHIuaW5kZXhPZihcIiNcIikgOiBzdHIubGVuZ3RoKTtcblxuICAgICAgc3RyID0gc3RyLnN1YnN0cigwLCAoc3RyLmluZGV4T2YoXCImXCIpICE9PSAtMSkgPyBzdHIuaW5kZXhPZihcIiZcIikgOiBzdHIubGVuZ3RoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3RyLnRvTG93ZXJDYXNlKCk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRJbnNlcnREYXRhKHBhcmFtcykge1xuICAgIHZhciBCQVNFX0lOU0VSVF9TQ0hFTUEgPSB7XG4gICAgICBcImtpbmRcIjogXCJiaWdxdWVyeSN0YWJsZURhdGFJbnNlcnRBbGxSZXF1ZXN0XCIsXG4gICAgICBcInNraXBJbnZhbGlkUm93c1wiOiBmYWxzZSxcbiAgICAgIFwiaWdub3JlVW5rbm93blZhbHVlc1wiOiBmYWxzZSxcbiAgICAgIFwidGVtcGxhdGVTdWZmaXhcIjogZ2V0U3VmZml4KCksXG4gICAgICBcInJvd3NcIjogW3tcbiAgICAgICAgXCJpbnNlcnRJZFwiOiBcIlwiXG4gICAgICB9XVxuICAgIH0sXG4gICAgZGF0YSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoQkFTRV9JTlNFUlRfU0NIRU1BKSk7XG5cbiAgICBkYXRhLnJvd3NbMF0uaW5zZXJ0SWQgPSBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMikudG9VcHBlckNhc2UoKTtcbiAgICBkYXRhLnJvd3NbMF0uanNvbiA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkocGFyYW1zKSk7XG4gICAgZGF0YS5yb3dzWzBdLmpzb24udHMgPSBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCk7XG5cbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxvZ0V2ZW50KHRhYmxlLCBwYXJhbXMpIHtcbiAgICBnZXRFdmVudFBhcmFtcyhwYXJhbXMsIGZ1bmN0aW9uKGpzb24pIHtcbiAgICAgIGlmIChqc29uICE9PSBudWxsKSB7XG4gICAgICAgIFJpc2VWaXNpb24uQ29tbW9uLkxvZ2dlci5sb2codGFibGUsIGpzb24pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyogU2V0IHRoZSBDb21wYW55IGFuZCBEaXNwbGF5IElEcy4gKi9cbiAgZnVuY3Rpb24gc2V0SWRzKGNvbXBhbnksIGRpc3BsYXkpIHtcbiAgICBjb21wYW55SWQgPSBjb21wYW55O1xuICAgIGRpc3BsYXlJZCA9IGRpc3BsYXk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIFwiZ2V0SW5zZXJ0RGF0YVwiOiBnZXRJbnNlcnREYXRhLFxuICAgIFwiZ2V0RmlsZUZvcm1hdFwiOiBnZXRGaWxlRm9ybWF0LFxuICAgIFwibG9nRXZlbnRcIjogbG9nRXZlbnQsXG4gICAgXCJzZXRJZHNcIjogc2V0SWRzXG4gIH07XG59KSgpO1xuXG5SaXNlVmlzaW9uLkNvbW1vbi5Mb2dnZXIgPSAoZnVuY3Rpb24odXRpbHMpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIFJFRlJFU0hfVVJMID0gXCJodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9vYXV0aDIvdjMvdG9rZW4/Y2xpZW50X2lkPVwiICsgV0lER0VUX0NPTU1PTl9DT05GSUcuTE9HR0VSX0NMSUVOVF9JRCArXG4gICAgICBcIiZjbGllbnRfc2VjcmV0PVwiICsgV0lER0VUX0NPTU1PTl9DT05GSUcuTE9HR0VSX0NMSUVOVF9TRUNSRVQgK1xuICAgICAgXCImcmVmcmVzaF90b2tlbj1cIiArIFdJREdFVF9DT01NT05fQ09ORklHLkxPR0dFUl9SRUZSRVNIX1RPS0VOICtcbiAgICAgIFwiJmdyYW50X3R5cGU9cmVmcmVzaF90b2tlblwiO1xuXG4gIHZhciBzZXJ2aWNlVXJsID0gXCJodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9iaWdxdWVyeS92Mi9wcm9qZWN0cy9jbGllbnQtc2lkZS1ldmVudHMvZGF0YXNldHMvV2lkZ2V0X0V2ZW50cy90YWJsZXMvVEFCTEVfSUQvaW5zZXJ0QWxsXCIsXG4gICAgdGhyb3R0bGUgPSBmYWxzZSxcbiAgICB0aHJvdHRsZURlbGF5ID0gMTAwMCxcbiAgICBsYXN0RXZlbnQgPSBcIlwiLFxuICAgIHJlZnJlc2hEYXRlID0gMCxcbiAgICB0b2tlbiA9IFwiXCI7XG5cbiAgLypcbiAgICogIFByaXZhdGUgTWV0aG9kc1xuICAgKi9cbiAgZnVuY3Rpb24gcmVmcmVzaFRva2VuKGNiKSB7XG4gICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gICAgaWYgKG5ldyBEYXRlKCkgLSByZWZyZXNoRGF0ZSA8IDM1ODAwMDApIHtcbiAgICAgIHJldHVybiBjYih7fSk7XG4gICAgfVxuXG4gICAgeGhyLm9wZW4oXCJQT1NUXCIsIFJFRlJFU0hfVVJMLCB0cnVlKTtcbiAgICB4aHIub25sb2FkZW5kID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgcmVzcCA9IEpTT04ucGFyc2UoeGhyLnJlc3BvbnNlKTtcblxuICAgICAgY2IoeyB0b2tlbjogcmVzcC5hY2Nlc3NfdG9rZW4sIHJlZnJlc2hlZEF0OiBuZXcgRGF0ZSgpIH0pO1xuICAgIH07XG5cbiAgICB4aHIuc2VuZCgpO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNUaHJvdHRsZWQoZXZlbnQpIHtcbiAgICByZXR1cm4gdGhyb3R0bGUgJiYgKGxhc3RFdmVudCA9PT0gZXZlbnQpO1xuICB9XG5cbiAgLypcbiAgICogIFB1YmxpYyBNZXRob2RzXG4gICAqL1xuICBmdW5jdGlvbiBsb2codGFibGVOYW1lLCBwYXJhbXMpIHtcbiAgICBpZiAoIXRhYmxlTmFtZSB8fCAhcGFyYW1zIHx8IChwYXJhbXMuaGFzT3duUHJvcGVydHkoXCJldmVudFwiKSAmJiAhcGFyYW1zLmV2ZW50KSB8fFxuICAgICAgKHBhcmFtcy5oYXNPd25Qcm9wZXJ0eShcImV2ZW50XCIpICYmIGlzVGhyb3R0bGVkKHBhcmFtcy5ldmVudCkpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhyb3R0bGUgPSB0cnVlO1xuICAgIGxhc3RFdmVudCA9IHBhcmFtcy5ldmVudDtcblxuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgdGhyb3R0bGUgPSBmYWxzZTtcbiAgICB9LCB0aHJvdHRsZURlbGF5KTtcblxuICAgIGZ1bmN0aW9uIGluc2VydFdpdGhUb2tlbihyZWZyZXNoRGF0YSkge1xuICAgICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpLFxuICAgICAgICBpbnNlcnREYXRhLCB1cmw7XG5cbiAgICAgIHVybCA9IHNlcnZpY2VVcmwucmVwbGFjZShcIlRBQkxFX0lEXCIsIHRhYmxlTmFtZSk7XG4gICAgICByZWZyZXNoRGF0ZSA9IHJlZnJlc2hEYXRhLnJlZnJlc2hlZEF0IHx8IHJlZnJlc2hEYXRlO1xuICAgICAgdG9rZW4gPSByZWZyZXNoRGF0YS50b2tlbiB8fCB0b2tlbjtcbiAgICAgIGluc2VydERhdGEgPSB1dGlscy5nZXRJbnNlcnREYXRhKHBhcmFtcyk7XG5cbiAgICAgIC8vIEluc2VydCB0aGUgZGF0YS5cbiAgICAgIHhoci5vcGVuKFwiUE9TVFwiLCB1cmwsIHRydWUpO1xuICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoXCJDb250ZW50LVR5cGVcIiwgXCJhcHBsaWNhdGlvbi9qc29uXCIpO1xuICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoXCJBdXRob3JpemF0aW9uXCIsIFwiQmVhcmVyIFwiICsgdG9rZW4pO1xuXG4gICAgICBpZiAocGFyYW1zLmNiICYmIHR5cGVvZiBwYXJhbXMuY2IgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICB4aHIub25sb2FkZW5kID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcGFyYW1zLmNiKHhoci5yZXNwb25zZSk7XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHhoci5zZW5kKEpTT04uc3RyaW5naWZ5KGluc2VydERhdGEpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVmcmVzaFRva2VuKGluc2VydFdpdGhUb2tlbik7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIFwibG9nXCI6IGxvZ1xuICB9O1xufSkoUmlzZVZpc2lvbi5Db21tb24uTG9nZ2VyVXRpbHMpO1xudmFyIFJpc2VWaXNpb24gPSBSaXNlVmlzaW9uIHx8IHt9O1xuUmlzZVZpc2lvbi5Db21tb24gPSBSaXNlVmlzaW9uLkNvbW1vbiB8fCB7fTtcblxuUmlzZVZpc2lvbi5Db21tb24uUmlzZUNhY2hlID0gKGZ1bmN0aW9uICgpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIEJBU0VfQ0FDSEVfVVJMID0gXCJodHRwOi8vbG9jYWxob3N0Ojk0OTQvXCI7XG5cbiAgdmFyIF9waW5nUmVjZWl2ZWQgPSBmYWxzZSxcbiAgICBfaXNDYWNoZVJ1bm5pbmcgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBwaW5nKGNhbGxiYWNrKSB7XG4gICAgdmFyIHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICAgIGlmICghY2FsbGJhY2sgfHwgdHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICByLm9wZW4oXCJHRVRcIiwgQkFTRV9DQUNIRV9VUkwgKyBcInBpbmc/Y2FsbGJhY2s9X1wiLCB0cnVlKTtcbiAgICByLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChyLnJlYWR5U3RhdGUgPT09IDQgKSB7XG4gICAgICAgICAgLy8gc2F2ZSB0aGlzIHJlc3VsdCBmb3IgdXNlIGluIGdldEZpbGUoKVxuICAgICAgICAgIF9waW5nUmVjZWl2ZWQgPSB0cnVlO1xuXG4gICAgICAgICAgaWYoci5zdGF0dXMgPT09IDIwMCl7XG4gICAgICAgICAgICBfaXNDYWNoZVJ1bm5pbmcgPSB0cnVlO1xuXG4gICAgICAgICAgICBjYWxsYmFjayh0cnVlLCByLnJlc3BvbnNlVGV4dCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZGVidWcoXCJSaXNlIENhY2hlIGlzIG5vdCBydW5uaW5nXCIpO1xuICAgICAgICAgICAgX2lzQ2FjaGVSdW5uaW5nID0gZmFsc2U7XG5cbiAgICAgICAgICAgIGNhbGxiYWNrKGZhbHNlLCBudWxsKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnNvbGUuZGVidWcoXCJDYXVnaHQgZXhjZXB0aW9uOiBcIiwgZS5kZXNjcmlwdGlvbik7XG4gICAgICB9XG5cbiAgICB9O1xuICAgIHIuc2VuZCgpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0RmlsZShmaWxlVXJsLCBjYWxsYmFjaywgbm9jYWNoZWJ1c3Rlcikge1xuICAgIGlmICghZmlsZVVybCB8fCAhY2FsbGJhY2sgfHwgdHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmaWxlUmVxdWVzdChpc0NhY2hlUnVubmluZykge1xuICAgICAgdmFyIHVybCwgc3RyLCBzZXBhcmF0b3I7XG5cbiAgICAgIGlmIChpc0NhY2hlUnVubmluZykge1xuICAgICAgICAvLyBjb25maWd1cmUgdXJsIHdpdGggY2FjaGVidXN0ZXIgb3Igbm90XG4gICAgICAgIHVybCA9IChub2NhY2hlYnVzdGVyKSA/IEJBU0VfQ0FDSEVfVVJMICsgXCI/dXJsPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KGZpbGVVcmwpIDpcbiAgICAgICAgQkFTRV9DQUNIRV9VUkwgKyBcImNiPVwiICsgbmV3IERhdGUoKS5nZXRUaW1lKCkgKyBcIj91cmw9XCIgKyBlbmNvZGVVUklDb21wb25lbnQoZmlsZVVybCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAobm9jYWNoZWJ1c3Rlcikge1xuICAgICAgICAgIHVybCA9IGZpbGVVcmw7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3RyID0gZmlsZVVybC5zcGxpdChcIj9cIik7XG4gICAgICAgICAgc2VwYXJhdG9yID0gKHN0ci5sZW5ndGggPT09IDEpID8gXCI/XCIgOiBcIiZcIjtcbiAgICAgICAgICB1cmwgPSBmaWxlVXJsICsgc2VwYXJhdG9yICsgXCJjYj1cIiArIG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIG1ha2VSZXF1ZXN0KFwiSEVBRFwiLCB1cmwpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1ha2VSZXF1ZXN0KG1ldGhvZCwgdXJsKSB7XG4gICAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCksXG4gICAgICAgIHJlcXVlc3QgPSB7XG4gICAgICAgICAgeGhyOiB4aHIsXG4gICAgICAgICAgdXJsOiB1cmxcbiAgICAgICAgfTtcblxuICAgICAgeGhyLm9wZW4obWV0aG9kLCB1cmwsIHRydWUpO1xuXG4gICAgICB4aHIuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRlbmRcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc3RhdHVzID0geGhyLnN0YXR1cyB8fCAwO1xuXG4gICAgICAgIGlmIChzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMCkge1xuICAgICAgICAgIGNhbGxiYWNrKHJlcXVlc3QpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIFNlcnZlciBtYXkgbm90IHN1cHBvcnQgSEVBRCByZXF1ZXN0LiBGYWxsYmFjayB0byBhIEdFVCByZXF1ZXN0LlxuICAgICAgICAgIGlmIChtZXRob2QgPT09IFwiSEVBRFwiKSB7XG4gICAgICAgICAgICBtYWtlUmVxdWVzdChcIkdFVFwiLCB1cmwpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoX2lzQ2FjaGVSdW5uaW5nKSB7XG4gICAgICAgICAgICAgIGNhbGxiYWNrKHJlcXVlc3QsIG5ldyBFcnJvcihcIlRoZSByZXF1ZXN0IGZhaWxlZCB3aXRoIHN0YXR1cyBjb2RlOiBcIiArIHN0YXR1cykpO1xuICAgICAgICAgICAgfSBlbHNle1xuICAgICAgICAgICAgICAvLyBUaGlzIGlzIHRvIGF2b2lkIHRocm93aW5nIGFuIGVycm9yIHdoZW4gdGhlcmUgaXMgYSBjcm9zcyBkb21haW4gaXNzdWVcbiAgICAgICAgICAgICAgY2FsbGJhY2socmVxdWVzdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgeGhyLnNlbmQoKTtcbiAgICB9XG5cbiAgICBpZiAoIV9waW5nUmVjZWl2ZWQpIHtcbiAgICAgIC8qIGpzaGludCB2YWxpZHRoaXM6IHRydWUgKi9cbiAgICAgIHJldHVybiB0aGlzLnBpbmcoZmlsZVJlcXVlc3QpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmlsZVJlcXVlc3QoX2lzQ2FjaGVSdW5uaW5nKTtcbiAgICB9XG5cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZ2V0RmlsZTogZ2V0RmlsZSxcbiAgICBwaW5nOiBwaW5nXG4gIH07XG5cbn0pKCk7XG5cbnZhciBSaXNlVmlzaW9uID0gUmlzZVZpc2lvbiB8fCB7fTtcblxuUmlzZVZpc2lvbi5Db21tb24gPSBSaXNlVmlzaW9uLkNvbW1vbiB8fCB7fTtcblxuUmlzZVZpc2lvbi5Db21tb24uVXRpbGl0aWVzID0gKGZ1bmN0aW9uKCkge1xuXG4gIGZ1bmN0aW9uIGdldEZvbnRDc3NTdHlsZShjbGFzc05hbWUsIGZvbnRPYmopIHtcbiAgICB2YXIgZmFtaWx5ID0gXCJmb250LWZhbWlseTpcIiArIGZvbnRPYmouZm9udC5mYW1pbHkgKyBcIjsgXCI7XG4gICAgdmFyIGNvbG9yID0gXCJjb2xvcjogXCIgKyBmb250T2JqLmNvbG9yICsgXCI7IFwiO1xuICAgIHZhciBzaXplID0gXCJmb250LXNpemU6IFwiICsgZm9udE9iai5zaXplICsgXCJweDsgXCI7XG4gICAgdmFyIHdlaWdodCA9IFwiZm9udC13ZWlnaHQ6IFwiICsgKGZvbnRPYmouYm9sZCA/IFwiYm9sZFwiIDogXCJub3JtYWxcIikgKyBcIjsgXCI7XG4gICAgdmFyIGl0YWxpYyA9IFwiZm9udC1zdHlsZTogXCIgKyAoZm9udE9iai5pdGFsaWMgPyBcIml0YWxpY1wiIDogXCJub3JtYWxcIikgKyBcIjsgXCI7XG4gICAgdmFyIHVuZGVybGluZSA9IFwidGV4dC1kZWNvcmF0aW9uOiBcIiArIChmb250T2JqLnVuZGVybGluZSA/IFwidW5kZXJsaW5lXCIgOiBcIm5vbmVcIikgKyBcIjsgXCI7XG4gICAgdmFyIGhpZ2hsaWdodCA9IFwiYmFja2dyb3VuZC1jb2xvcjogXCIgKyBmb250T2JqLmhpZ2hsaWdodENvbG9yICsgXCI7IFwiO1xuXG4gICAgcmV0dXJuIFwiLlwiICsgY2xhc3NOYW1lICsgXCIge1wiICsgZmFtaWx5ICsgY29sb3IgKyBzaXplICsgd2VpZ2h0ICsgaXRhbGljICsgdW5kZXJsaW5lICsgaGlnaGxpZ2h0ICsgXCJ9XCI7XG4gIH1cblxuICBmdW5jdGlvbiBhZGRDU1NSdWxlcyhydWxlcykge1xuICAgIHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcblxuICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBydWxlcy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgc3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUocnVsZXNbaV0pKTtcbiAgICB9XG5cbiAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHN0eWxlKTtcbiAgfVxuXG4gIC8qXG4gICAqIExvYWRzIEdvb2dsZSBvciBjdXN0b20gZm9udHMsIGlmIGFwcGxpY2FibGUsIGFuZCBpbmplY3RzIENTUyBzdHlsZXNcbiAgICogaW50byB0aGUgaGVhZCBvZiB0aGUgZG9jdW1lbnQuXG4gICAqXG4gICAqIEBwYXJhbSAgICBhcnJheSAgICBzZXR0aW5ncyAgICBBcnJheSBvZiBvYmplY3RzIHdpdGggdGhlIGZvbGxvd2luZyBmb3JtOlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFt7XG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImNsYXNzXCI6IFwiZGF0ZVwiLFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJmb250U2V0dGluZ1wiOiB7XG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9sZDogdHJ1ZSxcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogXCJibGFja1wiLFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnQ6IHtcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhbWlseTogXCJBa3JvbmltXCIsXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250OiBcIkFrcm9uaW1cIixcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiVmVyZGFuYVwiLFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJnb29nbGVcIixcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogXCJodHRwOi8vY3VzdG9tLWZvbnQtdXJsXCJcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhpZ2hsaWdodENvbG9yOiBcInRyYW5zcGFyZW50XCIsXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRhbGljOiBmYWxzZSxcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplOiBcIjIwXCIsXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5kZXJsaW5lOiBmYWxzZVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1dXG4gICAqXG4gICAqICAgICAgICAgICBvYmplY3QgICBjb250ZW50RG9jICAgIERvY3VtZW50IG9iamVjdCBpbnRvIHdoaWNoIHRvIGluamVjdCBzdHlsZXNcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5kIGxvYWQgZm9udHMgKG9wdGlvbmFsKS5cbiAgICovXG4gIGZ1bmN0aW9uIGxvYWRGb250cyhzZXR0aW5ncywgY29udGVudERvYykge1xuICAgIHNldHRpbmdzLmZvckVhY2goZnVuY3Rpb24oaXRlbSkge1xuICAgICAgaWYgKGl0ZW0uY2xhc3MgJiYgaXRlbS5mb250U2V0dGluZykge1xuICAgICAgICBhZGRDU1NSdWxlcyhbIGdldEZvbnRDc3NTdHlsZShpdGVtLmNsYXNzLCBpdGVtLmZvbnRTZXR0aW5nKSBdKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW0uZm9udFNldHRpbmcuZm9udC50eXBlKSB7XG4gICAgICAgIGlmIChpdGVtLmZvbnRTZXR0aW5nLmZvbnQudHlwZSA9PT0gXCJjdXN0b21cIiAmJiBpdGVtLmZvbnRTZXR0aW5nLmZvbnQuZmFtaWx5ICYmXG4gICAgICAgICAgaXRlbS5mb250U2V0dGluZy5mb250LnVybCkge1xuICAgICAgICAgIGxvYWRDdXN0b21Gb250KGl0ZW0uZm9udFNldHRpbmcuZm9udC5mYW1pbHksIGl0ZW0uZm9udFNldHRpbmcuZm9udC51cmwsXG4gICAgICAgICAgICBjb250ZW50RG9jKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpdGVtLmZvbnRTZXR0aW5nLmZvbnQudHlwZSA9PT0gXCJnb29nbGVcIiAmJiBpdGVtLmZvbnRTZXR0aW5nLmZvbnQuZmFtaWx5KSB7XG4gICAgICAgICAgbG9hZEdvb2dsZUZvbnQoaXRlbS5mb250U2V0dGluZy5mb250LmZhbWlseSwgY29udGVudERvYyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxvYWRDdXN0b21Gb250KGZhbWlseSwgdXJsLCBjb250ZW50RG9jKSB7XG4gICAgdmFyIHNoZWV0ID0gbnVsbDtcbiAgICB2YXIgcnVsZSA9IFwiZm9udC1mYW1pbHk6IFwiICsgZmFtaWx5ICsgXCI7IFwiICsgXCJzcmM6IHVybCgnXCIgKyB1cmwgKyBcIicpO1wiO1xuXG4gICAgY29udGVudERvYyA9IGNvbnRlbnREb2MgfHwgZG9jdW1lbnQ7XG5cbiAgICBzaGVldCA9IGNvbnRlbnREb2Muc3R5bGVTaGVldHNbMF07XG5cbiAgICBpZiAoc2hlZXQgIT09IG51bGwpIHtcbiAgICAgIHNoZWV0LmFkZFJ1bGUoXCJAZm9udC1mYWNlXCIsIHJ1bGUpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGxvYWRHb29nbGVGb250KGZhbWlseSwgY29udGVudERvYykge1xuICAgIHZhciBzdHlsZXNoZWV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIik7XG5cbiAgICBjb250ZW50RG9jID0gY29udGVudERvYyB8fCBkb2N1bWVudDtcblxuICAgIHN0eWxlc2hlZXQuc2V0QXR0cmlidXRlKFwicmVsXCIsIFwic3R5bGVzaGVldFwiKTtcbiAgICBzdHlsZXNoZWV0LnNldEF0dHJpYnV0ZShcInR5cGVcIiwgXCJ0ZXh0L2Nzc1wiKTtcbiAgICBzdHlsZXNoZWV0LnNldEF0dHJpYnV0ZShcImhyZWZcIiwgXCJodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9XCIgK1xuICAgICAgZmFtaWx5KTtcblxuICAgIGlmIChzdHlsZXNoZWV0ICE9PSBudWxsKSB7XG4gICAgICBjb250ZW50RG9jLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiaGVhZFwiKVswXS5hcHBlbmRDaGlsZChzdHlsZXNoZWV0KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwcmVsb2FkSW1hZ2VzKHVybHMpIHtcbiAgICB2YXIgbGVuZ3RoID0gdXJscy5sZW5ndGgsXG4gICAgICBpbWFnZXMgPSBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGltYWdlc1tpXSA9IG5ldyBJbWFnZSgpO1xuICAgICAgaW1hZ2VzW2ldLnNyYyA9IHVybHNbaV07XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZ2V0UXVlcnlQYXJhbWV0ZXIocGFyYW0pIHtcbiAgICB2YXIgcXVlcnkgPSB3aW5kb3cubG9jYXRpb24uc2VhcmNoLnN1YnN0cmluZygxKSxcbiAgICAgIHZhcnMgPSBxdWVyeS5zcGxpdChcIiZcIiksXG4gICAgICBwYWlyO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBwYWlyID0gdmFyc1tpXS5zcGxpdChcIj1cIik7XG5cbiAgICAgIGlmIChwYWlyWzBdID09IHBhcmFtKSB7XG4gICAgICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQocGFpclsxXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFwiXCI7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGdldFF1ZXJ5UGFyYW1ldGVyOiBnZXRRdWVyeVBhcmFtZXRlcixcbiAgICBnZXRGb250Q3NzU3R5bGU6ICBnZXRGb250Q3NzU3R5bGUsXG4gICAgYWRkQ1NTUnVsZXM6ICAgICAgYWRkQ1NTUnVsZXMsXG4gICAgbG9hZEZvbnRzOiAgICAgICAgbG9hZEZvbnRzLFxuICAgIGxvYWRDdXN0b21Gb250OiAgIGxvYWRDdXN0b21Gb250LFxuICAgIGxvYWRHb29nbGVGb250OiAgIGxvYWRHb29nbGVGb250LFxuICAgIHByZWxvYWRJbWFnZXM6ICAgIHByZWxvYWRJbWFnZXNcbiAgfTtcbn0pKCk7XG5cbi8vISBtb21lbnQuanNcbi8vISB2ZXJzaW9uIDogMi4xMS4xXG4vLyEgYXV0aG9ycyA6IFRpbSBXb29kLCBJc2tyZW4gQ2hlcm5ldiwgTW9tZW50LmpzIGNvbnRyaWJ1dG9yc1xuLy8hIGxpY2Vuc2UgOiBNSVRcbi8vISBtb21lbnRqcy5jb21cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCkgOlxuICAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShmYWN0b3J5KSA6XG4gICAgZ2xvYmFsLm1vbWVudCA9IGZhY3RvcnkoKVxufSh0aGlzLCBmdW5jdGlvbiAoKSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIHZhciBob29rQ2FsbGJhY2s7XG5cbiAgICBmdW5jdGlvbiB1dGlsc19ob29rc19faG9va3MgKCkge1xuICAgICAgICByZXR1cm4gaG9va0NhbGxiYWNrLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgLy8gVGhpcyBpcyBkb25lIHRvIHJlZ2lzdGVyIHRoZSBtZXRob2QgY2FsbGVkIHdpdGggbW9tZW50KClcbiAgICAvLyB3aXRob3V0IGNyZWF0aW5nIGNpcmN1bGFyIGRlcGVuZGVuY2llcy5cbiAgICBmdW5jdGlvbiBzZXRIb29rQ2FsbGJhY2sgKGNhbGxiYWNrKSB7XG4gICAgICAgIGhvb2tDYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzQXJyYXkoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpbnB1dCkgPT09ICdbb2JqZWN0IEFycmF5XSc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNEYXRlKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBpbnB1dCBpbnN0YW5jZW9mIERhdGUgfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGlucHV0KSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1hcChhcnIsIGZuKSB7XG4gICAgICAgIHZhciByZXMgPSBbXSwgaTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGFyci5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgcmVzLnB1c2goZm4oYXJyW2ldLCBpKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoYXNPd25Qcm9wKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChhLCBiKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBleHRlbmQoYSwgYikge1xuICAgICAgICBmb3IgKHZhciBpIGluIGIpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wKGIsIGkpKSB7XG4gICAgICAgICAgICAgICAgYVtpXSA9IGJbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaGFzT3duUHJvcChiLCAndG9TdHJpbmcnKSkge1xuICAgICAgICAgICAgYS50b1N0cmluZyA9IGIudG9TdHJpbmc7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaGFzT3duUHJvcChiLCAndmFsdWVPZicpKSB7XG4gICAgICAgICAgICBhLnZhbHVlT2YgPSBiLnZhbHVlT2Y7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVfdXRjX19jcmVhdGVVVEMgKGlucHV0LCBmb3JtYXQsIGxvY2FsZSwgc3RyaWN0KSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVMb2NhbE9yVVRDKGlucHV0LCBmb3JtYXQsIGxvY2FsZSwgc3RyaWN0LCB0cnVlKS51dGMoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkZWZhdWx0UGFyc2luZ0ZsYWdzKCkge1xuICAgICAgICAvLyBXZSBuZWVkIHRvIGRlZXAgY2xvbmUgdGhpcyBvYmplY3QuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBlbXB0eSAgICAgICAgICAgOiBmYWxzZSxcbiAgICAgICAgICAgIHVudXNlZFRva2VucyAgICA6IFtdLFxuICAgICAgICAgICAgdW51c2VkSW5wdXQgICAgIDogW10sXG4gICAgICAgICAgICBvdmVyZmxvdyAgICAgICAgOiAtMixcbiAgICAgICAgICAgIGNoYXJzTGVmdE92ZXIgICA6IDAsXG4gICAgICAgICAgICBudWxsSW5wdXQgICAgICAgOiBmYWxzZSxcbiAgICAgICAgICAgIGludmFsaWRNb250aCAgICA6IG51bGwsXG4gICAgICAgICAgICBpbnZhbGlkRm9ybWF0ICAgOiBmYWxzZSxcbiAgICAgICAgICAgIHVzZXJJbnZhbGlkYXRlZCA6IGZhbHNlLFxuICAgICAgICAgICAgaXNvICAgICAgICAgICAgIDogZmFsc2VcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRQYXJzaW5nRmxhZ3MobSkge1xuICAgICAgICBpZiAobS5fcGYgPT0gbnVsbCkge1xuICAgICAgICAgICAgbS5fcGYgPSBkZWZhdWx0UGFyc2luZ0ZsYWdzKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG0uX3BmO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHZhbGlkX19pc1ZhbGlkKG0pIHtcbiAgICAgICAgaWYgKG0uX2lzVmFsaWQgPT0gbnVsbCkge1xuICAgICAgICAgICAgdmFyIGZsYWdzID0gZ2V0UGFyc2luZ0ZsYWdzKG0pO1xuICAgICAgICAgICAgbS5faXNWYWxpZCA9ICFpc05hTihtLl9kLmdldFRpbWUoKSkgJiZcbiAgICAgICAgICAgICAgICBmbGFncy5vdmVyZmxvdyA8IDAgJiZcbiAgICAgICAgICAgICAgICAhZmxhZ3MuZW1wdHkgJiZcbiAgICAgICAgICAgICAgICAhZmxhZ3MuaW52YWxpZE1vbnRoICYmXG4gICAgICAgICAgICAgICAgIWZsYWdzLmludmFsaWRXZWVrZGF5ICYmXG4gICAgICAgICAgICAgICAgIWZsYWdzLm51bGxJbnB1dCAmJlxuICAgICAgICAgICAgICAgICFmbGFncy5pbnZhbGlkRm9ybWF0ICYmXG4gICAgICAgICAgICAgICAgIWZsYWdzLnVzZXJJbnZhbGlkYXRlZDtcblxuICAgICAgICAgICAgaWYgKG0uX3N0cmljdCkge1xuICAgICAgICAgICAgICAgIG0uX2lzVmFsaWQgPSBtLl9pc1ZhbGlkICYmXG4gICAgICAgICAgICAgICAgICAgIGZsYWdzLmNoYXJzTGVmdE92ZXIgPT09IDAgJiZcbiAgICAgICAgICAgICAgICAgICAgZmxhZ3MudW51c2VkVG9rZW5zLmxlbmd0aCA9PT0gMCAmJlxuICAgICAgICAgICAgICAgICAgICBmbGFncy5iaWdIb3VyID09PSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG0uX2lzVmFsaWQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdmFsaWRfX2NyZWF0ZUludmFsaWQgKGZsYWdzKSB7XG4gICAgICAgIHZhciBtID0gY3JlYXRlX3V0Y19fY3JlYXRlVVRDKE5hTik7XG4gICAgICAgIGlmIChmbGFncyAhPSBudWxsKSB7XG4gICAgICAgICAgICBleHRlbmQoZ2V0UGFyc2luZ0ZsYWdzKG0pLCBmbGFncyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MobSkudXNlckludmFsaWRhdGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBtO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzVW5kZWZpbmVkKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBpbnB1dCA9PT0gdm9pZCAwO1xuICAgIH1cblxuICAgIC8vIFBsdWdpbnMgdGhhdCBhZGQgcHJvcGVydGllcyBzaG91bGQgYWxzbyBhZGQgdGhlIGtleSBoZXJlIChudWxsIHZhbHVlKSxcbiAgICAvLyBzbyB3ZSBjYW4gcHJvcGVybHkgY2xvbmUgb3Vyc2VsdmVzLlxuICAgIHZhciBtb21lbnRQcm9wZXJ0aWVzID0gdXRpbHNfaG9va3NfX2hvb2tzLm1vbWVudFByb3BlcnRpZXMgPSBbXTtcblxuICAgIGZ1bmN0aW9uIGNvcHlDb25maWcodG8sIGZyb20pIHtcbiAgICAgICAgdmFyIGksIHByb3AsIHZhbDtcblxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX2lzQU1vbWVudE9iamVjdCkpIHtcbiAgICAgICAgICAgIHRvLl9pc0FNb21lbnRPYmplY3QgPSBmcm9tLl9pc0FNb21lbnRPYmplY3Q7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9pKSkge1xuICAgICAgICAgICAgdG8uX2kgPSBmcm9tLl9pO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5fZikpIHtcbiAgICAgICAgICAgIHRvLl9mID0gZnJvbS5fZjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX2wpKSB7XG4gICAgICAgICAgICB0by5fbCA9IGZyb20uX2w7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9zdHJpY3QpKSB7XG4gICAgICAgICAgICB0by5fc3RyaWN0ID0gZnJvbS5fc3RyaWN0O1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5fdHptKSkge1xuICAgICAgICAgICAgdG8uX3R6bSA9IGZyb20uX3R6bTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX2lzVVRDKSkge1xuICAgICAgICAgICAgdG8uX2lzVVRDID0gZnJvbS5faXNVVEM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9vZmZzZXQpKSB7XG4gICAgICAgICAgICB0by5fb2Zmc2V0ID0gZnJvbS5fb2Zmc2V0O1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5fcGYpKSB7XG4gICAgICAgICAgICB0by5fcGYgPSBnZXRQYXJzaW5nRmxhZ3MoZnJvbSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9sb2NhbGUpKSB7XG4gICAgICAgICAgICB0by5fbG9jYWxlID0gZnJvbS5fbG9jYWxlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1vbWVudFByb3BlcnRpZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgZm9yIChpIGluIG1vbWVudFByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgICAgICBwcm9wID0gbW9tZW50UHJvcGVydGllc1tpXTtcbiAgICAgICAgICAgICAgICB2YWwgPSBmcm9tW3Byb3BdO1xuICAgICAgICAgICAgICAgIGlmICghaXNVbmRlZmluZWQodmFsKSkge1xuICAgICAgICAgICAgICAgICAgICB0b1twcm9wXSA9IHZhbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdG87XG4gICAgfVxuXG4gICAgdmFyIHVwZGF0ZUluUHJvZ3Jlc3MgPSBmYWxzZTtcblxuICAgIC8vIE1vbWVudCBwcm90b3R5cGUgb2JqZWN0XG4gICAgZnVuY3Rpb24gTW9tZW50KGNvbmZpZykge1xuICAgICAgICBjb3B5Q29uZmlnKHRoaXMsIGNvbmZpZyk7XG4gICAgICAgIHRoaXMuX2QgPSBuZXcgRGF0ZShjb25maWcuX2QgIT0gbnVsbCA/IGNvbmZpZy5fZC5nZXRUaW1lKCkgOiBOYU4pO1xuICAgICAgICAvLyBQcmV2ZW50IGluZmluaXRlIGxvb3AgaW4gY2FzZSB1cGRhdGVPZmZzZXQgY3JlYXRlcyBuZXcgbW9tZW50XG4gICAgICAgIC8vIG9iamVjdHMuXG4gICAgICAgIGlmICh1cGRhdGVJblByb2dyZXNzID09PSBmYWxzZSkge1xuICAgICAgICAgICAgdXBkYXRlSW5Qcm9ncmVzcyA9IHRydWU7XG4gICAgICAgICAgICB1dGlsc19ob29rc19faG9va3MudXBkYXRlT2Zmc2V0KHRoaXMpO1xuICAgICAgICAgICAgdXBkYXRlSW5Qcm9ncmVzcyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNNb21lbnQgKG9iaikge1xuICAgICAgICByZXR1cm4gb2JqIGluc3RhbmNlb2YgTW9tZW50IHx8IChvYmogIT0gbnVsbCAmJiBvYmouX2lzQU1vbWVudE9iamVjdCAhPSBudWxsKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhYnNGbG9vciAobnVtYmVyKSB7XG4gICAgICAgIGlmIChudW1iZXIgPCAwKSB7XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5jZWlsKG51bWJlcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihudW1iZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9JbnQoYXJndW1lbnRGb3JDb2VyY2lvbikge1xuICAgICAgICB2YXIgY29lcmNlZE51bWJlciA9ICthcmd1bWVudEZvckNvZXJjaW9uLFxuICAgICAgICAgICAgdmFsdWUgPSAwO1xuXG4gICAgICAgIGlmIChjb2VyY2VkTnVtYmVyICE9PSAwICYmIGlzRmluaXRlKGNvZXJjZWROdW1iZXIpKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGFic0Zsb29yKGNvZXJjZWROdW1iZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIC8vIGNvbXBhcmUgdHdvIGFycmF5cywgcmV0dXJuIHRoZSBudW1iZXIgb2YgZGlmZmVyZW5jZXNcbiAgICBmdW5jdGlvbiBjb21wYXJlQXJyYXlzKGFycmF5MSwgYXJyYXkyLCBkb250Q29udmVydCkge1xuICAgICAgICB2YXIgbGVuID0gTWF0aC5taW4oYXJyYXkxLmxlbmd0aCwgYXJyYXkyLmxlbmd0aCksXG4gICAgICAgICAgICBsZW5ndGhEaWZmID0gTWF0aC5hYnMoYXJyYXkxLmxlbmd0aCAtIGFycmF5Mi5sZW5ndGgpLFxuICAgICAgICAgICAgZGlmZnMgPSAwLFxuICAgICAgICAgICAgaTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoKGRvbnRDb252ZXJ0ICYmIGFycmF5MVtpXSAhPT0gYXJyYXkyW2ldKSB8fFxuICAgICAgICAgICAgICAgICghZG9udENvbnZlcnQgJiYgdG9JbnQoYXJyYXkxW2ldKSAhPT0gdG9JbnQoYXJyYXkyW2ldKSkpIHtcbiAgICAgICAgICAgICAgICBkaWZmcysrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkaWZmcyArIGxlbmd0aERpZmY7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gTG9jYWxlKCkge1xuICAgIH1cblxuICAgIC8vIGludGVybmFsIHN0b3JhZ2UgZm9yIGxvY2FsZSBjb25maWcgZmlsZXNcbiAgICB2YXIgbG9jYWxlcyA9IHt9O1xuICAgIHZhciBnbG9iYWxMb2NhbGU7XG5cbiAgICBmdW5jdGlvbiBub3JtYWxpemVMb2NhbGUoa2V5KSB7XG4gICAgICAgIHJldHVybiBrZXkgPyBrZXkudG9Mb3dlckNhc2UoKS5yZXBsYWNlKCdfJywgJy0nKSA6IGtleTtcbiAgICB9XG5cbiAgICAvLyBwaWNrIHRoZSBsb2NhbGUgZnJvbSB0aGUgYXJyYXlcbiAgICAvLyB0cnkgWydlbi1hdScsICdlbi1nYiddIGFzICdlbi1hdScsICdlbi1nYicsICdlbicsIGFzIGluIG1vdmUgdGhyb3VnaCB0aGUgbGlzdCB0cnlpbmcgZWFjaFxuICAgIC8vIHN1YnN0cmluZyBmcm9tIG1vc3Qgc3BlY2lmaWMgdG8gbGVhc3QsIGJ1dCBtb3ZlIHRvIHRoZSBuZXh0IGFycmF5IGl0ZW0gaWYgaXQncyBhIG1vcmUgc3BlY2lmaWMgdmFyaWFudCB0aGFuIHRoZSBjdXJyZW50IHJvb3RcbiAgICBmdW5jdGlvbiBjaG9vc2VMb2NhbGUobmFtZXMpIHtcbiAgICAgICAgdmFyIGkgPSAwLCBqLCBuZXh0LCBsb2NhbGUsIHNwbGl0O1xuXG4gICAgICAgIHdoaWxlIChpIDwgbmFtZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICBzcGxpdCA9IG5vcm1hbGl6ZUxvY2FsZShuYW1lc1tpXSkuc3BsaXQoJy0nKTtcbiAgICAgICAgICAgIGogPSBzcGxpdC5sZW5ndGg7XG4gICAgICAgICAgICBuZXh0ID0gbm9ybWFsaXplTG9jYWxlKG5hbWVzW2kgKyAxXSk7XG4gICAgICAgICAgICBuZXh0ID0gbmV4dCA/IG5leHQuc3BsaXQoJy0nKSA6IG51bGw7XG4gICAgICAgICAgICB3aGlsZSAoaiA+IDApIHtcbiAgICAgICAgICAgICAgICBsb2NhbGUgPSBsb2FkTG9jYWxlKHNwbGl0LnNsaWNlKDAsIGopLmpvaW4oJy0nKSk7XG4gICAgICAgICAgICAgICAgaWYgKGxvY2FsZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbG9jYWxlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobmV4dCAmJiBuZXh0Lmxlbmd0aCA+PSBqICYmIGNvbXBhcmVBcnJheXMoc3BsaXQsIG5leHQsIHRydWUpID49IGogLSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vdGhlIG5leHQgYXJyYXkgaXRlbSBpcyBiZXR0ZXIgdGhhbiBhIHNoYWxsb3dlciBzdWJzdHJpbmcgb2YgdGhpcyBvbmVcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGotLTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2FkTG9jYWxlKG5hbWUpIHtcbiAgICAgICAgdmFyIG9sZExvY2FsZSA9IG51bGw7XG4gICAgICAgIC8vIFRPRE86IEZpbmQgYSBiZXR0ZXIgd2F5IHRvIHJlZ2lzdGVyIGFuZCBsb2FkIGFsbCB0aGUgbG9jYWxlcyBpbiBOb2RlXG4gICAgICAgIGlmICghbG9jYWxlc1tuYW1lXSAmJiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpICYmXG4gICAgICAgICAgICAgICAgbW9kdWxlICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIG9sZExvY2FsZSA9IGdsb2JhbExvY2FsZS5fYWJicjtcbiAgICAgICAgICAgICAgICByZXF1aXJlKCcuL2xvY2FsZS8nICsgbmFtZSk7XG4gICAgICAgICAgICAgICAgLy8gYmVjYXVzZSBkZWZpbmVMb2NhbGUgY3VycmVudGx5IGFsc28gc2V0cyB0aGUgZ2xvYmFsIGxvY2FsZSwgd2VcbiAgICAgICAgICAgICAgICAvLyB3YW50IHRvIHVuZG8gdGhhdCBmb3IgbGF6eSBsb2FkZWQgbG9jYWxlc1xuICAgICAgICAgICAgICAgIGxvY2FsZV9sb2NhbGVzX19nZXRTZXRHbG9iYWxMb2NhbGUob2xkTG9jYWxlKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsb2NhbGVzW25hbWVdO1xuICAgIH1cblxuICAgIC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBsb2FkIGxvY2FsZSBhbmQgdGhlbiBzZXQgdGhlIGdsb2JhbCBsb2NhbGUuICBJZlxuICAgIC8vIG5vIGFyZ3VtZW50cyBhcmUgcGFzc2VkIGluLCBpdCB3aWxsIHNpbXBseSByZXR1cm4gdGhlIGN1cnJlbnQgZ2xvYmFsXG4gICAgLy8gbG9jYWxlIGtleS5cbiAgICBmdW5jdGlvbiBsb2NhbGVfbG9jYWxlc19fZ2V0U2V0R2xvYmFsTG9jYWxlIChrZXksIHZhbHVlcykge1xuICAgICAgICB2YXIgZGF0YTtcbiAgICAgICAgaWYgKGtleSkge1xuICAgICAgICAgICAgaWYgKGlzVW5kZWZpbmVkKHZhbHVlcykpIHtcbiAgICAgICAgICAgICAgICBkYXRhID0gbG9jYWxlX2xvY2FsZXNfX2dldExvY2FsZShrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZGF0YSA9IGRlZmluZUxvY2FsZShrZXksIHZhbHVlcyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgLy8gbW9tZW50LmR1cmF0aW9uLl9sb2NhbGUgPSBtb21lbnQuX2xvY2FsZSA9IGRhdGE7XG4gICAgICAgICAgICAgICAgZ2xvYmFsTG9jYWxlID0gZGF0YTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBnbG9iYWxMb2NhbGUuX2FiYnI7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGVmaW5lTG9jYWxlIChuYW1lLCB2YWx1ZXMpIHtcbiAgICAgICAgaWYgKHZhbHVlcyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdmFsdWVzLmFiYnIgPSBuYW1lO1xuICAgICAgICAgICAgbG9jYWxlc1tuYW1lXSA9IGxvY2FsZXNbbmFtZV0gfHwgbmV3IExvY2FsZSgpO1xuICAgICAgICAgICAgbG9jYWxlc1tuYW1lXS5zZXQodmFsdWVzKTtcblxuICAgICAgICAgICAgLy8gYmFja3dhcmRzIGNvbXBhdCBmb3Igbm93OiBhbHNvIHNldCB0aGUgbG9jYWxlXG4gICAgICAgICAgICBsb2NhbGVfbG9jYWxlc19fZ2V0U2V0R2xvYmFsTG9jYWxlKG5hbWUpO1xuXG4gICAgICAgICAgICByZXR1cm4gbG9jYWxlc1tuYW1lXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIHVzZWZ1bCBmb3IgdGVzdGluZ1xuICAgICAgICAgICAgZGVsZXRlIGxvY2FsZXNbbmFtZV07XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIHJldHVybnMgbG9jYWxlIGRhdGFcbiAgICBmdW5jdGlvbiBsb2NhbGVfbG9jYWxlc19fZ2V0TG9jYWxlIChrZXkpIHtcbiAgICAgICAgdmFyIGxvY2FsZTtcblxuICAgICAgICBpZiAoa2V5ICYmIGtleS5fbG9jYWxlICYmIGtleS5fbG9jYWxlLl9hYmJyKSB7XG4gICAgICAgICAgICBrZXkgPSBrZXkuX2xvY2FsZS5fYWJicjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgha2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gZ2xvYmFsTG9jYWxlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFpc0FycmF5KGtleSkpIHtcbiAgICAgICAgICAgIC8vc2hvcnQtY2lyY3VpdCBldmVyeXRoaW5nIGVsc2VcbiAgICAgICAgICAgIGxvY2FsZSA9IGxvYWRMb2NhbGUoa2V5KTtcbiAgICAgICAgICAgIGlmIChsb2NhbGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbG9jYWxlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAga2V5ID0gW2tleV07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY2hvb3NlTG9jYWxlKGtleSk7XG4gICAgfVxuXG4gICAgdmFyIGFsaWFzZXMgPSB7fTtcblxuICAgIGZ1bmN0aW9uIGFkZFVuaXRBbGlhcyAodW5pdCwgc2hvcnRoYW5kKSB7XG4gICAgICAgIHZhciBsb3dlckNhc2UgPSB1bml0LnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGFsaWFzZXNbbG93ZXJDYXNlXSA9IGFsaWFzZXNbbG93ZXJDYXNlICsgJ3MnXSA9IGFsaWFzZXNbc2hvcnRoYW5kXSA9IHVuaXQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbm9ybWFsaXplVW5pdHModW5pdHMpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB1bml0cyA9PT0gJ3N0cmluZycgPyBhbGlhc2VzW3VuaXRzXSB8fCBhbGlhc2VzW3VuaXRzLnRvTG93ZXJDYXNlKCldIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG5vcm1hbGl6ZU9iamVjdFVuaXRzKGlucHV0T2JqZWN0KSB7XG4gICAgICAgIHZhciBub3JtYWxpemVkSW5wdXQgPSB7fSxcbiAgICAgICAgICAgIG5vcm1hbGl6ZWRQcm9wLFxuICAgICAgICAgICAgcHJvcDtcblxuICAgICAgICBmb3IgKHByb3AgaW4gaW5wdXRPYmplY3QpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wKGlucHV0T2JqZWN0LCBwcm9wKSkge1xuICAgICAgICAgICAgICAgIG5vcm1hbGl6ZWRQcm9wID0gbm9ybWFsaXplVW5pdHMocHJvcCk7XG4gICAgICAgICAgICAgICAgaWYgKG5vcm1hbGl6ZWRQcm9wKSB7XG4gICAgICAgICAgICAgICAgICAgIG5vcm1hbGl6ZWRJbnB1dFtub3JtYWxpemVkUHJvcF0gPSBpbnB1dE9iamVjdFtwcm9wXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbm9ybWFsaXplZElucHV0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzRnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0IGluc3RhbmNlb2YgRnVuY3Rpb24gfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGlucHV0KSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYWtlR2V0U2V0ICh1bml0LCBrZWVwVGltZSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGdldF9zZXRfX3NldCh0aGlzLCB1bml0LCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgdXRpbHNfaG9va3NfX2hvb2tzLnVwZGF0ZU9mZnNldCh0aGlzLCBrZWVwVGltZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBnZXRfc2V0X19nZXQodGhpcywgdW5pdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0X3NldF9fZ2V0IChtb20sIHVuaXQpIHtcbiAgICAgICAgcmV0dXJuIG1vbS5pc1ZhbGlkKCkgP1xuICAgICAgICAgICAgbW9tLl9kWydnZXQnICsgKG1vbS5faXNVVEMgPyAnVVRDJyA6ICcnKSArIHVuaXRdKCkgOiBOYU47XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0X3NldF9fc2V0IChtb20sIHVuaXQsIHZhbHVlKSB7XG4gICAgICAgIGlmIChtb20uaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICBtb20uX2RbJ3NldCcgKyAobW9tLl9pc1VUQyA/ICdVVEMnIDogJycpICsgdW5pdF0odmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgZnVuY3Rpb24gZ2V0U2V0ICh1bml0cywgdmFsdWUpIHtcbiAgICAgICAgdmFyIHVuaXQ7XG4gICAgICAgIGlmICh0eXBlb2YgdW5pdHMgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBmb3IgKHVuaXQgaW4gdW5pdHMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldCh1bml0LCB1bml0c1t1bml0XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTtcbiAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKHRoaXNbdW5pdHNdKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzW3VuaXRzXSh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gemVyb0ZpbGwobnVtYmVyLCB0YXJnZXRMZW5ndGgsIGZvcmNlU2lnbikge1xuICAgICAgICB2YXIgYWJzTnVtYmVyID0gJycgKyBNYXRoLmFicyhudW1iZXIpLFxuICAgICAgICAgICAgemVyb3NUb0ZpbGwgPSB0YXJnZXRMZW5ndGggLSBhYnNOdW1iZXIubGVuZ3RoLFxuICAgICAgICAgICAgc2lnbiA9IG51bWJlciA+PSAwO1xuICAgICAgICByZXR1cm4gKHNpZ24gPyAoZm9yY2VTaWduID8gJysnIDogJycpIDogJy0nKSArXG4gICAgICAgICAgICBNYXRoLnBvdygxMCwgTWF0aC5tYXgoMCwgemVyb3NUb0ZpbGwpKS50b1N0cmluZygpLnN1YnN0cigxKSArIGFic051bWJlcjtcbiAgICB9XG5cbiAgICB2YXIgZm9ybWF0dGluZ1Rva2VucyA9IC8oXFxbW15cXFtdKlxcXSl8KFxcXFwpPyhbSGhdbW0oc3MpP3xNb3xNTT9NP00/fERvfERERG98REQ/RD9EP3xkZGQ/ZD98ZG8/fHdbb3x3XT98V1tvfFddP3xRbz98WVlZWVlZfFlZWVlZfFlZWVl8WVl8Z2coZ2dnPyk/fEdHKEdHRz8pP3xlfEV8YXxBfGhoP3xISD98bW0/fHNzP3xTezEsOX18eHxYfHp6P3xaWj98LikvZztcblxuICAgIHZhciBsb2NhbEZvcm1hdHRpbmdUb2tlbnMgPSAvKFxcW1teXFxbXSpcXF0pfChcXFxcKT8oTFRTfExUfExMP0w/TD98bHsxLDR9KS9nO1xuXG4gICAgdmFyIGZvcm1hdEZ1bmN0aW9ucyA9IHt9O1xuXG4gICAgdmFyIGZvcm1hdFRva2VuRnVuY3Rpb25zID0ge307XG5cbiAgICAvLyB0b2tlbjogICAgJ00nXG4gICAgLy8gcGFkZGVkOiAgIFsnTU0nLCAyXVxuICAgIC8vIG9yZGluYWw6ICAnTW8nXG4gICAgLy8gY2FsbGJhY2s6IGZ1bmN0aW9uICgpIHsgdGhpcy5tb250aCgpICsgMSB9XG4gICAgZnVuY3Rpb24gYWRkRm9ybWF0VG9rZW4gKHRva2VuLCBwYWRkZWQsIG9yZGluYWwsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBmdW5jID0gY2FsbGJhY2s7XG4gICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBmdW5jID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzW2NhbGxiYWNrXSgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodG9rZW4pIHtcbiAgICAgICAgICAgIGZvcm1hdFRva2VuRnVuY3Rpb25zW3Rva2VuXSA9IGZ1bmM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhZGRlZCkge1xuICAgICAgICAgICAgZm9ybWF0VG9rZW5GdW5jdGlvbnNbcGFkZGVkWzBdXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gemVyb0ZpbGwoZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpLCBwYWRkZWRbMV0sIHBhZGRlZFsyXSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcmRpbmFsKSB7XG4gICAgICAgICAgICBmb3JtYXRUb2tlbkZ1bmN0aW9uc1tvcmRpbmFsXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkub3JkaW5hbChmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksIHRva2VuKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZW1vdmVGb3JtYXR0aW5nVG9rZW5zKGlucHV0KSB7XG4gICAgICAgIGlmIChpbnB1dC5tYXRjaCgvXFxbW1xcc1xcU10vKSkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0LnJlcGxhY2UoL15cXFt8XFxdJC9nLCAnJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlucHV0LnJlcGxhY2UoL1xcXFwvZywgJycpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1ha2VGb3JtYXRGdW5jdGlvbihmb3JtYXQpIHtcbiAgICAgICAgdmFyIGFycmF5ID0gZm9ybWF0Lm1hdGNoKGZvcm1hdHRpbmdUb2tlbnMpLCBpLCBsZW5ndGg7XG5cbiAgICAgICAgZm9yIChpID0gMCwgbGVuZ3RoID0gYXJyYXkubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChmb3JtYXRUb2tlbkZ1bmN0aW9uc1thcnJheVtpXV0pIHtcbiAgICAgICAgICAgICAgICBhcnJheVtpXSA9IGZvcm1hdFRva2VuRnVuY3Rpb25zW2FycmF5W2ldXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYXJyYXlbaV0gPSByZW1vdmVGb3JtYXR0aW5nVG9rZW5zKGFycmF5W2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAobW9tKSB7XG4gICAgICAgICAgICB2YXIgb3V0cHV0ID0gJyc7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBvdXRwdXQgKz0gYXJyYXlbaV0gaW5zdGFuY2VvZiBGdW5jdGlvbiA/IGFycmF5W2ldLmNhbGwobW9tLCBmb3JtYXQpIDogYXJyYXlbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIGZvcm1hdCBkYXRlIHVzaW5nIG5hdGl2ZSBkYXRlIG9iamVjdFxuICAgIGZ1bmN0aW9uIGZvcm1hdE1vbWVudChtLCBmb3JtYXQpIHtcbiAgICAgICAgaWYgKCFtLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIG0ubG9jYWxlRGF0YSgpLmludmFsaWREYXRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3JtYXQgPSBleHBhbmRGb3JtYXQoZm9ybWF0LCBtLmxvY2FsZURhdGEoKSk7XG4gICAgICAgIGZvcm1hdEZ1bmN0aW9uc1tmb3JtYXRdID0gZm9ybWF0RnVuY3Rpb25zW2Zvcm1hdF0gfHwgbWFrZUZvcm1hdEZ1bmN0aW9uKGZvcm1hdCk7XG5cbiAgICAgICAgcmV0dXJuIGZvcm1hdEZ1bmN0aW9uc1tmb3JtYXRdKG0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGV4cGFuZEZvcm1hdChmb3JtYXQsIGxvY2FsZSkge1xuICAgICAgICB2YXIgaSA9IDU7XG5cbiAgICAgICAgZnVuY3Rpb24gcmVwbGFjZUxvbmdEYXRlRm9ybWF0VG9rZW5zKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gbG9jYWxlLmxvbmdEYXRlRm9ybWF0KGlucHV0KSB8fCBpbnB1dDtcbiAgICAgICAgfVxuXG4gICAgICAgIGxvY2FsRm9ybWF0dGluZ1Rva2Vucy5sYXN0SW5kZXggPSAwO1xuICAgICAgICB3aGlsZSAoaSA+PSAwICYmIGxvY2FsRm9ybWF0dGluZ1Rva2Vucy50ZXN0KGZvcm1hdCkpIHtcbiAgICAgICAgICAgIGZvcm1hdCA9IGZvcm1hdC5yZXBsYWNlKGxvY2FsRm9ybWF0dGluZ1Rva2VucywgcmVwbGFjZUxvbmdEYXRlRm9ybWF0VG9rZW5zKTtcbiAgICAgICAgICAgIGxvY2FsRm9ybWF0dGluZ1Rva2Vucy5sYXN0SW5kZXggPSAwO1xuICAgICAgICAgICAgaSAtPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZvcm1hdDtcbiAgICB9XG5cbiAgICB2YXIgbWF0Y2gxICAgICAgICAgPSAvXFxkLzsgICAgICAgICAgICAvLyAgICAgICAwIC0gOVxuICAgIHZhciBtYXRjaDIgICAgICAgICA9IC9cXGRcXGQvOyAgICAgICAgICAvLyAgICAgIDAwIC0gOTlcbiAgICB2YXIgbWF0Y2gzICAgICAgICAgPSAvXFxkezN9LzsgICAgICAgICAvLyAgICAgMDAwIC0gOTk5XG4gICAgdmFyIG1hdGNoNCAgICAgICAgID0gL1xcZHs0fS87ICAgICAgICAgLy8gICAgMDAwMCAtIDk5OTlcbiAgICB2YXIgbWF0Y2g2ICAgICAgICAgPSAvWystXT9cXGR7Nn0vOyAgICAvLyAtOTk5OTk5IC0gOTk5OTk5XG4gICAgdmFyIG1hdGNoMXRvMiAgICAgID0gL1xcZFxcZD8vOyAgICAgICAgIC8vICAgICAgIDAgLSA5OVxuICAgIHZhciBtYXRjaDN0bzQgICAgICA9IC9cXGRcXGRcXGRcXGQ/LzsgICAgIC8vICAgICA5OTkgLSA5OTk5XG4gICAgdmFyIG1hdGNoNXRvNiAgICAgID0gL1xcZFxcZFxcZFxcZFxcZFxcZD8vOyAvLyAgIDk5OTk5IC0gOTk5OTk5XG4gICAgdmFyIG1hdGNoMXRvMyAgICAgID0gL1xcZHsxLDN9LzsgICAgICAgLy8gICAgICAgMCAtIDk5OVxuICAgIHZhciBtYXRjaDF0bzQgICAgICA9IC9cXGR7MSw0fS87ICAgICAgIC8vICAgICAgIDAgLSA5OTk5XG4gICAgdmFyIG1hdGNoMXRvNiAgICAgID0gL1srLV0/XFxkezEsNn0vOyAgLy8gLTk5OTk5OSAtIDk5OTk5OVxuXG4gICAgdmFyIG1hdGNoVW5zaWduZWQgID0gL1xcZCsvOyAgICAgICAgICAgLy8gICAgICAgMCAtIGluZlxuICAgIHZhciBtYXRjaFNpZ25lZCAgICA9IC9bKy1dP1xcZCsvOyAgICAgIC8vICAgIC1pbmYgLSBpbmZcblxuICAgIHZhciBtYXRjaE9mZnNldCAgICA9IC9afFsrLV1cXGRcXGQ6P1xcZFxcZC9naTsgLy8gKzAwOjAwIC0wMDowMCArMDAwMCAtMDAwMCBvciBaXG4gICAgdmFyIG1hdGNoU2hvcnRPZmZzZXQgPSAvWnxbKy1dXFxkXFxkKD86Oj9cXGRcXGQpPy9naTsgLy8gKzAwIC0wMCArMDA6MDAgLTAwOjAwICswMDAwIC0wMDAwIG9yIFpcblxuICAgIHZhciBtYXRjaFRpbWVzdGFtcCA9IC9bKy1dP1xcZCsoXFwuXFxkezEsM30pPy87IC8vIDEyMzQ1Njc4OSAxMjM0NTY3ODkuMTIzXG5cbiAgICAvLyBhbnkgd29yZCAob3IgdHdvKSBjaGFyYWN0ZXJzIG9yIG51bWJlcnMgaW5jbHVkaW5nIHR3by90aHJlZSB3b3JkIG1vbnRoIGluIGFyYWJpYy5cbiAgICAvLyBpbmNsdWRlcyBzY290dGlzaCBnYWVsaWMgdHdvIHdvcmQgYW5kIGh5cGhlbmF0ZWQgbW9udGhzXG4gICAgdmFyIG1hdGNoV29yZCA9IC9bMC05XSpbJ2EtelxcdTAwQTAtXFx1MDVGRlxcdTA3MDAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0rfFtcXHUwNjAwLVxcdTA2RkZcXC9dKyhcXHMqP1tcXHUwNjAwLVxcdTA2RkZdKyl7MSwyfS9pO1xuXG5cbiAgICB2YXIgcmVnZXhlcyA9IHt9O1xuXG4gICAgZnVuY3Rpb24gYWRkUmVnZXhUb2tlbiAodG9rZW4sIHJlZ2V4LCBzdHJpY3RSZWdleCkge1xuICAgICAgICByZWdleGVzW3Rva2VuXSA9IGlzRnVuY3Rpb24ocmVnZXgpID8gcmVnZXggOiBmdW5jdGlvbiAoaXNTdHJpY3QsIGxvY2FsZURhdGEpIHtcbiAgICAgICAgICAgIHJldHVybiAoaXNTdHJpY3QgJiYgc3RyaWN0UmVnZXgpID8gc3RyaWN0UmVnZXggOiByZWdleDtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRQYXJzZVJlZ2V4Rm9yVG9rZW4gKHRva2VuLCBjb25maWcpIHtcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHJlZ2V4ZXMsIHRva2VuKSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWdFeHAodW5lc2NhcGVGb3JtYXQodG9rZW4pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZWdleGVzW3Rva2VuXShjb25maWcuX3N0cmljdCwgY29uZmlnLl9sb2NhbGUpO1xuICAgIH1cblxuICAgIC8vIENvZGUgZnJvbSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzM1NjE0OTMvaXMtdGhlcmUtYS1yZWdleHAtZXNjYXBlLWZ1bmN0aW9uLWluLWphdmFzY3JpcHRcbiAgICBmdW5jdGlvbiB1bmVzY2FwZUZvcm1hdChzKSB7XG4gICAgICAgIHJldHVybiByZWdleEVzY2FwZShzLnJlcGxhY2UoJ1xcXFwnLCAnJykucmVwbGFjZSgvXFxcXChcXFspfFxcXFwoXFxdKXxcXFsoW15cXF1cXFtdKilcXF18XFxcXCguKS9nLCBmdW5jdGlvbiAobWF0Y2hlZCwgcDEsIHAyLCBwMywgcDQpIHtcbiAgICAgICAgICAgIHJldHVybiBwMSB8fCBwMiB8fCBwMyB8fCBwNDtcbiAgICAgICAgfSkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlZ2V4RXNjYXBlKHMpIHtcbiAgICAgICAgcmV0dXJuIHMucmVwbGFjZSgvWy1cXC9cXFxcXiQqKz8uKCl8W1xcXXt9XS9nLCAnXFxcXCQmJyk7XG4gICAgfVxuXG4gICAgdmFyIHRva2VucyA9IHt9O1xuXG4gICAgZnVuY3Rpb24gYWRkUGFyc2VUb2tlbiAodG9rZW4sIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBpLCBmdW5jID0gY2FsbGJhY2s7XG4gICAgICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB0b2tlbiA9IFt0b2tlbl07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIGZ1bmMgPSBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgICAgICAgICAgICAgYXJyYXlbY2FsbGJhY2tdID0gdG9JbnQoaW5wdXQpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdG9rZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRva2Vuc1t0b2tlbltpXV0gPSBmdW5jO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWRkV2Vla1BhcnNlVG9rZW4gKHRva2VuLCBjYWxsYmFjaykge1xuICAgICAgICBhZGRQYXJzZVRva2VuKHRva2VuLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcsIHRva2VuKSB7XG4gICAgICAgICAgICBjb25maWcuX3cgPSBjb25maWcuX3cgfHwge307XG4gICAgICAgICAgICBjYWxsYmFjayhpbnB1dCwgY29uZmlnLl93LCBjb25maWcsIHRva2VuKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWRkVGltZVRvQXJyYXlGcm9tVG9rZW4odG9rZW4sIGlucHV0LCBjb25maWcpIHtcbiAgICAgICAgaWYgKGlucHV0ICE9IG51bGwgJiYgaGFzT3duUHJvcCh0b2tlbnMsIHRva2VuKSkge1xuICAgICAgICAgICAgdG9rZW5zW3Rva2VuXShpbnB1dCwgY29uZmlnLl9hLCBjb25maWcsIHRva2VuKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBZRUFSID0gMDtcbiAgICB2YXIgTU9OVEggPSAxO1xuICAgIHZhciBEQVRFID0gMjtcbiAgICB2YXIgSE9VUiA9IDM7XG4gICAgdmFyIE1JTlVURSA9IDQ7XG4gICAgdmFyIFNFQ09ORCA9IDU7XG4gICAgdmFyIE1JTExJU0VDT05EID0gNjtcbiAgICB2YXIgV0VFSyA9IDc7XG4gICAgdmFyIFdFRUtEQVkgPSA4O1xuXG4gICAgZnVuY3Rpb24gZGF5c0luTW9udGgoeWVhciwgbW9udGgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKERhdGUuVVRDKHllYXIsIG1vbnRoICsgMSwgMCkpLmdldFVUQ0RhdGUoKTtcbiAgICB9XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbignTScsIFsnTU0nLCAyXSwgJ01vJywgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tb250aCgpICsgMTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdNTU0nLCAwLCAwLCBmdW5jdGlvbiAoZm9ybWF0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5tb250aHNTaG9ydCh0aGlzLCBmb3JtYXQpO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ01NTU0nLCAwLCAwLCBmdW5jdGlvbiAoZm9ybWF0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5tb250aHModGhpcywgZm9ybWF0KTtcbiAgICB9KTtcblxuICAgIC8vIEFMSUFTRVNcblxuICAgIGFkZFVuaXRBbGlhcygnbW9udGgnLCAnTScpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignTScsICAgIG1hdGNoMXRvMik7XG4gICAgYWRkUmVnZXhUb2tlbignTU0nLCAgIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbiAgICBhZGRSZWdleFRva2VuKCdNTU0nLCAgZnVuY3Rpb24gKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS5tb250aHNTaG9ydFJlZ2V4KGlzU3RyaWN0KTtcbiAgICB9KTtcbiAgICBhZGRSZWdleFRva2VuKCdNTU1NJywgZnVuY3Rpb24gKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS5tb250aHNSZWdleChpc1N0cmljdCk7XG4gICAgfSk7XG5cbiAgICBhZGRQYXJzZVRva2VuKFsnTScsICdNTSddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgICAgIGFycmF5W01PTlRIXSA9IHRvSW50KGlucHV0KSAtIDE7XG4gICAgfSk7XG5cbiAgICBhZGRQYXJzZVRva2VuKFsnTU1NJywgJ01NTU0nXSwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnLCB0b2tlbikge1xuICAgICAgICB2YXIgbW9udGggPSBjb25maWcuX2xvY2FsZS5tb250aHNQYXJzZShpbnB1dCwgdG9rZW4sIGNvbmZpZy5fc3RyaWN0KTtcbiAgICAgICAgLy8gaWYgd2UgZGlkbid0IGZpbmQgYSBtb250aCBuYW1lLCBtYXJrIHRoZSBkYXRlIGFzIGludmFsaWQuXG4gICAgICAgIGlmIChtb250aCAhPSBudWxsKSB7XG4gICAgICAgICAgICBhcnJheVtNT05USF0gPSBtb250aDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmludmFsaWRNb250aCA9IGlucHV0O1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBMT0NBTEVTXG5cbiAgICB2YXIgTU9OVEhTX0lOX0ZPUk1BVCA9IC9EW29EXT8oXFxbW15cXFtcXF1dKlxcXXxcXHMrKStNTU1NPy87XG4gICAgdmFyIGRlZmF1bHRMb2NhbGVNb250aHMgPSAnSmFudWFyeV9GZWJydWFyeV9NYXJjaF9BcHJpbF9NYXlfSnVuZV9KdWx5X0F1Z3VzdF9TZXB0ZW1iZXJfT2N0b2Jlcl9Ob3ZlbWJlcl9EZWNlbWJlcicuc3BsaXQoJ18nKTtcbiAgICBmdW5jdGlvbiBsb2NhbGVNb250aHMgKG0sIGZvcm1hdCkge1xuICAgICAgICByZXR1cm4gaXNBcnJheSh0aGlzLl9tb250aHMpID8gdGhpcy5fbW9udGhzW20ubW9udGgoKV0gOlxuICAgICAgICAgICAgdGhpcy5fbW9udGhzW01PTlRIU19JTl9GT1JNQVQudGVzdChmb3JtYXQpID8gJ2Zvcm1hdCcgOiAnc3RhbmRhbG9uZSddW20ubW9udGgoKV07XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRMb2NhbGVNb250aHNTaG9ydCA9ICdKYW5fRmViX01hcl9BcHJfTWF5X0p1bl9KdWxfQXVnX1NlcF9PY3RfTm92X0RlYycuc3BsaXQoJ18nKTtcbiAgICBmdW5jdGlvbiBsb2NhbGVNb250aHNTaG9ydCAobSwgZm9ybWF0KSB7XG4gICAgICAgIHJldHVybiBpc0FycmF5KHRoaXMuX21vbnRoc1Nob3J0KSA/IHRoaXMuX21vbnRoc1Nob3J0W20ubW9udGgoKV0gOlxuICAgICAgICAgICAgdGhpcy5fbW9udGhzU2hvcnRbTU9OVEhTX0lOX0ZPUk1BVC50ZXN0KGZvcm1hdCkgPyAnZm9ybWF0JyA6ICdzdGFuZGFsb25lJ11bbS5tb250aCgpXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2NhbGVNb250aHNQYXJzZSAobW9udGhOYW1lLCBmb3JtYXQsIHN0cmljdCkge1xuICAgICAgICB2YXIgaSwgbW9tLCByZWdleDtcblxuICAgICAgICBpZiAoIXRoaXMuX21vbnRoc1BhcnNlKSB7XG4gICAgICAgICAgICB0aGlzLl9tb250aHNQYXJzZSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fbG9uZ01vbnRoc1BhcnNlID0gW107XG4gICAgICAgICAgICB0aGlzLl9zaG9ydE1vbnRoc1BhcnNlID0gW107XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMTI7IGkrKykge1xuICAgICAgICAgICAgLy8gbWFrZSB0aGUgcmVnZXggaWYgd2UgZG9uJ3QgaGF2ZSBpdCBhbHJlYWR5XG4gICAgICAgICAgICBtb20gPSBjcmVhdGVfdXRjX19jcmVhdGVVVEMoWzIwMDAsIGldKTtcbiAgICAgICAgICAgIGlmIChzdHJpY3QgJiYgIXRoaXMuX2xvbmdNb250aHNQYXJzZVtpXSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2xvbmdNb250aHNQYXJzZVtpXSA9IG5ldyBSZWdFeHAoJ14nICsgdGhpcy5tb250aHMobW9tLCAnJykucmVwbGFjZSgnLicsICcnKSArICckJywgJ2knKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9zaG9ydE1vbnRoc1BhcnNlW2ldID0gbmV3IFJlZ0V4cCgnXicgKyB0aGlzLm1vbnRoc1Nob3J0KG1vbSwgJycpLnJlcGxhY2UoJy4nLCAnJykgKyAnJCcsICdpJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXN0cmljdCAmJiAhdGhpcy5fbW9udGhzUGFyc2VbaV0pIHtcbiAgICAgICAgICAgICAgICByZWdleCA9ICdeJyArIHRoaXMubW9udGhzKG1vbSwgJycpICsgJ3xeJyArIHRoaXMubW9udGhzU2hvcnQobW9tLCAnJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5fbW9udGhzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKHJlZ2V4LnJlcGxhY2UoJy4nLCAnJyksICdpJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyB0ZXN0IHRoZSByZWdleFxuICAgICAgICAgICAgaWYgKHN0cmljdCAmJiBmb3JtYXQgPT09ICdNTU1NJyAmJiB0aGlzLl9sb25nTW9udGhzUGFyc2VbaV0udGVzdChtb250aE5hbWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHN0cmljdCAmJiBmb3JtYXQgPT09ICdNTU0nICYmIHRoaXMuX3Nob3J0TW9udGhzUGFyc2VbaV0udGVzdChtb250aE5hbWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCFzdHJpY3QgJiYgdGhpcy5fbW9udGhzUGFyc2VbaV0udGVzdChtb250aE5hbWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICBmdW5jdGlvbiBzZXRNb250aCAobW9tLCB2YWx1ZSkge1xuICAgICAgICB2YXIgZGF5T2ZNb250aDtcblxuICAgICAgICBpZiAoIW1vbS5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIC8vIE5vIG9wXG4gICAgICAgICAgICByZXR1cm4gbW9tO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVE9ETzogTW92ZSB0aGlzIG91dCBvZiBoZXJlIVxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdmFsdWUgPSBtb20ubG9jYWxlRGF0YSgpLm1vbnRoc1BhcnNlKHZhbHVlKTtcbiAgICAgICAgICAgIC8vIFRPRE86IEFub3RoZXIgc2lsZW50IGZhaWx1cmU/XG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBtb207XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBkYXlPZk1vbnRoID0gTWF0aC5taW4obW9tLmRhdGUoKSwgZGF5c0luTW9udGgobW9tLnllYXIoKSwgdmFsdWUpKTtcbiAgICAgICAgbW9tLl9kWydzZXQnICsgKG1vbS5faXNVVEMgPyAnVVRDJyA6ICcnKSArICdNb250aCddKHZhbHVlLCBkYXlPZk1vbnRoKTtcbiAgICAgICAgcmV0dXJuIG1vbTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTZXRNb250aCAodmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgICAgIHNldE1vbnRoKHRoaXMsIHZhbHVlKTtcbiAgICAgICAgICAgIHV0aWxzX2hvb2tzX19ob29rcy51cGRhdGVPZmZzZXQodGhpcywgdHJ1ZSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBnZXRfc2V0X19nZXQodGhpcywgJ01vbnRoJyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXREYXlzSW5Nb250aCAoKSB7XG4gICAgICAgIHJldHVybiBkYXlzSW5Nb250aCh0aGlzLnllYXIoKSwgdGhpcy5tb250aCgpKTtcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdE1vbnRoc1Nob3J0UmVnZXggPSBtYXRjaFdvcmQ7XG4gICAgZnVuY3Rpb24gbW9udGhzU2hvcnRSZWdleCAoaXNTdHJpY3QpIHtcbiAgICAgICAgaWYgKHRoaXMuX21vbnRoc1BhcnNlRXhhY3QpIHtcbiAgICAgICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX21vbnRoc1JlZ2V4JykpIHtcbiAgICAgICAgICAgICAgICBjb21wdXRlTW9udGhzUGFyc2UuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc1N0cmljdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb250aHNTaG9ydFN0cmljdFJlZ2V4O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzU2hvcnRSZWdleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb250aHNTaG9ydFN0cmljdFJlZ2V4ICYmIGlzU3RyaWN0ID9cbiAgICAgICAgICAgICAgICB0aGlzLl9tb250aHNTaG9ydFN0cmljdFJlZ2V4IDogdGhpcy5fbW9udGhzU2hvcnRSZWdleDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBkZWZhdWx0TW9udGhzUmVnZXggPSBtYXRjaFdvcmQ7XG4gICAgZnVuY3Rpb24gbW9udGhzUmVnZXggKGlzU3RyaWN0KSB7XG4gICAgICAgIGlmICh0aGlzLl9tb250aHNQYXJzZUV4YWN0KSB7XG4gICAgICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ19tb250aHNSZWdleCcpKSB7XG4gICAgICAgICAgICAgICAgY29tcHV0ZU1vbnRoc1BhcnNlLmNhbGwodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNTdHJpY3QpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzU3RyaWN0UmVnZXg7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb250aHNSZWdleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb250aHNTdHJpY3RSZWdleCAmJiBpc1N0cmljdCA/XG4gICAgICAgICAgICAgICAgdGhpcy5fbW9udGhzU3RyaWN0UmVnZXggOiB0aGlzLl9tb250aHNSZWdleDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbXB1dGVNb250aHNQYXJzZSAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIGNtcExlblJldihhLCBiKSB7XG4gICAgICAgICAgICByZXR1cm4gYi5sZW5ndGggLSBhLmxlbmd0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzaG9ydFBpZWNlcyA9IFtdLCBsb25nUGllY2VzID0gW10sIG1peGVkUGllY2VzID0gW10sXG4gICAgICAgICAgICBpLCBtb207XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCAxMjsgaSsrKSB7XG4gICAgICAgICAgICAvLyBtYWtlIHRoZSByZWdleCBpZiB3ZSBkb24ndCBoYXZlIGl0IGFscmVhZHlcbiAgICAgICAgICAgIG1vbSA9IGNyZWF0ZV91dGNfX2NyZWF0ZVVUQyhbMjAwMCwgaV0pO1xuICAgICAgICAgICAgc2hvcnRQaWVjZXMucHVzaCh0aGlzLm1vbnRoc1Nob3J0KG1vbSwgJycpKTtcbiAgICAgICAgICAgIGxvbmdQaWVjZXMucHVzaCh0aGlzLm1vbnRocyhtb20sICcnKSk7XG4gICAgICAgICAgICBtaXhlZFBpZWNlcy5wdXNoKHRoaXMubW9udGhzKG1vbSwgJycpKTtcbiAgICAgICAgICAgIG1peGVkUGllY2VzLnB1c2godGhpcy5tb250aHNTaG9ydChtb20sICcnKSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU29ydGluZyBtYWtlcyBzdXJlIGlmIG9uZSBtb250aCAob3IgYWJicikgaXMgYSBwcmVmaXggb2YgYW5vdGhlciBpdFxuICAgICAgICAvLyB3aWxsIG1hdGNoIHRoZSBsb25nZXIgcGllY2UuXG4gICAgICAgIHNob3J0UGllY2VzLnNvcnQoY21wTGVuUmV2KTtcbiAgICAgICAgbG9uZ1BpZWNlcy5zb3J0KGNtcExlblJldik7XG4gICAgICAgIG1peGVkUGllY2VzLnNvcnQoY21wTGVuUmV2KTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDEyOyBpKyspIHtcbiAgICAgICAgICAgIHNob3J0UGllY2VzW2ldID0gcmVnZXhFc2NhcGUoc2hvcnRQaWVjZXNbaV0pO1xuICAgICAgICAgICAgbG9uZ1BpZWNlc1tpXSA9IHJlZ2V4RXNjYXBlKGxvbmdQaWVjZXNbaV0pO1xuICAgICAgICAgICAgbWl4ZWRQaWVjZXNbaV0gPSByZWdleEVzY2FwZShtaXhlZFBpZWNlc1tpXSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9tb250aHNSZWdleCA9IG5ldyBSZWdFeHAoJ14oJyArIG1peGVkUGllY2VzLmpvaW4oJ3wnKSArICcpJywgJ2knKTtcbiAgICAgICAgdGhpcy5fbW9udGhzU2hvcnRSZWdleCA9IHRoaXMuX21vbnRoc1JlZ2V4O1xuICAgICAgICB0aGlzLl9tb250aHNTdHJpY3RSZWdleCA9IG5ldyBSZWdFeHAoJ14oJyArIGxvbmdQaWVjZXMuam9pbignfCcpICsgJykkJywgJ2knKTtcbiAgICAgICAgdGhpcy5fbW9udGhzU2hvcnRTdHJpY3RSZWdleCA9IG5ldyBSZWdFeHAoJ14oJyArIHNob3J0UGllY2VzLmpvaW4oJ3wnKSArICcpJCcsICdpJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2hlY2tPdmVyZmxvdyAobSkge1xuICAgICAgICB2YXIgb3ZlcmZsb3c7XG4gICAgICAgIHZhciBhID0gbS5fYTtcblxuICAgICAgICBpZiAoYSAmJiBnZXRQYXJzaW5nRmxhZ3MobSkub3ZlcmZsb3cgPT09IC0yKSB7XG4gICAgICAgICAgICBvdmVyZmxvdyA9XG4gICAgICAgICAgICAgICAgYVtNT05USF0gICAgICAgPCAwIHx8IGFbTU9OVEhdICAgICAgID4gMTEgID8gTU9OVEggOlxuICAgICAgICAgICAgICAgIGFbREFURV0gICAgICAgIDwgMSB8fCBhW0RBVEVdICAgICAgICA+IGRheXNJbk1vbnRoKGFbWUVBUl0sIGFbTU9OVEhdKSA/IERBVEUgOlxuICAgICAgICAgICAgICAgIGFbSE9VUl0gICAgICAgIDwgMCB8fCBhW0hPVVJdICAgICAgICA+IDI0IHx8IChhW0hPVVJdID09PSAyNCAmJiAoYVtNSU5VVEVdICE9PSAwIHx8IGFbU0VDT05EXSAhPT0gMCB8fCBhW01JTExJU0VDT05EXSAhPT0gMCkpID8gSE9VUiA6XG4gICAgICAgICAgICAgICAgYVtNSU5VVEVdICAgICAgPCAwIHx8IGFbTUlOVVRFXSAgICAgID4gNTkgID8gTUlOVVRFIDpcbiAgICAgICAgICAgICAgICBhW1NFQ09ORF0gICAgICA8IDAgfHwgYVtTRUNPTkRdICAgICAgPiA1OSAgPyBTRUNPTkQgOlxuICAgICAgICAgICAgICAgIGFbTUlMTElTRUNPTkRdIDwgMCB8fCBhW01JTExJU0VDT05EXSA+IDk5OSA/IE1JTExJU0VDT05EIDpcbiAgICAgICAgICAgICAgICAtMTtcblxuICAgICAgICAgICAgaWYgKGdldFBhcnNpbmdGbGFncyhtKS5fb3ZlcmZsb3dEYXlPZlllYXIgJiYgKG92ZXJmbG93IDwgWUVBUiB8fCBvdmVyZmxvdyA+IERBVEUpKSB7XG4gICAgICAgICAgICAgICAgb3ZlcmZsb3cgPSBEQVRFO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGdldFBhcnNpbmdGbGFncyhtKS5fb3ZlcmZsb3dXZWVrcyAmJiBvdmVyZmxvdyA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICBvdmVyZmxvdyA9IFdFRUs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZ2V0UGFyc2luZ0ZsYWdzKG0pLl9vdmVyZmxvd1dlZWtkYXkgJiYgb3ZlcmZsb3cgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgb3ZlcmZsb3cgPSBXRUVLREFZO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MobSkub3ZlcmZsb3cgPSBvdmVyZmxvdztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBtO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHdhcm4obXNnKSB7XG4gICAgICAgIGlmICh1dGlsc19ob29rc19faG9va3Muc3VwcHJlc3NEZXByZWNhdGlvbldhcm5pbmdzID09PSBmYWxzZSAmJlxuICAgICAgICAgICAgICAgICh0eXBlb2YgY29uc29sZSAhPT0gICd1bmRlZmluZWQnKSAmJiBjb25zb2xlLndhcm4pIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignRGVwcmVjYXRpb24gd2FybmluZzogJyArIG1zZyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkZXByZWNhdGUobXNnLCBmbikge1xuICAgICAgICB2YXIgZmlyc3RUaW1lID0gdHJ1ZTtcblxuICAgICAgICByZXR1cm4gZXh0ZW5kKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChmaXJzdFRpbWUpIHtcbiAgICAgICAgICAgICAgICB3YXJuKG1zZyArICdcXG5Bcmd1bWVudHM6ICcgKyBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpLmpvaW4oJywgJykgKyAnXFxuJyArIChuZXcgRXJyb3IoKSkuc3RhY2spO1xuICAgICAgICAgICAgICAgIGZpcnN0VGltZSA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH0sIGZuKTtcbiAgICB9XG5cbiAgICB2YXIgZGVwcmVjYXRpb25zID0ge307XG5cbiAgICBmdW5jdGlvbiBkZXByZWNhdGVTaW1wbGUobmFtZSwgbXNnKSB7XG4gICAgICAgIGlmICghZGVwcmVjYXRpb25zW25hbWVdKSB7XG4gICAgICAgICAgICB3YXJuKG1zZyk7XG4gICAgICAgICAgICBkZXByZWNhdGlvbnNbbmFtZV0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdXRpbHNfaG9va3NfX2hvb2tzLnN1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5ncyA9IGZhbHNlO1xuXG4gICAgLy8gaXNvIDg2MDEgcmVnZXhcbiAgICAvLyAwMDAwLTAwLTAwIDAwMDAtVzAwIG9yIDAwMDAtVzAwLTAgKyBUICsgMDAgb3IgMDA6MDAgb3IgMDA6MDA6MDAgb3IgMDA6MDA6MDAuMDAwICsgKzAwOjAwIG9yICswMDAwIG9yICswMClcbiAgICB2YXIgZXh0ZW5kZWRJc29SZWdleCA9IC9eXFxzKigoPzpbKy1dXFxkezZ9fFxcZHs0fSktKD86XFxkXFxkLVxcZFxcZHxXXFxkXFxkLVxcZHxXXFxkXFxkfFxcZFxcZFxcZHxcXGRcXGQpKSg/OihUfCApKFxcZFxcZCg/OjpcXGRcXGQoPzo6XFxkXFxkKD86Wy4sXVxcZCspPyk/KT8pKFtcXCtcXC1dXFxkXFxkKD86Oj9cXGRcXGQpP3xcXHMqWik/KT8vO1xuICAgIHZhciBiYXNpY0lzb1JlZ2V4ID0gL15cXHMqKCg/OlsrLV1cXGR7Nn18XFxkezR9KSg/OlxcZFxcZFxcZFxcZHxXXFxkXFxkXFxkfFdcXGRcXGR8XFxkXFxkXFxkfFxcZFxcZCkpKD86KFR8ICkoXFxkXFxkKD86XFxkXFxkKD86XFxkXFxkKD86Wy4sXVxcZCspPyk/KT8pKFtcXCtcXC1dXFxkXFxkKD86Oj9cXGRcXGQpP3xcXHMqWik/KT8vO1xuXG4gICAgdmFyIHR6UmVnZXggPSAvWnxbKy1dXFxkXFxkKD86Oj9cXGRcXGQpPy87XG5cbiAgICB2YXIgaXNvRGF0ZXMgPSBbXG4gICAgICAgIFsnWVlZWVlZLU1NLUREJywgL1srLV1cXGR7Nn0tXFxkXFxkLVxcZFxcZC9dLFxuICAgICAgICBbJ1lZWVktTU0tREQnLCAvXFxkezR9LVxcZFxcZC1cXGRcXGQvXSxcbiAgICAgICAgWydHR0dHLVtXXVdXLUUnLCAvXFxkezR9LVdcXGRcXGQtXFxkL10sXG4gICAgICAgIFsnR0dHRy1bV11XVycsIC9cXGR7NH0tV1xcZFxcZC8sIGZhbHNlXSxcbiAgICAgICAgWydZWVlZLURERCcsIC9cXGR7NH0tXFxkezN9L10sXG4gICAgICAgIFsnWVlZWS1NTScsIC9cXGR7NH0tXFxkXFxkLywgZmFsc2VdLFxuICAgICAgICBbJ1lZWVlZWU1NREQnLCAvWystXVxcZHsxMH0vXSxcbiAgICAgICAgWydZWVlZTU1ERCcsIC9cXGR7OH0vXSxcbiAgICAgICAgLy8gWVlZWU1NIGlzIE5PVCBhbGxvd2VkIGJ5IHRoZSBzdGFuZGFyZFxuICAgICAgICBbJ0dHR0dbV11XV0UnLCAvXFxkezR9V1xcZHszfS9dLFxuICAgICAgICBbJ0dHR0dbV11XVycsIC9cXGR7NH1XXFxkezJ9LywgZmFsc2VdLFxuICAgICAgICBbJ1lZWVlEREQnLCAvXFxkezd9L11cbiAgICBdO1xuXG4gICAgLy8gaXNvIHRpbWUgZm9ybWF0cyBhbmQgcmVnZXhlc1xuICAgIHZhciBpc29UaW1lcyA9IFtcbiAgICAgICAgWydISDptbTpzcy5TU1NTJywgL1xcZFxcZDpcXGRcXGQ6XFxkXFxkXFwuXFxkKy9dLFxuICAgICAgICBbJ0hIOm1tOnNzLFNTU1MnLCAvXFxkXFxkOlxcZFxcZDpcXGRcXGQsXFxkKy9dLFxuICAgICAgICBbJ0hIOm1tOnNzJywgL1xcZFxcZDpcXGRcXGQ6XFxkXFxkL10sXG4gICAgICAgIFsnSEg6bW0nLCAvXFxkXFxkOlxcZFxcZC9dLFxuICAgICAgICBbJ0hIbW1zcy5TU1NTJywgL1xcZFxcZFxcZFxcZFxcZFxcZFxcLlxcZCsvXSxcbiAgICAgICAgWydISG1tc3MsU1NTUycsIC9cXGRcXGRcXGRcXGRcXGRcXGQsXFxkKy9dLFxuICAgICAgICBbJ0hIbW1zcycsIC9cXGRcXGRcXGRcXGRcXGRcXGQvXSxcbiAgICAgICAgWydISG1tJywgL1xcZFxcZFxcZFxcZC9dLFxuICAgICAgICBbJ0hIJywgL1xcZFxcZC9dXG4gICAgXTtcblxuICAgIHZhciBhc3BOZXRKc29uUmVnZXggPSAvXlxcLz9EYXRlXFwoKFxcLT9cXGQrKS9pO1xuXG4gICAgLy8gZGF0ZSBmcm9tIGlzbyBmb3JtYXRcbiAgICBmdW5jdGlvbiBjb25maWdGcm9tSVNPKGNvbmZpZykge1xuICAgICAgICB2YXIgaSwgbCxcbiAgICAgICAgICAgIHN0cmluZyA9IGNvbmZpZy5faSxcbiAgICAgICAgICAgIG1hdGNoID0gZXh0ZW5kZWRJc29SZWdleC5leGVjKHN0cmluZykgfHwgYmFzaWNJc29SZWdleC5leGVjKHN0cmluZyksXG4gICAgICAgICAgICBhbGxvd1RpbWUsIGRhdGVGb3JtYXQsIHRpbWVGb3JtYXQsIHR6Rm9ybWF0O1xuXG4gICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuaXNvID0gdHJ1ZTtcblxuICAgICAgICAgICAgZm9yIChpID0gMCwgbCA9IGlzb0RhdGVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChpc29EYXRlc1tpXVsxXS5leGVjKG1hdGNoWzFdKSkge1xuICAgICAgICAgICAgICAgICAgICBkYXRlRm9ybWF0ID0gaXNvRGF0ZXNbaV1bMF07XG4gICAgICAgICAgICAgICAgICAgIGFsbG93VGltZSA9IGlzb0RhdGVzW2ldWzJdICE9PSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRhdGVGb3JtYXQgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtYXRjaFszXSkge1xuICAgICAgICAgICAgICAgIGZvciAoaSA9IDAsIGwgPSBpc29UaW1lcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzb1RpbWVzW2ldWzFdLmV4ZWMobWF0Y2hbM10pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBtYXRjaFsyXSBzaG91bGQgYmUgJ1QnIG9yIHNwYWNlXG4gICAgICAgICAgICAgICAgICAgICAgICB0aW1lRm9ybWF0ID0gKG1hdGNoWzJdIHx8ICcgJykgKyBpc29UaW1lc1tpXVswXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0aW1lRm9ybWF0ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWFsbG93VGltZSAmJiB0aW1lRm9ybWF0ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWF0Y2hbNF0pIHtcbiAgICAgICAgICAgICAgICBpZiAodHpSZWdleC5leGVjKG1hdGNoWzRdKSkge1xuICAgICAgICAgICAgICAgICAgICB0ekZvcm1hdCA9ICdaJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbmZpZy5fZiA9IGRhdGVGb3JtYXQgKyAodGltZUZvcm1hdCB8fCAnJykgKyAodHpGb3JtYXQgfHwgJycpO1xuICAgICAgICAgICAgY29uZmlnRnJvbVN0cmluZ0FuZEZvcm1hdChjb25maWcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBkYXRlIGZyb20gaXNvIGZvcm1hdCBvciBmYWxsYmFja1xuICAgIGZ1bmN0aW9uIGNvbmZpZ0Zyb21TdHJpbmcoY29uZmlnKSB7XG4gICAgICAgIHZhciBtYXRjaGVkID0gYXNwTmV0SnNvblJlZ2V4LmV4ZWMoY29uZmlnLl9pKTtcblxuICAgICAgICBpZiAobWF0Y2hlZCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoK21hdGNoZWRbMV0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uZmlnRnJvbUlTTyhjb25maWcpO1xuICAgICAgICBpZiAoY29uZmlnLl9pc1ZhbGlkID09PSBmYWxzZSkge1xuICAgICAgICAgICAgZGVsZXRlIGNvbmZpZy5faXNWYWxpZDtcbiAgICAgICAgICAgIHV0aWxzX2hvb2tzX19ob29rcy5jcmVhdGVGcm9tSW5wdXRGYWxsYmFjayhjb25maWcpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdXRpbHNfaG9va3NfX2hvb2tzLmNyZWF0ZUZyb21JbnB1dEZhbGxiYWNrID0gZGVwcmVjYXRlKFxuICAgICAgICAnbW9tZW50IGNvbnN0cnVjdGlvbiBmYWxscyBiYWNrIHRvIGpzIERhdGUuIFRoaXMgaXMgJyArXG4gICAgICAgICdkaXNjb3VyYWdlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHVwY29taW5nIG1ham9yICcgK1xuICAgICAgICAncmVsZWFzZS4gUGxlYXNlIHJlZmVyIHRvICcgK1xuICAgICAgICAnaHR0cHM6Ly9naXRodWIuY29tL21vbWVudC9tb21lbnQvaXNzdWVzLzE0MDcgZm9yIG1vcmUgaW5mby4nLFxuICAgICAgICBmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZShjb25maWcuX2kgKyAoY29uZmlnLl91c2VVVEMgPyAnIFVUQycgOiAnJykpO1xuICAgICAgICB9XG4gICAgKTtcblxuICAgIGZ1bmN0aW9uIGNyZWF0ZURhdGUgKHksIG0sIGQsIGgsIE0sIHMsIG1zKSB7XG4gICAgICAgIC8vY2FuJ3QganVzdCBhcHBseSgpIHRvIGNyZWF0ZSBhIGRhdGU6XG4gICAgICAgIC8vaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xODEzNDgvaW5zdGFudGlhdGluZy1hLWphdmFzY3JpcHQtb2JqZWN0LWJ5LWNhbGxpbmctcHJvdG90eXBlLWNvbnN0cnVjdG9yLWFwcGx5XG4gICAgICAgIHZhciBkYXRlID0gbmV3IERhdGUoeSwgbSwgZCwgaCwgTSwgcywgbXMpO1xuXG4gICAgICAgIC8vdGhlIGRhdGUgY29uc3RydWN0b3IgcmVtYXBzIHllYXJzIDAtOTkgdG8gMTkwMC0xOTk5XG4gICAgICAgIGlmICh5IDwgMTAwICYmIHkgPj0gMCAmJiBpc0Zpbml0ZShkYXRlLmdldEZ1bGxZZWFyKCkpKSB7XG4gICAgICAgICAgICBkYXRlLnNldEZ1bGxZZWFyKHkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkYXRlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZVVUQ0RhdGUgKHkpIHtcbiAgICAgICAgdmFyIGRhdGUgPSBuZXcgRGF0ZShEYXRlLlVUQy5hcHBseShudWxsLCBhcmd1bWVudHMpKTtcblxuICAgICAgICAvL3RoZSBEYXRlLlVUQyBmdW5jdGlvbiByZW1hcHMgeWVhcnMgMC05OSB0byAxOTAwLTE5OTlcbiAgICAgICAgaWYgKHkgPCAxMDAgJiYgeSA+PSAwICYmIGlzRmluaXRlKGRhdGUuZ2V0VVRDRnVsbFllYXIoKSkpIHtcbiAgICAgICAgICAgIGRhdGUuc2V0VVRDRnVsbFllYXIoeSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfVxuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ1knLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB5ID0gdGhpcy55ZWFyKCk7XG4gICAgICAgIHJldHVybiB5IDw9IDk5OTkgPyAnJyArIHkgOiAnKycgKyB5O1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydZWScsIDJdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnllYXIoKSAlIDEwMDtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnWVlZWScsICAgNF0sICAgICAgIDAsICd5ZWFyJyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydZWVlZWScsICA1XSwgICAgICAgMCwgJ3llYXInKTtcbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1lZWVlZWScsIDYsIHRydWVdLCAwLCAneWVhcicpO1xuXG4gICAgLy8gQUxJQVNFU1xuXG4gICAgYWRkVW5pdEFsaWFzKCd5ZWFyJywgJ3knKTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ1knLCAgICAgIG1hdGNoU2lnbmVkKTtcbiAgICBhZGRSZWdleFRva2VuKCdZWScsICAgICBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUmVnZXhUb2tlbignWVlZWScsICAgbWF0Y2gxdG80LCBtYXRjaDQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1lZWVlZJywgIG1hdGNoMXRvNiwgbWF0Y2g2KTtcbiAgICBhZGRSZWdleFRva2VuKCdZWVlZWVknLCBtYXRjaDF0bzYsIG1hdGNoNik7XG5cbiAgICBhZGRQYXJzZVRva2VuKFsnWVlZWVknLCAnWVlZWVlZJ10sIFlFQVIpO1xuICAgIGFkZFBhcnNlVG9rZW4oJ1lZWVknLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgICAgIGFycmF5W1lFQVJdID0gaW5wdXQubGVuZ3RoID09PSAyID8gdXRpbHNfaG9va3NfX2hvb2tzLnBhcnNlVHdvRGlnaXRZZWFyKGlucHV0KSA6IHRvSW50KGlucHV0KTtcbiAgICB9KTtcbiAgICBhZGRQYXJzZVRva2VuKCdZWScsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICAgICAgYXJyYXlbWUVBUl0gPSB1dGlsc19ob29rc19faG9va3MucGFyc2VUd29EaWdpdFllYXIoaW5wdXQpO1xuICAgIH0pO1xuICAgIGFkZFBhcnNlVG9rZW4oJ1knLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgICAgIGFycmF5W1lFQVJdID0gcGFyc2VJbnQoaW5wdXQsIDEwKTtcbiAgICB9KTtcblxuICAgIC8vIEhFTFBFUlNcblxuICAgIGZ1bmN0aW9uIGRheXNJblllYXIoeWVhcikge1xuICAgICAgICByZXR1cm4gaXNMZWFwWWVhcih5ZWFyKSA/IDM2NiA6IDM2NTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0xlYXBZZWFyKHllYXIpIHtcbiAgICAgICAgcmV0dXJuICh5ZWFyICUgNCA9PT0gMCAmJiB5ZWFyICUgMTAwICE9PSAwKSB8fCB5ZWFyICUgNDAwID09PSAwO1xuICAgIH1cblxuICAgIC8vIEhPT0tTXG5cbiAgICB1dGlsc19ob29rc19faG9va3MucGFyc2VUd29EaWdpdFllYXIgPSBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIHRvSW50KGlucHV0KSArICh0b0ludChpbnB1dCkgPiA2OCA/IDE5MDAgOiAyMDAwKTtcbiAgICB9O1xuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgdmFyIGdldFNldFllYXIgPSBtYWtlR2V0U2V0KCdGdWxsWWVhcicsIGZhbHNlKTtcblxuICAgIGZ1bmN0aW9uIGdldElzTGVhcFllYXIgKCkge1xuICAgICAgICByZXR1cm4gaXNMZWFwWWVhcih0aGlzLnllYXIoKSk7XG4gICAgfVxuXG4gICAgLy8gc3RhcnQtb2YtZmlyc3Qtd2VlayAtIHN0YXJ0LW9mLXllYXJcbiAgICBmdW5jdGlvbiBmaXJzdFdlZWtPZmZzZXQoeWVhciwgZG93LCBkb3kpIHtcbiAgICAgICAgdmFyIC8vIGZpcnN0LXdlZWsgZGF5IC0tIHdoaWNoIGphbnVhcnkgaXMgYWx3YXlzIGluIHRoZSBmaXJzdCB3ZWVrICg0IGZvciBpc28sIDEgZm9yIG90aGVyKVxuICAgICAgICAgICAgZndkID0gNyArIGRvdyAtIGRveSxcbiAgICAgICAgICAgIC8vIGZpcnN0LXdlZWsgZGF5IGxvY2FsIHdlZWtkYXkgLS0gd2hpY2ggbG9jYWwgd2Vla2RheSBpcyBmd2RcbiAgICAgICAgICAgIGZ3ZGx3ID0gKDcgKyBjcmVhdGVVVENEYXRlKHllYXIsIDAsIGZ3ZCkuZ2V0VVRDRGF5KCkgLSBkb3cpICUgNztcblxuICAgICAgICByZXR1cm4gLWZ3ZGx3ICsgZndkIC0gMTtcbiAgICB9XG5cbiAgICAvL2h0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSVNPX3dlZWtfZGF0ZSNDYWxjdWxhdGluZ19hX2RhdGVfZ2l2ZW5fdGhlX3llYXIuMkNfd2Vla19udW1iZXJfYW5kX3dlZWtkYXlcbiAgICBmdW5jdGlvbiBkYXlPZlllYXJGcm9tV2Vla3MoeWVhciwgd2Vlaywgd2Vla2RheSwgZG93LCBkb3kpIHtcbiAgICAgICAgdmFyIGxvY2FsV2Vla2RheSA9ICg3ICsgd2Vla2RheSAtIGRvdykgJSA3LFxuICAgICAgICAgICAgd2Vla09mZnNldCA9IGZpcnN0V2Vla09mZnNldCh5ZWFyLCBkb3csIGRveSksXG4gICAgICAgICAgICBkYXlPZlllYXIgPSAxICsgNyAqICh3ZWVrIC0gMSkgKyBsb2NhbFdlZWtkYXkgKyB3ZWVrT2Zmc2V0LFxuICAgICAgICAgICAgcmVzWWVhciwgcmVzRGF5T2ZZZWFyO1xuXG4gICAgICAgIGlmIChkYXlPZlllYXIgPD0gMCkge1xuICAgICAgICAgICAgcmVzWWVhciA9IHllYXIgLSAxO1xuICAgICAgICAgICAgcmVzRGF5T2ZZZWFyID0gZGF5c0luWWVhcihyZXNZZWFyKSArIGRheU9mWWVhcjtcbiAgICAgICAgfSBlbHNlIGlmIChkYXlPZlllYXIgPiBkYXlzSW5ZZWFyKHllYXIpKSB7XG4gICAgICAgICAgICByZXNZZWFyID0geWVhciArIDE7XG4gICAgICAgICAgICByZXNEYXlPZlllYXIgPSBkYXlPZlllYXIgLSBkYXlzSW5ZZWFyKHllYXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzWWVhciA9IHllYXI7XG4gICAgICAgICAgICByZXNEYXlPZlllYXIgPSBkYXlPZlllYXI7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeWVhcjogcmVzWWVhcixcbiAgICAgICAgICAgIGRheU9mWWVhcjogcmVzRGF5T2ZZZWFyXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gd2Vla09mWWVhcihtb20sIGRvdywgZG95KSB7XG4gICAgICAgIHZhciB3ZWVrT2Zmc2V0ID0gZmlyc3RXZWVrT2Zmc2V0KG1vbS55ZWFyKCksIGRvdywgZG95KSxcbiAgICAgICAgICAgIHdlZWsgPSBNYXRoLmZsb29yKChtb20uZGF5T2ZZZWFyKCkgLSB3ZWVrT2Zmc2V0IC0gMSkgLyA3KSArIDEsXG4gICAgICAgICAgICByZXNXZWVrLCByZXNZZWFyO1xuXG4gICAgICAgIGlmICh3ZWVrIDwgMSkge1xuICAgICAgICAgICAgcmVzWWVhciA9IG1vbS55ZWFyKCkgLSAxO1xuICAgICAgICAgICAgcmVzV2VlayA9IHdlZWsgKyB3ZWVrc0luWWVhcihyZXNZZWFyLCBkb3csIGRveSk7XG4gICAgICAgIH0gZWxzZSBpZiAod2VlayA+IHdlZWtzSW5ZZWFyKG1vbS55ZWFyKCksIGRvdywgZG95KSkge1xuICAgICAgICAgICAgcmVzV2VlayA9IHdlZWsgLSB3ZWVrc0luWWVhcihtb20ueWVhcigpLCBkb3csIGRveSk7XG4gICAgICAgICAgICByZXNZZWFyID0gbW9tLnllYXIoKSArIDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXNZZWFyID0gbW9tLnllYXIoKTtcbiAgICAgICAgICAgIHJlc1dlZWsgPSB3ZWVrO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHdlZWs6IHJlc1dlZWssXG4gICAgICAgICAgICB5ZWFyOiByZXNZZWFyXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gd2Vla3NJblllYXIoeWVhciwgZG93LCBkb3kpIHtcbiAgICAgICAgdmFyIHdlZWtPZmZzZXQgPSBmaXJzdFdlZWtPZmZzZXQoeWVhciwgZG93LCBkb3kpLFxuICAgICAgICAgICAgd2Vla09mZnNldE5leHQgPSBmaXJzdFdlZWtPZmZzZXQoeWVhciArIDEsIGRvdywgZG95KTtcbiAgICAgICAgcmV0dXJuIChkYXlzSW5ZZWFyKHllYXIpIC0gd2Vla09mZnNldCArIHdlZWtPZmZzZXROZXh0KSAvIDc7XG4gICAgfVxuXG4gICAgLy8gUGljayB0aGUgZmlyc3QgZGVmaW5lZCBvZiB0d28gb3IgdGhyZWUgYXJndW1lbnRzLlxuICAgIGZ1bmN0aW9uIGRlZmF1bHRzKGEsIGIsIGMpIHtcbiAgICAgICAgaWYgKGEgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGIgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3VycmVudERhdGVBcnJheShjb25maWcpIHtcbiAgICAgICAgLy8gaG9va3MgaXMgYWN0dWFsbHkgdGhlIGV4cG9ydGVkIG1vbWVudCBvYmplY3RcbiAgICAgICAgdmFyIG5vd1ZhbHVlID0gbmV3IERhdGUodXRpbHNfaG9va3NfX2hvb2tzLm5vdygpKTtcbiAgICAgICAgaWYgKGNvbmZpZy5fdXNlVVRDKSB7XG4gICAgICAgICAgICByZXR1cm4gW25vd1ZhbHVlLmdldFVUQ0Z1bGxZZWFyKCksIG5vd1ZhbHVlLmdldFVUQ01vbnRoKCksIG5vd1ZhbHVlLmdldFVUQ0RhdGUoKV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFtub3dWYWx1ZS5nZXRGdWxsWWVhcigpLCBub3dWYWx1ZS5nZXRNb250aCgpLCBub3dWYWx1ZS5nZXREYXRlKCldO1xuICAgIH1cblxuICAgIC8vIGNvbnZlcnQgYW4gYXJyYXkgdG8gYSBkYXRlLlxuICAgIC8vIHRoZSBhcnJheSBzaG91bGQgbWlycm9yIHRoZSBwYXJhbWV0ZXJzIGJlbG93XG4gICAgLy8gbm90ZTogYWxsIHZhbHVlcyBwYXN0IHRoZSB5ZWFyIGFyZSBvcHRpb25hbCBhbmQgd2lsbCBkZWZhdWx0IHRvIHRoZSBsb3dlc3QgcG9zc2libGUgdmFsdWUuXG4gICAgLy8gW3llYXIsIG1vbnRoLCBkYXkgLCBob3VyLCBtaW51dGUsIHNlY29uZCwgbWlsbGlzZWNvbmRdXG4gICAgZnVuY3Rpb24gY29uZmlnRnJvbUFycmF5IChjb25maWcpIHtcbiAgICAgICAgdmFyIGksIGRhdGUsIGlucHV0ID0gW10sIGN1cnJlbnREYXRlLCB5ZWFyVG9Vc2U7XG5cbiAgICAgICAgaWYgKGNvbmZpZy5fZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY3VycmVudERhdGUgPSBjdXJyZW50RGF0ZUFycmF5KGNvbmZpZyk7XG5cbiAgICAgICAgLy9jb21wdXRlIGRheSBvZiB0aGUgeWVhciBmcm9tIHdlZWtzIGFuZCB3ZWVrZGF5c1xuICAgICAgICBpZiAoY29uZmlnLl93ICYmIGNvbmZpZy5fYVtEQVRFXSA9PSBudWxsICYmIGNvbmZpZy5fYVtNT05USF0gPT0gbnVsbCkge1xuICAgICAgICAgICAgZGF5T2ZZZWFyRnJvbVdlZWtJbmZvKGNvbmZpZyk7XG4gICAgICAgIH1cblxuICAgICAgICAvL2lmIHRoZSBkYXkgb2YgdGhlIHllYXIgaXMgc2V0LCBmaWd1cmUgb3V0IHdoYXQgaXQgaXNcbiAgICAgICAgaWYgKGNvbmZpZy5fZGF5T2ZZZWFyKSB7XG4gICAgICAgICAgICB5ZWFyVG9Vc2UgPSBkZWZhdWx0cyhjb25maWcuX2FbWUVBUl0sIGN1cnJlbnREYXRlW1lFQVJdKTtcblxuICAgICAgICAgICAgaWYgKGNvbmZpZy5fZGF5T2ZZZWFyID4gZGF5c0luWWVhcih5ZWFyVG9Vc2UpKSB7XG4gICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuX292ZXJmbG93RGF5T2ZZZWFyID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZGF0ZSA9IGNyZWF0ZVVUQ0RhdGUoeWVhclRvVXNlLCAwLCBjb25maWcuX2RheU9mWWVhcik7XG4gICAgICAgICAgICBjb25maWcuX2FbTU9OVEhdID0gZGF0ZS5nZXRVVENNb250aCgpO1xuICAgICAgICAgICAgY29uZmlnLl9hW0RBVEVdID0gZGF0ZS5nZXRVVENEYXRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBEZWZhdWx0IHRvIGN1cnJlbnQgZGF0ZS5cbiAgICAgICAgLy8gKiBpZiBubyB5ZWFyLCBtb250aCwgZGF5IG9mIG1vbnRoIGFyZSBnaXZlbiwgZGVmYXVsdCB0byB0b2RheVxuICAgICAgICAvLyAqIGlmIGRheSBvZiBtb250aCBpcyBnaXZlbiwgZGVmYXVsdCBtb250aCBhbmQgeWVhclxuICAgICAgICAvLyAqIGlmIG1vbnRoIGlzIGdpdmVuLCBkZWZhdWx0IG9ubHkgeWVhclxuICAgICAgICAvLyAqIGlmIHllYXIgaXMgZ2l2ZW4sIGRvbid0IGRlZmF1bHQgYW55dGhpbmdcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDMgJiYgY29uZmlnLl9hW2ldID09IG51bGw7ICsraSkge1xuICAgICAgICAgICAgY29uZmlnLl9hW2ldID0gaW5wdXRbaV0gPSBjdXJyZW50RGF0ZVtpXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFplcm8gb3V0IHdoYXRldmVyIHdhcyBub3QgZGVmYXVsdGVkLCBpbmNsdWRpbmcgdGltZVxuICAgICAgICBmb3IgKDsgaSA8IDc7IGkrKykge1xuICAgICAgICAgICAgY29uZmlnLl9hW2ldID0gaW5wdXRbaV0gPSAoY29uZmlnLl9hW2ldID09IG51bGwpID8gKGkgPT09IDIgPyAxIDogMCkgOiBjb25maWcuX2FbaV07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDaGVjayBmb3IgMjQ6MDA6MDAuMDAwXG4gICAgICAgIGlmIChjb25maWcuX2FbSE9VUl0gPT09IDI0ICYmXG4gICAgICAgICAgICAgICAgY29uZmlnLl9hW01JTlVURV0gPT09IDAgJiZcbiAgICAgICAgICAgICAgICBjb25maWcuX2FbU0VDT05EXSA9PT0gMCAmJlxuICAgICAgICAgICAgICAgIGNvbmZpZy5fYVtNSUxMSVNFQ09ORF0gPT09IDApIHtcbiAgICAgICAgICAgIGNvbmZpZy5fbmV4dERheSA9IHRydWU7XG4gICAgICAgICAgICBjb25maWcuX2FbSE9VUl0gPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uZmlnLl9kID0gKGNvbmZpZy5fdXNlVVRDID8gY3JlYXRlVVRDRGF0ZSA6IGNyZWF0ZURhdGUpLmFwcGx5KG51bGwsIGlucHV0KTtcbiAgICAgICAgLy8gQXBwbHkgdGltZXpvbmUgb2Zmc2V0IGZyb20gaW5wdXQuIFRoZSBhY3R1YWwgdXRjT2Zmc2V0IGNhbiBiZSBjaGFuZ2VkXG4gICAgICAgIC8vIHdpdGggcGFyc2Vab25lLlxuICAgICAgICBpZiAoY29uZmlnLl90em0gIT0gbnVsbCkge1xuICAgICAgICAgICAgY29uZmlnLl9kLnNldFVUQ01pbnV0ZXMoY29uZmlnLl9kLmdldFVUQ01pbnV0ZXMoKSAtIGNvbmZpZy5fdHptKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb25maWcuX25leHREYXkpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fYVtIT1VSXSA9IDI0O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGF5T2ZZZWFyRnJvbVdlZWtJbmZvKGNvbmZpZykge1xuICAgICAgICB2YXIgdywgd2Vla1llYXIsIHdlZWssIHdlZWtkYXksIGRvdywgZG95LCB0ZW1wLCB3ZWVrZGF5T3ZlcmZsb3c7XG5cbiAgICAgICAgdyA9IGNvbmZpZy5fdztcbiAgICAgICAgaWYgKHcuR0cgIT0gbnVsbCB8fCB3LlcgIT0gbnVsbCB8fCB3LkUgIT0gbnVsbCkge1xuICAgICAgICAgICAgZG93ID0gMTtcbiAgICAgICAgICAgIGRveSA9IDQ7XG5cbiAgICAgICAgICAgIC8vIFRPRE86IFdlIG5lZWQgdG8gdGFrZSB0aGUgY3VycmVudCBpc29XZWVrWWVhciwgYnV0IHRoYXQgZGVwZW5kcyBvblxuICAgICAgICAgICAgLy8gaG93IHdlIGludGVycHJldCBub3cgKGxvY2FsLCB1dGMsIGZpeGVkIG9mZnNldCkuIFNvIGNyZWF0ZVxuICAgICAgICAgICAgLy8gYSBub3cgdmVyc2lvbiBvZiBjdXJyZW50IGNvbmZpZyAodGFrZSBsb2NhbC91dGMvb2Zmc2V0IGZsYWdzLCBhbmRcbiAgICAgICAgICAgIC8vIGNyZWF0ZSBub3cpLlxuICAgICAgICAgICAgd2Vla1llYXIgPSBkZWZhdWx0cyh3LkdHLCBjb25maWcuX2FbWUVBUl0sIHdlZWtPZlllYXIobG9jYWxfX2NyZWF0ZUxvY2FsKCksIDEsIDQpLnllYXIpO1xuICAgICAgICAgICAgd2VlayA9IGRlZmF1bHRzKHcuVywgMSk7XG4gICAgICAgICAgICB3ZWVrZGF5ID0gZGVmYXVsdHMody5FLCAxKTtcbiAgICAgICAgICAgIGlmICh3ZWVrZGF5IDwgMSB8fCB3ZWVrZGF5ID4gNykge1xuICAgICAgICAgICAgICAgIHdlZWtkYXlPdmVyZmxvdyA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkb3cgPSBjb25maWcuX2xvY2FsZS5fd2Vlay5kb3c7XG4gICAgICAgICAgICBkb3kgPSBjb25maWcuX2xvY2FsZS5fd2Vlay5kb3k7XG5cbiAgICAgICAgICAgIHdlZWtZZWFyID0gZGVmYXVsdHMody5nZywgY29uZmlnLl9hW1lFQVJdLCB3ZWVrT2ZZZWFyKGxvY2FsX19jcmVhdGVMb2NhbCgpLCBkb3csIGRveSkueWVhcik7XG4gICAgICAgICAgICB3ZWVrID0gZGVmYXVsdHMody53LCAxKTtcblxuICAgICAgICAgICAgaWYgKHcuZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgLy8gd2Vla2RheSAtLSBsb3cgZGF5IG51bWJlcnMgYXJlIGNvbnNpZGVyZWQgbmV4dCB3ZWVrXG4gICAgICAgICAgICAgICAgd2Vla2RheSA9IHcuZDtcbiAgICAgICAgICAgICAgICBpZiAod2Vla2RheSA8IDAgfHwgd2Vla2RheSA+IDYpIHtcbiAgICAgICAgICAgICAgICAgICAgd2Vla2RheU92ZXJmbG93ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHcuZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgLy8gbG9jYWwgd2Vla2RheSAtLSBjb3VudGluZyBzdGFydHMgZnJvbSBiZWdpbmluZyBvZiB3ZWVrXG4gICAgICAgICAgICAgICAgd2Vla2RheSA9IHcuZSArIGRvdztcbiAgICAgICAgICAgICAgICBpZiAody5lIDwgMCB8fCB3LmUgPiA2KSB7XG4gICAgICAgICAgICAgICAgICAgIHdlZWtkYXlPdmVyZmxvdyA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBkZWZhdWx0IHRvIGJlZ2luaW5nIG9mIHdlZWtcbiAgICAgICAgICAgICAgICB3ZWVrZGF5ID0gZG93O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh3ZWVrIDwgMSB8fCB3ZWVrID4gd2Vla3NJblllYXIod2Vla1llYXIsIGRvdywgZG95KSkge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuX292ZXJmbG93V2Vla3MgPSB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKHdlZWtkYXlPdmVyZmxvdyAhPSBudWxsKSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5fb3ZlcmZsb3dXZWVrZGF5ID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRlbXAgPSBkYXlPZlllYXJGcm9tV2Vla3Mod2Vla1llYXIsIHdlZWssIHdlZWtkYXksIGRvdywgZG95KTtcbiAgICAgICAgICAgIGNvbmZpZy5fYVtZRUFSXSA9IHRlbXAueWVhcjtcbiAgICAgICAgICAgIGNvbmZpZy5fZGF5T2ZZZWFyID0gdGVtcC5kYXlPZlllYXI7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBjb25zdGFudCB0aGF0IHJlZmVycyB0byB0aGUgSVNPIHN0YW5kYXJkXG4gICAgdXRpbHNfaG9va3NfX2hvb2tzLklTT184NjAxID0gZnVuY3Rpb24gKCkge307XG5cbiAgICAvLyBkYXRlIGZyb20gc3RyaW5nIGFuZCBmb3JtYXQgc3RyaW5nXG4gICAgZnVuY3Rpb24gY29uZmlnRnJvbVN0cmluZ0FuZEZvcm1hdChjb25maWcpIHtcbiAgICAgICAgLy8gVE9ETzogTW92ZSB0aGlzIHRvIGFub3RoZXIgcGFydCBvZiB0aGUgY3JlYXRpb24gZmxvdyB0byBwcmV2ZW50IGNpcmN1bGFyIGRlcHNcbiAgICAgICAgaWYgKGNvbmZpZy5fZiA9PT0gdXRpbHNfaG9va3NfX2hvb2tzLklTT184NjAxKSB7XG4gICAgICAgICAgICBjb25maWdGcm9tSVNPKGNvbmZpZyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25maWcuX2EgPSBbXTtcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuZW1wdHkgPSB0cnVlO1xuXG4gICAgICAgIC8vIFRoaXMgYXJyYXkgaXMgdXNlZCB0byBtYWtlIGEgRGF0ZSwgZWl0aGVyIHdpdGggYG5ldyBEYXRlYCBvciBgRGF0ZS5VVENgXG4gICAgICAgIHZhciBzdHJpbmcgPSAnJyArIGNvbmZpZy5faSxcbiAgICAgICAgICAgIGksIHBhcnNlZElucHV0LCB0b2tlbnMsIHRva2VuLCBza2lwcGVkLFxuICAgICAgICAgICAgc3RyaW5nTGVuZ3RoID0gc3RyaW5nLmxlbmd0aCxcbiAgICAgICAgICAgIHRvdGFsUGFyc2VkSW5wdXRMZW5ndGggPSAwO1xuXG4gICAgICAgIHRva2VucyA9IGV4cGFuZEZvcm1hdChjb25maWcuX2YsIGNvbmZpZy5fbG9jYWxlKS5tYXRjaChmb3JtYXR0aW5nVG9rZW5zKSB8fCBbXTtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0b2tlbiA9IHRva2Vuc1tpXTtcbiAgICAgICAgICAgIHBhcnNlZElucHV0ID0gKHN0cmluZy5tYXRjaChnZXRQYXJzZVJlZ2V4Rm9yVG9rZW4odG9rZW4sIGNvbmZpZykpIHx8IFtdKVswXTtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCd0b2tlbicsIHRva2VuLCAncGFyc2VkSW5wdXQnLCBwYXJzZWRJbnB1dCxcbiAgICAgICAgICAgIC8vICAgICAgICAgJ3JlZ2V4JywgZ2V0UGFyc2VSZWdleEZvclRva2VuKHRva2VuLCBjb25maWcpKTtcbiAgICAgICAgICAgIGlmIChwYXJzZWRJbnB1dCkge1xuICAgICAgICAgICAgICAgIHNraXBwZWQgPSBzdHJpbmcuc3Vic3RyKDAsIHN0cmluZy5pbmRleE9mKHBhcnNlZElucHV0KSk7XG4gICAgICAgICAgICAgICAgaWYgKHNraXBwZWQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS51bnVzZWRJbnB1dC5wdXNoKHNraXBwZWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzdHJpbmcgPSBzdHJpbmcuc2xpY2Uoc3RyaW5nLmluZGV4T2YocGFyc2VkSW5wdXQpICsgcGFyc2VkSW5wdXQubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICB0b3RhbFBhcnNlZElucHV0TGVuZ3RoICs9IHBhcnNlZElucHV0Lmxlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGRvbid0IHBhcnNlIGlmIGl0J3Mgbm90IGEga25vd24gdG9rZW5cbiAgICAgICAgICAgIGlmIChmb3JtYXRUb2tlbkZ1bmN0aW9uc1t0b2tlbl0pIHtcbiAgICAgICAgICAgICAgICBpZiAocGFyc2VkSW5wdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuZW1wdHkgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLnVudXNlZFRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYWRkVGltZVRvQXJyYXlGcm9tVG9rZW4odG9rZW4sIHBhcnNlZElucHV0LCBjb25maWcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY29uZmlnLl9zdHJpY3QgJiYgIXBhcnNlZElucHV0KSB7XG4gICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykudW51c2VkVG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gYWRkIHJlbWFpbmluZyB1bnBhcnNlZCBpbnB1dCBsZW5ndGggdG8gdGhlIHN0cmluZ1xuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5jaGFyc0xlZnRPdmVyID0gc3RyaW5nTGVuZ3RoIC0gdG90YWxQYXJzZWRJbnB1dExlbmd0aDtcbiAgICAgICAgaWYgKHN0cmluZy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS51bnVzZWRJbnB1dC5wdXNoKHN0cmluZyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBjbGVhciBfMTJoIGZsYWcgaWYgaG91ciBpcyA8PSAxMlxuICAgICAgICBpZiAoZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuYmlnSG91ciA9PT0gdHJ1ZSAmJlxuICAgICAgICAgICAgICAgIGNvbmZpZy5fYVtIT1VSXSA8PSAxMiAmJlxuICAgICAgICAgICAgICAgIGNvbmZpZy5fYVtIT1VSXSA+IDApIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmJpZ0hvdXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gaGFuZGxlIG1lcmlkaWVtXG4gICAgICAgIGNvbmZpZy5fYVtIT1VSXSA9IG1lcmlkaWVtRml4V3JhcChjb25maWcuX2xvY2FsZSwgY29uZmlnLl9hW0hPVVJdLCBjb25maWcuX21lcmlkaWVtKTtcblxuICAgICAgICBjb25maWdGcm9tQXJyYXkoY29uZmlnKTtcbiAgICAgICAgY2hlY2tPdmVyZmxvdyhjb25maWcpO1xuICAgIH1cblxuXG4gICAgZnVuY3Rpb24gbWVyaWRpZW1GaXhXcmFwIChsb2NhbGUsIGhvdXIsIG1lcmlkaWVtKSB7XG4gICAgICAgIHZhciBpc1BtO1xuXG4gICAgICAgIGlmIChtZXJpZGllbSA9PSBudWxsKSB7XG4gICAgICAgICAgICAvLyBub3RoaW5nIHRvIGRvXG4gICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgfVxuICAgICAgICBpZiAobG9jYWxlLm1lcmlkaWVtSG91ciAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbG9jYWxlLm1lcmlkaWVtSG91cihob3VyLCBtZXJpZGllbSk7XG4gICAgICAgIH0gZWxzZSBpZiAobG9jYWxlLmlzUE0gIT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gRmFsbGJhY2tcbiAgICAgICAgICAgIGlzUG0gPSBsb2NhbGUuaXNQTShtZXJpZGllbSk7XG4gICAgICAgICAgICBpZiAoaXNQbSAmJiBob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICBob3VyICs9IDEyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFpc1BtICYmIGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIHRoaXMgaXMgbm90IHN1cHBvc2VkIHRvIGhhcHBlblxuICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBkYXRlIGZyb20gc3RyaW5nIGFuZCBhcnJheSBvZiBmb3JtYXQgc3RyaW5nc1xuICAgIGZ1bmN0aW9uIGNvbmZpZ0Zyb21TdHJpbmdBbmRBcnJheShjb25maWcpIHtcbiAgICAgICAgdmFyIHRlbXBDb25maWcsXG4gICAgICAgICAgICBiZXN0TW9tZW50LFxuXG4gICAgICAgICAgICBzY29yZVRvQmVhdCxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBjdXJyZW50U2NvcmU7XG5cbiAgICAgICAgaWYgKGNvbmZpZy5fZi5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmludmFsaWRGb3JtYXQgPSB0cnVlO1xuICAgICAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoTmFOKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBjb25maWcuX2YubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGN1cnJlbnRTY29yZSA9IDA7XG4gICAgICAgICAgICB0ZW1wQ29uZmlnID0gY29weUNvbmZpZyh7fSwgY29uZmlnKTtcbiAgICAgICAgICAgIGlmIChjb25maWcuX3VzZVVUQyAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGVtcENvbmZpZy5fdXNlVVRDID0gY29uZmlnLl91c2VVVEM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0ZW1wQ29uZmlnLl9mID0gY29uZmlnLl9mW2ldO1xuICAgICAgICAgICAgY29uZmlnRnJvbVN0cmluZ0FuZEZvcm1hdCh0ZW1wQ29uZmlnKTtcblxuICAgICAgICAgICAgaWYgKCF2YWxpZF9faXNWYWxpZCh0ZW1wQ29uZmlnKSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBpZiB0aGVyZSBpcyBhbnkgaW5wdXQgdGhhdCB3YXMgbm90IHBhcnNlZCBhZGQgYSBwZW5hbHR5IGZvciB0aGF0IGZvcm1hdFxuICAgICAgICAgICAgY3VycmVudFNjb3JlICs9IGdldFBhcnNpbmdGbGFncyh0ZW1wQ29uZmlnKS5jaGFyc0xlZnRPdmVyO1xuXG4gICAgICAgICAgICAvL29yIHRva2Vuc1xuICAgICAgICAgICAgY3VycmVudFNjb3JlICs9IGdldFBhcnNpbmdGbGFncyh0ZW1wQ29uZmlnKS51bnVzZWRUb2tlbnMubGVuZ3RoICogMTA7XG5cbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyh0ZW1wQ29uZmlnKS5zY29yZSA9IGN1cnJlbnRTY29yZTtcblxuICAgICAgICAgICAgaWYgKHNjb3JlVG9CZWF0ID09IG51bGwgfHwgY3VycmVudFNjb3JlIDwgc2NvcmVUb0JlYXQpIHtcbiAgICAgICAgICAgICAgICBzY29yZVRvQmVhdCA9IGN1cnJlbnRTY29yZTtcbiAgICAgICAgICAgICAgICBiZXN0TW9tZW50ID0gdGVtcENvbmZpZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGV4dGVuZChjb25maWcsIGJlc3RNb21lbnQgfHwgdGVtcENvbmZpZyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29uZmlnRnJvbU9iamVjdChjb25maWcpIHtcbiAgICAgICAgaWYgKGNvbmZpZy5fZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGkgPSBub3JtYWxpemVPYmplY3RVbml0cyhjb25maWcuX2kpO1xuICAgICAgICBjb25maWcuX2EgPSBtYXAoW2kueWVhciwgaS5tb250aCwgaS5kYXkgfHwgaS5kYXRlLCBpLmhvdXIsIGkubWludXRlLCBpLnNlY29uZCwgaS5taWxsaXNlY29uZF0sIGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgICAgIHJldHVybiBvYmogJiYgcGFyc2VJbnQob2JqLCAxMCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbmZpZ0Zyb21BcnJheShjb25maWcpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUZyb21Db25maWcgKGNvbmZpZykge1xuICAgICAgICB2YXIgcmVzID0gbmV3IE1vbWVudChjaGVja092ZXJmbG93KHByZXBhcmVDb25maWcoY29uZmlnKSkpO1xuICAgICAgICBpZiAocmVzLl9uZXh0RGF5KSB7XG4gICAgICAgICAgICAvLyBBZGRpbmcgaXMgc21hcnQgZW5vdWdoIGFyb3VuZCBEU1RcbiAgICAgICAgICAgIHJlcy5hZGQoMSwgJ2QnKTtcbiAgICAgICAgICAgIHJlcy5fbmV4dERheSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcHJlcGFyZUNvbmZpZyAoY29uZmlnKSB7XG4gICAgICAgIHZhciBpbnB1dCA9IGNvbmZpZy5faSxcbiAgICAgICAgICAgIGZvcm1hdCA9IGNvbmZpZy5fZjtcblxuICAgICAgICBjb25maWcuX2xvY2FsZSA9IGNvbmZpZy5fbG9jYWxlIHx8IGxvY2FsZV9sb2NhbGVzX19nZXRMb2NhbGUoY29uZmlnLl9sKTtcblxuICAgICAgICBpZiAoaW5wdXQgPT09IG51bGwgfHwgKGZvcm1hdCA9PT0gdW5kZWZpbmVkICYmIGlucHV0ID09PSAnJykpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWxpZF9fY3JlYXRlSW52YWxpZCh7bnVsbElucHV0OiB0cnVlfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgY29uZmlnLl9pID0gaW5wdXQgPSBjb25maWcuX2xvY2FsZS5wcmVwYXJzZShpbnB1dCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNNb21lbnQoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IE1vbWVudChjaGVja092ZXJmbG93KGlucHV0KSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNBcnJheShmb3JtYXQpKSB7XG4gICAgICAgICAgICBjb25maWdGcm9tU3RyaW5nQW5kQXJyYXkoY29uZmlnKTtcbiAgICAgICAgfSBlbHNlIGlmIChmb3JtYXQpIHtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21TdHJpbmdBbmRGb3JtYXQoY29uZmlnKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0RhdGUoaW5wdXQpKSB7XG4gICAgICAgICAgICBjb25maWcuX2QgPSBpbnB1dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21JbnB1dChjb25maWcpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF2YWxpZF9faXNWYWxpZChjb25maWcpKSB7XG4gICAgICAgICAgICBjb25maWcuX2QgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb25maWdGcm9tSW5wdXQoY29uZmlnKSB7XG4gICAgICAgIHZhciBpbnB1dCA9IGNvbmZpZy5faTtcbiAgICAgICAgaWYgKGlucHV0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKHV0aWxzX2hvb2tzX19ob29rcy5ub3coKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNEYXRlKGlucHV0KSkge1xuICAgICAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoK2lucHV0KTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBjb25maWdGcm9tU3RyaW5nKGNvbmZpZyk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNBcnJheShpbnB1dCkpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fYSA9IG1hcChpbnB1dC5zbGljZSgwKSwgZnVuY3Rpb24gKG9iaikge1xuICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZUludChvYmosIDEwKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29uZmlnRnJvbUFycmF5KGNvbmZpZyk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mKGlucHV0KSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21PYmplY3QoY29uZmlnKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YoaW5wdXQpID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgLy8gZnJvbSBtaWxsaXNlY29uZHNcbiAgICAgICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKGlucHV0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHV0aWxzX2hvb2tzX19ob29rcy5jcmVhdGVGcm9tSW5wdXRGYWxsYmFjayhjb25maWcpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlTG9jYWxPclVUQyAoaW5wdXQsIGZvcm1hdCwgbG9jYWxlLCBzdHJpY3QsIGlzVVRDKSB7XG4gICAgICAgIHZhciBjID0ge307XG5cbiAgICAgICAgaWYgKHR5cGVvZihsb2NhbGUpID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgIHN0cmljdCA9IGxvY2FsZTtcbiAgICAgICAgICAgIGxvY2FsZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICAvLyBvYmplY3QgY29uc3RydWN0aW9uIG11c3QgYmUgZG9uZSB0aGlzIHdheS5cbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL21vbWVudC9tb21lbnQvaXNzdWVzLzE0MjNcbiAgICAgICAgYy5faXNBTW9tZW50T2JqZWN0ID0gdHJ1ZTtcbiAgICAgICAgYy5fdXNlVVRDID0gYy5faXNVVEMgPSBpc1VUQztcbiAgICAgICAgYy5fbCA9IGxvY2FsZTtcbiAgICAgICAgYy5faSA9IGlucHV0O1xuICAgICAgICBjLl9mID0gZm9ybWF0O1xuICAgICAgICBjLl9zdHJpY3QgPSBzdHJpY3Q7XG5cbiAgICAgICAgcmV0dXJuIGNyZWF0ZUZyb21Db25maWcoYyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9jYWxfX2NyZWF0ZUxvY2FsIChpbnB1dCwgZm9ybWF0LCBsb2NhbGUsIHN0cmljdCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlTG9jYWxPclVUQyhpbnB1dCwgZm9ybWF0LCBsb2NhbGUsIHN0cmljdCwgZmFsc2UpO1xuICAgIH1cblxuICAgIHZhciBwcm90b3R5cGVNaW4gPSBkZXByZWNhdGUoXG4gICAgICAgICAnbW9tZW50KCkubWluIGlzIGRlcHJlY2F0ZWQsIHVzZSBtb21lbnQubWluIGluc3RlYWQuIGh0dHBzOi8vZ2l0aHViLmNvbS9tb21lbnQvbW9tZW50L2lzc3Vlcy8xNTQ4JyxcbiAgICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICB2YXIgb3RoZXIgPSBsb2NhbF9fY3JlYXRlTG9jYWwuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICAgICAgICAgICBpZiAodGhpcy5pc1ZhbGlkKCkgJiYgb3RoZXIuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICAgICAgIHJldHVybiBvdGhlciA8IHRoaXMgPyB0aGlzIDogb3RoZXI7XG4gICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbGlkX19jcmVhdGVJbnZhbGlkKCk7XG4gICAgICAgICAgICAgfVxuICAgICAgICAgfVxuICAgICApO1xuXG4gICAgdmFyIHByb3RvdHlwZU1heCA9IGRlcHJlY2F0ZShcbiAgICAgICAgJ21vbWVudCgpLm1heCBpcyBkZXByZWNhdGVkLCB1c2UgbW9tZW50Lm1heCBpbnN0ZWFkLiBodHRwczovL2dpdGh1Yi5jb20vbW9tZW50L21vbWVudC9pc3N1ZXMvMTU0OCcsXG4gICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBvdGhlciA9IGxvY2FsX19jcmVhdGVMb2NhbC5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNWYWxpZCgpICYmIG90aGVyLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBvdGhlciA+IHRoaXMgPyB0aGlzIDogb3RoZXI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB2YWxpZF9fY3JlYXRlSW52YWxpZCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgKTtcblxuICAgIC8vIFBpY2sgYSBtb21lbnQgbSBmcm9tIG1vbWVudHMgc28gdGhhdCBtW2ZuXShvdGhlcikgaXMgdHJ1ZSBmb3IgYWxsXG4gICAgLy8gb3RoZXIuIFRoaXMgcmVsaWVzIG9uIHRoZSBmdW5jdGlvbiBmbiB0byBiZSB0cmFuc2l0aXZlLlxuICAgIC8vXG4gICAgLy8gbW9tZW50cyBzaG91bGQgZWl0aGVyIGJlIGFuIGFycmF5IG9mIG1vbWVudCBvYmplY3RzIG9yIGFuIGFycmF5LCB3aG9zZVxuICAgIC8vIGZpcnN0IGVsZW1lbnQgaXMgYW4gYXJyYXkgb2YgbW9tZW50IG9iamVjdHMuXG4gICAgZnVuY3Rpb24gcGlja0J5KGZuLCBtb21lbnRzKSB7XG4gICAgICAgIHZhciByZXMsIGk7XG4gICAgICAgIGlmIChtb21lbnRzLmxlbmd0aCA9PT0gMSAmJiBpc0FycmF5KG1vbWVudHNbMF0pKSB7XG4gICAgICAgICAgICBtb21lbnRzID0gbW9tZW50c1swXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIW1vbWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gbG9jYWxfX2NyZWF0ZUxvY2FsKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmVzID0gbW9tZW50c1swXTtcbiAgICAgICAgZm9yIChpID0gMTsgaSA8IG1vbWVudHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGlmICghbW9tZW50c1tpXS5pc1ZhbGlkKCkgfHwgbW9tZW50c1tpXVtmbl0ocmVzKSkge1xuICAgICAgICAgICAgICAgIHJlcyA9IG1vbWVudHNbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG5cbiAgICAvLyBUT0RPOiBVc2UgW10uc29ydCBpbnN0ZWFkP1xuICAgIGZ1bmN0aW9uIG1pbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDApO1xuXG4gICAgICAgIHJldHVybiBwaWNrQnkoJ2lzQmVmb3JlJywgYXJncyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWF4ICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMCk7XG5cbiAgICAgICAgcmV0dXJuIHBpY2tCeSgnaXNBZnRlcicsIGFyZ3MpO1xuICAgIH1cblxuICAgIHZhciBub3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBEYXRlLm5vdyA/IERhdGUubm93KCkgOiArKG5ldyBEYXRlKCkpO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBEdXJhdGlvbiAoZHVyYXRpb24pIHtcbiAgICAgICAgdmFyIG5vcm1hbGl6ZWRJbnB1dCA9IG5vcm1hbGl6ZU9iamVjdFVuaXRzKGR1cmF0aW9uKSxcbiAgICAgICAgICAgIHllYXJzID0gbm9ybWFsaXplZElucHV0LnllYXIgfHwgMCxcbiAgICAgICAgICAgIHF1YXJ0ZXJzID0gbm9ybWFsaXplZElucHV0LnF1YXJ0ZXIgfHwgMCxcbiAgICAgICAgICAgIG1vbnRocyA9IG5vcm1hbGl6ZWRJbnB1dC5tb250aCB8fCAwLFxuICAgICAgICAgICAgd2Vla3MgPSBub3JtYWxpemVkSW5wdXQud2VlayB8fCAwLFxuICAgICAgICAgICAgZGF5cyA9IG5vcm1hbGl6ZWRJbnB1dC5kYXkgfHwgMCxcbiAgICAgICAgICAgIGhvdXJzID0gbm9ybWFsaXplZElucHV0LmhvdXIgfHwgMCxcbiAgICAgICAgICAgIG1pbnV0ZXMgPSBub3JtYWxpemVkSW5wdXQubWludXRlIHx8IDAsXG4gICAgICAgICAgICBzZWNvbmRzID0gbm9ybWFsaXplZElucHV0LnNlY29uZCB8fCAwLFxuICAgICAgICAgICAgbWlsbGlzZWNvbmRzID0gbm9ybWFsaXplZElucHV0Lm1pbGxpc2Vjb25kIHx8IDA7XG5cbiAgICAgICAgLy8gcmVwcmVzZW50YXRpb24gZm9yIGRhdGVBZGRSZW1vdmVcbiAgICAgICAgdGhpcy5fbWlsbGlzZWNvbmRzID0gK21pbGxpc2Vjb25kcyArXG4gICAgICAgICAgICBzZWNvbmRzICogMWUzICsgLy8gMTAwMFxuICAgICAgICAgICAgbWludXRlcyAqIDZlNCArIC8vIDEwMDAgKiA2MFxuICAgICAgICAgICAgaG91cnMgKiAzNmU1OyAvLyAxMDAwICogNjAgKiA2MFxuICAgICAgICAvLyBCZWNhdXNlIG9mIGRhdGVBZGRSZW1vdmUgdHJlYXRzIDI0IGhvdXJzIGFzIGRpZmZlcmVudCBmcm9tIGFcbiAgICAgICAgLy8gZGF5IHdoZW4gd29ya2luZyBhcm91bmQgRFNULCB3ZSBuZWVkIHRvIHN0b3JlIHRoZW0gc2VwYXJhdGVseVxuICAgICAgICB0aGlzLl9kYXlzID0gK2RheXMgK1xuICAgICAgICAgICAgd2Vla3MgKiA3O1xuICAgICAgICAvLyBJdCBpcyBpbXBvc3NpYmxlIHRyYW5zbGF0ZSBtb250aHMgaW50byBkYXlzIHdpdGhvdXQga25vd2luZ1xuICAgICAgICAvLyB3aGljaCBtb250aHMgeW91IGFyZSBhcmUgdGFsa2luZyBhYm91dCwgc28gd2UgaGF2ZSB0byBzdG9yZVxuICAgICAgICAvLyBpdCBzZXBhcmF0ZWx5LlxuICAgICAgICB0aGlzLl9tb250aHMgPSArbW9udGhzICtcbiAgICAgICAgICAgIHF1YXJ0ZXJzICogMyArXG4gICAgICAgICAgICB5ZWFycyAqIDEyO1xuXG4gICAgICAgIHRoaXMuX2RhdGEgPSB7fTtcblxuICAgICAgICB0aGlzLl9sb2NhbGUgPSBsb2NhbGVfbG9jYWxlc19fZ2V0TG9jYWxlKCk7XG5cbiAgICAgICAgdGhpcy5fYnViYmxlKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNEdXJhdGlvbiAob2JqKSB7XG4gICAgICAgIHJldHVybiBvYmogaW5zdGFuY2VvZiBEdXJhdGlvbjtcbiAgICB9XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBmdW5jdGlvbiBvZmZzZXQgKHRva2VuLCBzZXBhcmF0b3IpIHtcbiAgICAgICAgYWRkRm9ybWF0VG9rZW4odG9rZW4sIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBvZmZzZXQgPSB0aGlzLnV0Y09mZnNldCgpO1xuICAgICAgICAgICAgdmFyIHNpZ24gPSAnKyc7XG4gICAgICAgICAgICBpZiAob2Zmc2V0IDwgMCkge1xuICAgICAgICAgICAgICAgIG9mZnNldCA9IC1vZmZzZXQ7XG4gICAgICAgICAgICAgICAgc2lnbiA9ICctJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzaWduICsgemVyb0ZpbGwofn4ob2Zmc2V0IC8gNjApLCAyKSArIHNlcGFyYXRvciArIHplcm9GaWxsKH5+KG9mZnNldCkgJSA2MCwgMik7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIG9mZnNldCgnWicsICc6Jyk7XG4gICAgb2Zmc2V0KCdaWicsICcnKTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ1onLCAgbWF0Y2hTaG9ydE9mZnNldCk7XG4gICAgYWRkUmVnZXhUb2tlbignWlonLCBtYXRjaFNob3J0T2Zmc2V0KTtcbiAgICBhZGRQYXJzZVRva2VuKFsnWicsICdaWiddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgY29uZmlnLl91c2VVVEMgPSB0cnVlO1xuICAgICAgICBjb25maWcuX3R6bSA9IG9mZnNldEZyb21TdHJpbmcobWF0Y2hTaG9ydE9mZnNldCwgaW5wdXQpO1xuICAgIH0pO1xuXG4gICAgLy8gSEVMUEVSU1xuXG4gICAgLy8gdGltZXpvbmUgY2h1bmtlclxuICAgIC8vICcrMTA6MDAnID4gWycxMCcsICAnMDAnXVxuICAgIC8vICctMTUzMCcgID4gWyctMTUnLCAnMzAnXVxuICAgIHZhciBjaHVua09mZnNldCA9IC8oW1xcK1xcLV18XFxkXFxkKS9naTtcblxuICAgIGZ1bmN0aW9uIG9mZnNldEZyb21TdHJpbmcobWF0Y2hlciwgc3RyaW5nKSB7XG4gICAgICAgIHZhciBtYXRjaGVzID0gKChzdHJpbmcgfHwgJycpLm1hdGNoKG1hdGNoZXIpIHx8IFtdKTtcbiAgICAgICAgdmFyIGNodW5rICAgPSBtYXRjaGVzW21hdGNoZXMubGVuZ3RoIC0gMV0gfHwgW107XG4gICAgICAgIHZhciBwYXJ0cyAgID0gKGNodW5rICsgJycpLm1hdGNoKGNodW5rT2Zmc2V0KSB8fCBbJy0nLCAwLCAwXTtcbiAgICAgICAgdmFyIG1pbnV0ZXMgPSArKHBhcnRzWzFdICogNjApICsgdG9JbnQocGFydHNbMl0pO1xuXG4gICAgICAgIHJldHVybiBwYXJ0c1swXSA9PT0gJysnID8gbWludXRlcyA6IC1taW51dGVzO1xuICAgIH1cblxuICAgIC8vIFJldHVybiBhIG1vbWVudCBmcm9tIGlucHV0LCB0aGF0IGlzIGxvY2FsL3V0Yy96b25lIGVxdWl2YWxlbnQgdG8gbW9kZWwuXG4gICAgZnVuY3Rpb24gY2xvbmVXaXRoT2Zmc2V0KGlucHV0LCBtb2RlbCkge1xuICAgICAgICB2YXIgcmVzLCBkaWZmO1xuICAgICAgICBpZiAobW9kZWwuX2lzVVRDKSB7XG4gICAgICAgICAgICByZXMgPSBtb2RlbC5jbG9uZSgpO1xuICAgICAgICAgICAgZGlmZiA9IChpc01vbWVudChpbnB1dCkgfHwgaXNEYXRlKGlucHV0KSA/ICtpbnB1dCA6ICtsb2NhbF9fY3JlYXRlTG9jYWwoaW5wdXQpKSAtICgrcmVzKTtcbiAgICAgICAgICAgIC8vIFVzZSBsb3ctbGV2ZWwgYXBpLCBiZWNhdXNlIHRoaXMgZm4gaXMgbG93LWxldmVsIGFwaS5cbiAgICAgICAgICAgIHJlcy5fZC5zZXRUaW1lKCtyZXMuX2QgKyBkaWZmKTtcbiAgICAgICAgICAgIHV0aWxzX2hvb2tzX19ob29rcy51cGRhdGVPZmZzZXQocmVzLCBmYWxzZSk7XG4gICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGxvY2FsX19jcmVhdGVMb2NhbChpbnB1dCkubG9jYWwoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldERhdGVPZmZzZXQgKG0pIHtcbiAgICAgICAgLy8gT24gRmlyZWZveC4yNCBEYXRlI2dldFRpbWV6b25lT2Zmc2V0IHJldHVybnMgYSBmbG9hdGluZyBwb2ludC5cbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL21vbWVudC9tb21lbnQvcHVsbC8xODcxXG4gICAgICAgIHJldHVybiAtTWF0aC5yb3VuZChtLl9kLmdldFRpbWV6b25lT2Zmc2V0KCkgLyAxNSkgKiAxNTtcbiAgICB9XG5cbiAgICAvLyBIT09LU1xuXG4gICAgLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGNhbGxlZCB3aGVuZXZlciBhIG1vbWVudCBpcyBtdXRhdGVkLlxuICAgIC8vIEl0IGlzIGludGVuZGVkIHRvIGtlZXAgdGhlIG9mZnNldCBpbiBzeW5jIHdpdGggdGhlIHRpbWV6b25lLlxuICAgIHV0aWxzX2hvb2tzX19ob29rcy51cGRhdGVPZmZzZXQgPSBmdW5jdGlvbiAoKSB7fTtcblxuICAgIC8vIE1PTUVOVFNcblxuICAgIC8vIGtlZXBMb2NhbFRpbWUgPSB0cnVlIG1lYW5zIG9ubHkgY2hhbmdlIHRoZSB0aW1lem9uZSwgd2l0aG91dFxuICAgIC8vIGFmZmVjdGluZyB0aGUgbG9jYWwgaG91ci4gU28gNTozMToyNiArMDMwMCAtLVt1dGNPZmZzZXQoMiwgdHJ1ZSldLS0+XG4gICAgLy8gNTozMToyNiArMDIwMCBJdCBpcyBwb3NzaWJsZSB0aGF0IDU6MzE6MjYgZG9lc24ndCBleGlzdCB3aXRoIG9mZnNldFxuICAgIC8vICswMjAwLCBzbyB3ZSBhZGp1c3QgdGhlIHRpbWUgYXMgbmVlZGVkLCB0byBiZSB2YWxpZC5cbiAgICAvL1xuICAgIC8vIEtlZXBpbmcgdGhlIHRpbWUgYWN0dWFsbHkgYWRkcy9zdWJ0cmFjdHMgKG9uZSBob3VyKVxuICAgIC8vIGZyb20gdGhlIGFjdHVhbCByZXByZXNlbnRlZCB0aW1lLiBUaGF0IGlzIHdoeSB3ZSBjYWxsIHVwZGF0ZU9mZnNldFxuICAgIC8vIGEgc2Vjb25kIHRpbWUuIEluIGNhc2UgaXQgd2FudHMgdXMgdG8gY2hhbmdlIHRoZSBvZmZzZXQgYWdhaW5cbiAgICAvLyBfY2hhbmdlSW5Qcm9ncmVzcyA9PSB0cnVlIGNhc2UsIHRoZW4gd2UgaGF2ZSB0byBhZGp1c3QsIGJlY2F1c2VcbiAgICAvLyB0aGVyZSBpcyBubyBzdWNoIHRpbWUgaW4gdGhlIGdpdmVuIHRpbWV6b25lLlxuICAgIGZ1bmN0aW9uIGdldFNldE9mZnNldCAoaW5wdXQsIGtlZXBMb2NhbFRpbWUpIHtcbiAgICAgICAgdmFyIG9mZnNldCA9IHRoaXMuX29mZnNldCB8fCAwLFxuICAgICAgICAgICAgbG9jYWxBZGp1c3Q7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dCAhPSBudWxsID8gdGhpcyA6IE5hTjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW5wdXQgIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBpbnB1dCA9IG9mZnNldEZyb21TdHJpbmcobWF0Y2hTaG9ydE9mZnNldCwgaW5wdXQpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChNYXRoLmFicyhpbnB1dCkgPCAxNikge1xuICAgICAgICAgICAgICAgIGlucHV0ID0gaW5wdXQgKiA2MDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghdGhpcy5faXNVVEMgJiYga2VlcExvY2FsVGltZSkge1xuICAgICAgICAgICAgICAgIGxvY2FsQWRqdXN0ID0gZ2V0RGF0ZU9mZnNldCh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX29mZnNldCA9IGlucHV0O1xuICAgICAgICAgICAgdGhpcy5faXNVVEMgPSB0cnVlO1xuICAgICAgICAgICAgaWYgKGxvY2FsQWRqdXN0ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFkZChsb2NhbEFkanVzdCwgJ20nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvZmZzZXQgIT09IGlucHV0KSB7XG4gICAgICAgICAgICAgICAgaWYgKCFrZWVwTG9jYWxUaW1lIHx8IHRoaXMuX2NoYW5nZUluUHJvZ3Jlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgYWRkX3N1YnRyYWN0X19hZGRTdWJ0cmFjdCh0aGlzLCBjcmVhdGVfX2NyZWF0ZUR1cmF0aW9uKGlucHV0IC0gb2Zmc2V0LCAnbScpLCAxLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICghdGhpcy5fY2hhbmdlSW5Qcm9ncmVzcykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jaGFuZ2VJblByb2dyZXNzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdXRpbHNfaG9va3NfX2hvb2tzLnVwZGF0ZU9mZnNldCh0aGlzLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2hhbmdlSW5Qcm9ncmVzcyA9IG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faXNVVEMgPyBvZmZzZXQgOiBnZXREYXRlT2Zmc2V0KHRoaXMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U2V0Wm9uZSAoaW5wdXQsIGtlZXBMb2NhbFRpbWUpIHtcbiAgICAgICAgaWYgKGlucHV0ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgaW5wdXQgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgaW5wdXQgPSAtaW5wdXQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMudXRjT2Zmc2V0KGlucHV0LCBrZWVwTG9jYWxUaW1lKTtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gLXRoaXMudXRjT2Zmc2V0KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRPZmZzZXRUb1VUQyAoa2VlcExvY2FsVGltZSkge1xuICAgICAgICByZXR1cm4gdGhpcy51dGNPZmZzZXQoMCwga2VlcExvY2FsVGltZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0T2Zmc2V0VG9Mb2NhbCAoa2VlcExvY2FsVGltZSkge1xuICAgICAgICBpZiAodGhpcy5faXNVVEMpIHtcbiAgICAgICAgICAgIHRoaXMudXRjT2Zmc2V0KDAsIGtlZXBMb2NhbFRpbWUpO1xuICAgICAgICAgICAgdGhpcy5faXNVVEMgPSBmYWxzZTtcblxuICAgICAgICAgICAgaWYgKGtlZXBMb2NhbFRpbWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN1YnRyYWN0KGdldERhdGVPZmZzZXQodGhpcyksICdtJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0T2Zmc2V0VG9QYXJzZWRPZmZzZXQgKCkge1xuICAgICAgICBpZiAodGhpcy5fdHptKSB7XG4gICAgICAgICAgICB0aGlzLnV0Y09mZnNldCh0aGlzLl90em0pO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB0aGlzLl9pID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdGhpcy51dGNPZmZzZXQob2Zmc2V0RnJvbVN0cmluZyhtYXRjaE9mZnNldCwgdGhpcy5faSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhc0FsaWduZWRIb3VyT2Zmc2V0IChpbnB1dCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaW5wdXQgPSBpbnB1dCA/IGxvY2FsX19jcmVhdGVMb2NhbChpbnB1dCkudXRjT2Zmc2V0KCkgOiAwO1xuXG4gICAgICAgIHJldHVybiAodGhpcy51dGNPZmZzZXQoKSAtIGlucHV0KSAlIDYwID09PSAwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzRGF5bGlnaHRTYXZpbmdUaW1lICgpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIHRoaXMudXRjT2Zmc2V0KCkgPiB0aGlzLmNsb25lKCkubW9udGgoMCkudXRjT2Zmc2V0KCkgfHxcbiAgICAgICAgICAgIHRoaXMudXRjT2Zmc2V0KCkgPiB0aGlzLmNsb25lKCkubW9udGgoNSkudXRjT2Zmc2V0KClcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0RheWxpZ2h0U2F2aW5nVGltZVNoaWZ0ZWQgKCkge1xuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKHRoaXMuX2lzRFNUU2hpZnRlZCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9pc0RTVFNoaWZ0ZWQ7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgYyA9IHt9O1xuXG4gICAgICAgIGNvcHlDb25maWcoYywgdGhpcyk7XG4gICAgICAgIGMgPSBwcmVwYXJlQ29uZmlnKGMpO1xuXG4gICAgICAgIGlmIChjLl9hKSB7XG4gICAgICAgICAgICB2YXIgb3RoZXIgPSBjLl9pc1VUQyA/IGNyZWF0ZV91dGNfX2NyZWF0ZVVUQyhjLl9hKSA6IGxvY2FsX19jcmVhdGVMb2NhbChjLl9hKTtcbiAgICAgICAgICAgIHRoaXMuX2lzRFNUU2hpZnRlZCA9IHRoaXMuaXNWYWxpZCgpICYmXG4gICAgICAgICAgICAgICAgY29tcGFyZUFycmF5cyhjLl9hLCBvdGhlci50b0FycmF5KCkpID4gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2lzRFNUU2hpZnRlZCA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzRFNUU2hpZnRlZDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0xvY2FsICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZCgpID8gIXRoaXMuX2lzVVRDIDogZmFsc2U7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNVdGNPZmZzZXQgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkKCkgPyB0aGlzLl9pc1VUQyA6IGZhbHNlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzVXRjICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZCgpID8gdGhpcy5faXNVVEMgJiYgdGhpcy5fb2Zmc2V0ID09PSAwIDogZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gQVNQLk5FVCBqc29uIGRhdGUgZm9ybWF0IHJlZ2V4XG4gICAgdmFyIGFzcE5ldFJlZ2V4ID0gLyhcXC0pPyg/OihcXGQqKVsuIF0pPyhcXGQrKVxcOihcXGQrKSg/OlxcOihcXGQrKVxcLj8oXFxkezN9KT8pPy87XG5cbiAgICAvLyBmcm9tIGh0dHA6Ly9kb2NzLmNsb3N1cmUtbGlicmFyeS5nb29nbGVjb2RlLmNvbS9naXQvY2xvc3VyZV9nb29nX2RhdGVfZGF0ZS5qcy5zb3VyY2UuaHRtbFxuICAgIC8vIHNvbWV3aGF0IG1vcmUgaW4gbGluZSB3aXRoIDQuNC4zLjIgMjAwNCBzcGVjLCBidXQgYWxsb3dzIGRlY2ltYWwgYW55d2hlcmVcbiAgICB2YXIgaXNvUmVnZXggPSAvXigtKT9QKD86KD86KFswLTksLl0qKVkpPyg/OihbMC05LC5dKilNKT8oPzooWzAtOSwuXSopRCk/KD86VCg/OihbMC05LC5dKilIKT8oPzooWzAtOSwuXSopTSk/KD86KFswLTksLl0qKVMpPyk/fChbMC05LC5dKilXKSQvO1xuXG4gICAgZnVuY3Rpb24gY3JlYXRlX19jcmVhdGVEdXJhdGlvbiAoaW5wdXQsIGtleSkge1xuICAgICAgICB2YXIgZHVyYXRpb24gPSBpbnB1dCxcbiAgICAgICAgICAgIC8vIG1hdGNoaW5nIGFnYWluc3QgcmVnZXhwIGlzIGV4cGVuc2l2ZSwgZG8gaXQgb24gZGVtYW5kXG4gICAgICAgICAgICBtYXRjaCA9IG51bGwsXG4gICAgICAgICAgICBzaWduLFxuICAgICAgICAgICAgcmV0LFxuICAgICAgICAgICAgZGlmZlJlcztcblxuICAgICAgICBpZiAoaXNEdXJhdGlvbihpbnB1dCkpIHtcbiAgICAgICAgICAgIGR1cmF0aW9uID0ge1xuICAgICAgICAgICAgICAgIG1zIDogaW5wdXQuX21pbGxpc2Vjb25kcyxcbiAgICAgICAgICAgICAgICBkICA6IGlucHV0Ll9kYXlzLFxuICAgICAgICAgICAgICAgIE0gIDogaW5wdXQuX21vbnRoc1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgaW5wdXQgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBkdXJhdGlvbiA9IHt9O1xuICAgICAgICAgICAgaWYgKGtleSkge1xuICAgICAgICAgICAgICAgIGR1cmF0aW9uW2tleV0gPSBpbnB1dDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZHVyYXRpb24ubWlsbGlzZWNvbmRzID0gaW5wdXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoISEobWF0Y2ggPSBhc3BOZXRSZWdleC5leGVjKGlucHV0KSkpIHtcbiAgICAgICAgICAgIHNpZ24gPSAobWF0Y2hbMV0gPT09ICctJykgPyAtMSA6IDE7XG4gICAgICAgICAgICBkdXJhdGlvbiA9IHtcbiAgICAgICAgICAgICAgICB5ICA6IDAsXG4gICAgICAgICAgICAgICAgZCAgOiB0b0ludChtYXRjaFtEQVRFXSkgICAgICAgICogc2lnbixcbiAgICAgICAgICAgICAgICBoICA6IHRvSW50KG1hdGNoW0hPVVJdKSAgICAgICAgKiBzaWduLFxuICAgICAgICAgICAgICAgIG0gIDogdG9JbnQobWF0Y2hbTUlOVVRFXSkgICAgICAqIHNpZ24sXG4gICAgICAgICAgICAgICAgcyAgOiB0b0ludChtYXRjaFtTRUNPTkRdKSAgICAgICogc2lnbixcbiAgICAgICAgICAgICAgICBtcyA6IHRvSW50KG1hdGNoW01JTExJU0VDT05EXSkgKiBzaWduXG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2UgaWYgKCEhKG1hdGNoID0gaXNvUmVnZXguZXhlYyhpbnB1dCkpKSB7XG4gICAgICAgICAgICBzaWduID0gKG1hdGNoWzFdID09PSAnLScpID8gLTEgOiAxO1xuICAgICAgICAgICAgZHVyYXRpb24gPSB7XG4gICAgICAgICAgICAgICAgeSA6IHBhcnNlSXNvKG1hdGNoWzJdLCBzaWduKSxcbiAgICAgICAgICAgICAgICBNIDogcGFyc2VJc28obWF0Y2hbM10sIHNpZ24pLFxuICAgICAgICAgICAgICAgIGQgOiBwYXJzZUlzbyhtYXRjaFs0XSwgc2lnbiksXG4gICAgICAgICAgICAgICAgaCA6IHBhcnNlSXNvKG1hdGNoWzVdLCBzaWduKSxcbiAgICAgICAgICAgICAgICBtIDogcGFyc2VJc28obWF0Y2hbNl0sIHNpZ24pLFxuICAgICAgICAgICAgICAgIHMgOiBwYXJzZUlzbyhtYXRjaFs3XSwgc2lnbiksXG4gICAgICAgICAgICAgICAgdyA6IHBhcnNlSXNvKG1hdGNoWzhdLCBzaWduKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIGlmIChkdXJhdGlvbiA9PSBudWxsKSB7Ly8gY2hlY2tzIGZvciBudWxsIG9yIHVuZGVmaW5lZFxuICAgICAgICAgICAgZHVyYXRpb24gPSB7fTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZHVyYXRpb24gPT09ICdvYmplY3QnICYmICgnZnJvbScgaW4gZHVyYXRpb24gfHwgJ3RvJyBpbiBkdXJhdGlvbikpIHtcbiAgICAgICAgICAgIGRpZmZSZXMgPSBtb21lbnRzRGlmZmVyZW5jZShsb2NhbF9fY3JlYXRlTG9jYWwoZHVyYXRpb24uZnJvbSksIGxvY2FsX19jcmVhdGVMb2NhbChkdXJhdGlvbi50bykpO1xuXG4gICAgICAgICAgICBkdXJhdGlvbiA9IHt9O1xuICAgICAgICAgICAgZHVyYXRpb24ubXMgPSBkaWZmUmVzLm1pbGxpc2Vjb25kcztcbiAgICAgICAgICAgIGR1cmF0aW9uLk0gPSBkaWZmUmVzLm1vbnRocztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldCA9IG5ldyBEdXJhdGlvbihkdXJhdGlvbik7XG5cbiAgICAgICAgaWYgKGlzRHVyYXRpb24oaW5wdXQpICYmIGhhc093blByb3AoaW5wdXQsICdfbG9jYWxlJykpIHtcbiAgICAgICAgICAgIHJldC5fbG9jYWxlID0gaW5wdXQuX2xvY2FsZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuXG4gICAgY3JlYXRlX19jcmVhdGVEdXJhdGlvbi5mbiA9IER1cmF0aW9uLnByb3RvdHlwZTtcblxuICAgIGZ1bmN0aW9uIHBhcnNlSXNvIChpbnAsIHNpZ24pIHtcbiAgICAgICAgLy8gV2UnZCBub3JtYWxseSB1c2Ugfn5pbnAgZm9yIHRoaXMsIGJ1dCB1bmZvcnR1bmF0ZWx5IGl0IGFsc29cbiAgICAgICAgLy8gY29udmVydHMgZmxvYXRzIHRvIGludHMuXG4gICAgICAgIC8vIGlucCBtYXkgYmUgdW5kZWZpbmVkLCBzbyBjYXJlZnVsIGNhbGxpbmcgcmVwbGFjZSBvbiBpdC5cbiAgICAgICAgdmFyIHJlcyA9IGlucCAmJiBwYXJzZUZsb2F0KGlucC5yZXBsYWNlKCcsJywgJy4nKSk7XG4gICAgICAgIC8vIGFwcGx5IHNpZ24gd2hpbGUgd2UncmUgYXQgaXRcbiAgICAgICAgcmV0dXJuIChpc05hTihyZXMpID8gMCA6IHJlcykgKiBzaWduO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBvc2l0aXZlTW9tZW50c0RpZmZlcmVuY2UoYmFzZSwgb3RoZXIpIHtcbiAgICAgICAgdmFyIHJlcyA9IHttaWxsaXNlY29uZHM6IDAsIG1vbnRoczogMH07XG5cbiAgICAgICAgcmVzLm1vbnRocyA9IG90aGVyLm1vbnRoKCkgLSBiYXNlLm1vbnRoKCkgK1xuICAgICAgICAgICAgKG90aGVyLnllYXIoKSAtIGJhc2UueWVhcigpKSAqIDEyO1xuICAgICAgICBpZiAoYmFzZS5jbG9uZSgpLmFkZChyZXMubW9udGhzLCAnTScpLmlzQWZ0ZXIob3RoZXIpKSB7XG4gICAgICAgICAgICAtLXJlcy5tb250aHM7XG4gICAgICAgIH1cblxuICAgICAgICByZXMubWlsbGlzZWNvbmRzID0gK290aGVyIC0gKyhiYXNlLmNsb25lKCkuYWRkKHJlcy5tb250aHMsICdNJykpO1xuXG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbW9tZW50c0RpZmZlcmVuY2UoYmFzZSwgb3RoZXIpIHtcbiAgICAgICAgdmFyIHJlcztcbiAgICAgICAgaWYgKCEoYmFzZS5pc1ZhbGlkKCkgJiYgb3RoZXIuaXNWYWxpZCgpKSkge1xuICAgICAgICAgICAgcmV0dXJuIHttaWxsaXNlY29uZHM6IDAsIG1vbnRoczogMH07XG4gICAgICAgIH1cblxuICAgICAgICBvdGhlciA9IGNsb25lV2l0aE9mZnNldChvdGhlciwgYmFzZSk7XG4gICAgICAgIGlmIChiYXNlLmlzQmVmb3JlKG90aGVyKSkge1xuICAgICAgICAgICAgcmVzID0gcG9zaXRpdmVNb21lbnRzRGlmZmVyZW5jZShiYXNlLCBvdGhlcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXMgPSBwb3NpdGl2ZU1vbWVudHNEaWZmZXJlbmNlKG90aGVyLCBiYXNlKTtcbiAgICAgICAgICAgIHJlcy5taWxsaXNlY29uZHMgPSAtcmVzLm1pbGxpc2Vjb25kcztcbiAgICAgICAgICAgIHJlcy5tb250aHMgPSAtcmVzLm1vbnRocztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgLy8gVE9ETzogcmVtb3ZlICduYW1lJyBhcmcgYWZ0ZXIgZGVwcmVjYXRpb24gaXMgcmVtb3ZlZFxuICAgIGZ1bmN0aW9uIGNyZWF0ZUFkZGVyKGRpcmVjdGlvbiwgbmFtZSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHZhbCwgcGVyaW9kKSB7XG4gICAgICAgICAgICB2YXIgZHVyLCB0bXA7XG4gICAgICAgICAgICAvL2ludmVydCB0aGUgYXJndW1lbnRzLCBidXQgY29tcGxhaW4gYWJvdXQgaXRcbiAgICAgICAgICAgIGlmIChwZXJpb2QgIT09IG51bGwgJiYgIWlzTmFOKCtwZXJpb2QpKSB7XG4gICAgICAgICAgICAgICAgZGVwcmVjYXRlU2ltcGxlKG5hbWUsICdtb21lbnQoKS4nICsgbmFtZSAgKyAnKHBlcmlvZCwgbnVtYmVyKSBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIG1vbWVudCgpLicgKyBuYW1lICsgJyhudW1iZXIsIHBlcmlvZCkuJyk7XG4gICAgICAgICAgICAgICAgdG1wID0gdmFsOyB2YWwgPSBwZXJpb2Q7IHBlcmlvZCA9IHRtcDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFsID0gdHlwZW9mIHZhbCA9PT0gJ3N0cmluZycgPyArdmFsIDogdmFsO1xuICAgICAgICAgICAgZHVyID0gY3JlYXRlX19jcmVhdGVEdXJhdGlvbih2YWwsIHBlcmlvZCk7XG4gICAgICAgICAgICBhZGRfc3VidHJhY3RfX2FkZFN1YnRyYWN0KHRoaXMsIGR1ciwgZGlyZWN0aW9uKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZF9zdWJ0cmFjdF9fYWRkU3VidHJhY3QgKG1vbSwgZHVyYXRpb24sIGlzQWRkaW5nLCB1cGRhdGVPZmZzZXQpIHtcbiAgICAgICAgdmFyIG1pbGxpc2Vjb25kcyA9IGR1cmF0aW9uLl9taWxsaXNlY29uZHMsXG4gICAgICAgICAgICBkYXlzID0gZHVyYXRpb24uX2RheXMsXG4gICAgICAgICAgICBtb250aHMgPSBkdXJhdGlvbi5fbW9udGhzO1xuXG4gICAgICAgIGlmICghbW9tLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgLy8gTm8gb3BcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHVwZGF0ZU9mZnNldCA9IHVwZGF0ZU9mZnNldCA9PSBudWxsID8gdHJ1ZSA6IHVwZGF0ZU9mZnNldDtcblxuICAgICAgICBpZiAobWlsbGlzZWNvbmRzKSB7XG4gICAgICAgICAgICBtb20uX2Quc2V0VGltZSgrbW9tLl9kICsgbWlsbGlzZWNvbmRzICogaXNBZGRpbmcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXlzKSB7XG4gICAgICAgICAgICBnZXRfc2V0X19zZXQobW9tLCAnRGF0ZScsIGdldF9zZXRfX2dldChtb20sICdEYXRlJykgKyBkYXlzICogaXNBZGRpbmcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtb250aHMpIHtcbiAgICAgICAgICAgIHNldE1vbnRoKG1vbSwgZ2V0X3NldF9fZ2V0KG1vbSwgJ01vbnRoJykgKyBtb250aHMgKiBpc0FkZGluZyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHVwZGF0ZU9mZnNldCkge1xuICAgICAgICAgICAgdXRpbHNfaG9va3NfX2hvb2tzLnVwZGF0ZU9mZnNldChtb20sIGRheXMgfHwgbW9udGhzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBhZGRfc3VidHJhY3RfX2FkZCAgICAgID0gY3JlYXRlQWRkZXIoMSwgJ2FkZCcpO1xuICAgIHZhciBhZGRfc3VidHJhY3RfX3N1YnRyYWN0ID0gY3JlYXRlQWRkZXIoLTEsICdzdWJ0cmFjdCcpO1xuXG4gICAgZnVuY3Rpb24gbW9tZW50X2NhbGVuZGFyX19jYWxlbmRhciAodGltZSwgZm9ybWF0cykge1xuICAgICAgICAvLyBXZSB3YW50IHRvIGNvbXBhcmUgdGhlIHN0YXJ0IG9mIHRvZGF5LCB2cyB0aGlzLlxuICAgICAgICAvLyBHZXR0aW5nIHN0YXJ0LW9mLXRvZGF5IGRlcGVuZHMgb24gd2hldGhlciB3ZSdyZSBsb2NhbC91dGMvb2Zmc2V0IG9yIG5vdC5cbiAgICAgICAgdmFyIG5vdyA9IHRpbWUgfHwgbG9jYWxfX2NyZWF0ZUxvY2FsKCksXG4gICAgICAgICAgICBzb2QgPSBjbG9uZVdpdGhPZmZzZXQobm93LCB0aGlzKS5zdGFydE9mKCdkYXknKSxcbiAgICAgICAgICAgIGRpZmYgPSB0aGlzLmRpZmYoc29kLCAnZGF5cycsIHRydWUpLFxuICAgICAgICAgICAgZm9ybWF0ID0gZGlmZiA8IC02ID8gJ3NhbWVFbHNlJyA6XG4gICAgICAgICAgICAgICAgZGlmZiA8IC0xID8gJ2xhc3RXZWVrJyA6XG4gICAgICAgICAgICAgICAgZGlmZiA8IDAgPyAnbGFzdERheScgOlxuICAgICAgICAgICAgICAgIGRpZmYgPCAxID8gJ3NhbWVEYXknIDpcbiAgICAgICAgICAgICAgICBkaWZmIDwgMiA/ICduZXh0RGF5JyA6XG4gICAgICAgICAgICAgICAgZGlmZiA8IDcgPyAnbmV4dFdlZWsnIDogJ3NhbWVFbHNlJztcblxuICAgICAgICB2YXIgb3V0cHV0ID0gZm9ybWF0cyAmJiAoaXNGdW5jdGlvbihmb3JtYXRzW2Zvcm1hdF0pID8gZm9ybWF0c1tmb3JtYXRdKCkgOiBmb3JtYXRzW2Zvcm1hdF0pO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmZvcm1hdChvdXRwdXQgfHwgdGhpcy5sb2NhbGVEYXRhKCkuY2FsZW5kYXIoZm9ybWF0LCB0aGlzLCBsb2NhbF9fY3JlYXRlTG9jYWwobm93KSkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsb25lICgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBNb21lbnQodGhpcyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNBZnRlciAoaW5wdXQsIHVuaXRzKSB7XG4gICAgICAgIHZhciBsb2NhbElucHV0ID0gaXNNb21lbnQoaW5wdXQpID8gaW5wdXQgOiBsb2NhbF9fY3JlYXRlTG9jYWwoaW5wdXQpO1xuICAgICAgICBpZiAoISh0aGlzLmlzVmFsaWQoKSAmJiBsb2NhbElucHV0LmlzVmFsaWQoKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKCFpc1VuZGVmaW5lZCh1bml0cykgPyB1bml0cyA6ICdtaWxsaXNlY29uZCcpO1xuICAgICAgICBpZiAodW5pdHMgPT09ICdtaWxsaXNlY29uZCcpIHtcbiAgICAgICAgICAgIHJldHVybiArdGhpcyA+ICtsb2NhbElucHV0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuICtsb2NhbElucHV0IDwgK3RoaXMuY2xvbmUoKS5zdGFydE9mKHVuaXRzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzQmVmb3JlIChpbnB1dCwgdW5pdHMpIHtcbiAgICAgICAgdmFyIGxvY2FsSW5wdXQgPSBpc01vbWVudChpbnB1dCkgPyBpbnB1dCA6IGxvY2FsX19jcmVhdGVMb2NhbChpbnB1dCk7XG4gICAgICAgIGlmICghKHRoaXMuaXNWYWxpZCgpICYmIGxvY2FsSW5wdXQuaXNWYWxpZCgpKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHMoIWlzVW5kZWZpbmVkKHVuaXRzKSA/IHVuaXRzIDogJ21pbGxpc2Vjb25kJyk7XG4gICAgICAgIGlmICh1bml0cyA9PT0gJ21pbGxpc2Vjb25kJykge1xuICAgICAgICAgICAgcmV0dXJuICt0aGlzIDwgK2xvY2FsSW5wdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gK3RoaXMuY2xvbmUoKS5lbmRPZih1bml0cykgPCArbG9jYWxJbnB1dDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzQmV0d2VlbiAoZnJvbSwgdG8sIHVuaXRzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzQWZ0ZXIoZnJvbSwgdW5pdHMpICYmIHRoaXMuaXNCZWZvcmUodG8sIHVuaXRzKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1NhbWUgKGlucHV0LCB1bml0cykge1xuICAgICAgICB2YXIgbG9jYWxJbnB1dCA9IGlzTW9tZW50KGlucHV0KSA/IGlucHV0IDogbG9jYWxfX2NyZWF0ZUxvY2FsKGlucHV0KSxcbiAgICAgICAgICAgIGlucHV0TXM7XG4gICAgICAgIGlmICghKHRoaXMuaXNWYWxpZCgpICYmIGxvY2FsSW5wdXQuaXNWYWxpZCgpKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMgfHwgJ21pbGxpc2Vjb25kJyk7XG4gICAgICAgIGlmICh1bml0cyA9PT0gJ21pbGxpc2Vjb25kJykge1xuICAgICAgICAgICAgcmV0dXJuICt0aGlzID09PSArbG9jYWxJbnB1dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlucHV0TXMgPSArbG9jYWxJbnB1dDtcbiAgICAgICAgICAgIHJldHVybiArKHRoaXMuY2xvbmUoKS5zdGFydE9mKHVuaXRzKSkgPD0gaW5wdXRNcyAmJiBpbnB1dE1zIDw9ICsodGhpcy5jbG9uZSgpLmVuZE9mKHVuaXRzKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1NhbWVPckFmdGVyIChpbnB1dCwgdW5pdHMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNTYW1lKGlucHV0LCB1bml0cykgfHwgdGhpcy5pc0FmdGVyKGlucHV0LHVuaXRzKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1NhbWVPckJlZm9yZSAoaW5wdXQsIHVuaXRzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzU2FtZShpbnB1dCwgdW5pdHMpIHx8IHRoaXMuaXNCZWZvcmUoaW5wdXQsdW5pdHMpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRpZmYgKGlucHV0LCB1bml0cywgYXNGbG9hdCkge1xuICAgICAgICB2YXIgdGhhdCxcbiAgICAgICAgICAgIHpvbmVEZWx0YSxcbiAgICAgICAgICAgIGRlbHRhLCBvdXRwdXQ7XG5cbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIE5hTjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoYXQgPSBjbG9uZVdpdGhPZmZzZXQoaW5wdXQsIHRoaXMpO1xuXG4gICAgICAgIGlmICghdGhhdC5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBOYU47XG4gICAgICAgIH1cblxuICAgICAgICB6b25lRGVsdGEgPSAodGhhdC51dGNPZmZzZXQoKSAtIHRoaXMudXRjT2Zmc2V0KCkpICogNmU0O1xuXG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuXG4gICAgICAgIGlmICh1bml0cyA9PT0gJ3llYXInIHx8IHVuaXRzID09PSAnbW9udGgnIHx8IHVuaXRzID09PSAncXVhcnRlcicpIHtcbiAgICAgICAgICAgIG91dHB1dCA9IG1vbnRoRGlmZih0aGlzLCB0aGF0KTtcbiAgICAgICAgICAgIGlmICh1bml0cyA9PT0gJ3F1YXJ0ZXInKSB7XG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gb3V0cHV0IC8gMztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodW5pdHMgPT09ICd5ZWFyJykge1xuICAgICAgICAgICAgICAgIG91dHB1dCA9IG91dHB1dCAvIDEyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGVsdGEgPSB0aGlzIC0gdGhhdDtcbiAgICAgICAgICAgIG91dHB1dCA9IHVuaXRzID09PSAnc2Vjb25kJyA/IGRlbHRhIC8gMWUzIDogLy8gMTAwMFxuICAgICAgICAgICAgICAgIHVuaXRzID09PSAnbWludXRlJyA/IGRlbHRhIC8gNmU0IDogLy8gMTAwMCAqIDYwXG4gICAgICAgICAgICAgICAgdW5pdHMgPT09ICdob3VyJyA/IGRlbHRhIC8gMzZlNSA6IC8vIDEwMDAgKiA2MCAqIDYwXG4gICAgICAgICAgICAgICAgdW5pdHMgPT09ICdkYXknID8gKGRlbHRhIC0gem9uZURlbHRhKSAvIDg2NGU1IDogLy8gMTAwMCAqIDYwICogNjAgKiAyNCwgbmVnYXRlIGRzdFxuICAgICAgICAgICAgICAgIHVuaXRzID09PSAnd2VlaycgPyAoZGVsdGEgLSB6b25lRGVsdGEpIC8gNjA0OGU1IDogLy8gMTAwMCAqIDYwICogNjAgKiAyNCAqIDcsIG5lZ2F0ZSBkc3RcbiAgICAgICAgICAgICAgICBkZWx0YTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXNGbG9hdCA/IG91dHB1dCA6IGFic0Zsb29yKG91dHB1dCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbW9udGhEaWZmIChhLCBiKSB7XG4gICAgICAgIC8vIGRpZmZlcmVuY2UgaW4gbW9udGhzXG4gICAgICAgIHZhciB3aG9sZU1vbnRoRGlmZiA9ICgoYi55ZWFyKCkgLSBhLnllYXIoKSkgKiAxMikgKyAoYi5tb250aCgpIC0gYS5tb250aCgpKSxcbiAgICAgICAgICAgIC8vIGIgaXMgaW4gKGFuY2hvciAtIDEgbW9udGgsIGFuY2hvciArIDEgbW9udGgpXG4gICAgICAgICAgICBhbmNob3IgPSBhLmNsb25lKCkuYWRkKHdob2xlTW9udGhEaWZmLCAnbW9udGhzJyksXG4gICAgICAgICAgICBhbmNob3IyLCBhZGp1c3Q7XG5cbiAgICAgICAgaWYgKGIgLSBhbmNob3IgPCAwKSB7XG4gICAgICAgICAgICBhbmNob3IyID0gYS5jbG9uZSgpLmFkZCh3aG9sZU1vbnRoRGlmZiAtIDEsICdtb250aHMnKTtcbiAgICAgICAgICAgIC8vIGxpbmVhciBhY3Jvc3MgdGhlIG1vbnRoXG4gICAgICAgICAgICBhZGp1c3QgPSAoYiAtIGFuY2hvcikgLyAoYW5jaG9yIC0gYW5jaG9yMik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhbmNob3IyID0gYS5jbG9uZSgpLmFkZCh3aG9sZU1vbnRoRGlmZiArIDEsICdtb250aHMnKTtcbiAgICAgICAgICAgIC8vIGxpbmVhciBhY3Jvc3MgdGhlIG1vbnRoXG4gICAgICAgICAgICBhZGp1c3QgPSAoYiAtIGFuY2hvcikgLyAoYW5jaG9yMiAtIGFuY2hvcik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gLSh3aG9sZU1vbnRoRGlmZiArIGFkanVzdCk7XG4gICAgfVxuXG4gICAgdXRpbHNfaG9va3NfX2hvb2tzLmRlZmF1bHRGb3JtYXQgPSAnWVlZWS1NTS1ERFRISDptbTpzc1onO1xuXG4gICAgZnVuY3Rpb24gdG9TdHJpbmcgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmxvY2FsZSgnZW4nKS5mb3JtYXQoJ2RkZCBNTU0gREQgWVlZWSBISDptbTpzcyBbR01UXVpaJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbW9tZW50X2Zvcm1hdF9fdG9JU09TdHJpbmcgKCkge1xuICAgICAgICB2YXIgbSA9IHRoaXMuY2xvbmUoKS51dGMoKTtcbiAgICAgICAgaWYgKDAgPCBtLnllYXIoKSAmJiBtLnllYXIoKSA8PSA5OTk5KSB7XG4gICAgICAgICAgICBpZiAoaXNGdW5jdGlvbihEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZykpIHtcbiAgICAgICAgICAgICAgICAvLyBuYXRpdmUgaW1wbGVtZW50YXRpb24gaXMgfjUweCBmYXN0ZXIsIHVzZSBpdCB3aGVuIHdlIGNhblxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnRvRGF0ZSgpLnRvSVNPU3RyaW5nKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBmb3JtYXRNb21lbnQobSwgJ1lZWVktTU0tRERbVF1ISDptbTpzcy5TU1NbWl0nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBmb3JtYXRNb21lbnQobSwgJ1lZWVlZWS1NTS1ERFtUXUhIOm1tOnNzLlNTU1taXScpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZm9ybWF0IChpbnB1dFN0cmluZykge1xuICAgICAgICB2YXIgb3V0cHV0ID0gZm9ybWF0TW9tZW50KHRoaXMsIGlucHV0U3RyaW5nIHx8IHV0aWxzX2hvb2tzX19ob29rcy5kZWZhdWx0Rm9ybWF0KTtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLnBvc3Rmb3JtYXQob3V0cHV0KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmcm9tICh0aW1lLCB3aXRob3V0U3VmZml4KSB7XG4gICAgICAgIGlmICh0aGlzLmlzVmFsaWQoKSAmJlxuICAgICAgICAgICAgICAgICgoaXNNb21lbnQodGltZSkgJiYgdGltZS5pc1ZhbGlkKCkpIHx8XG4gICAgICAgICAgICAgICAgIGxvY2FsX19jcmVhdGVMb2NhbCh0aW1lKS5pc1ZhbGlkKCkpKSB7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlX19jcmVhdGVEdXJhdGlvbih7dG86IHRoaXMsIGZyb206IHRpbWV9KS5sb2NhbGUodGhpcy5sb2NhbGUoKSkuaHVtYW5pemUoIXdpdGhvdXRTdWZmaXgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLmludmFsaWREYXRlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmcm9tTm93ICh3aXRob3V0U3VmZml4KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZyb20obG9jYWxfX2NyZWF0ZUxvY2FsKCksIHdpdGhvdXRTdWZmaXgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvICh0aW1lLCB3aXRob3V0U3VmZml4KSB7XG4gICAgICAgIGlmICh0aGlzLmlzVmFsaWQoKSAmJlxuICAgICAgICAgICAgICAgICgoaXNNb21lbnQodGltZSkgJiYgdGltZS5pc1ZhbGlkKCkpIHx8XG4gICAgICAgICAgICAgICAgIGxvY2FsX19jcmVhdGVMb2NhbCh0aW1lKS5pc1ZhbGlkKCkpKSB7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlX19jcmVhdGVEdXJhdGlvbih7ZnJvbTogdGhpcywgdG86IHRpbWV9KS5sb2NhbGUodGhpcy5sb2NhbGUoKSkuaHVtYW5pemUoIXdpdGhvdXRTdWZmaXgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLmludmFsaWREYXRlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b05vdyAod2l0aG91dFN1ZmZpeCkge1xuICAgICAgICByZXR1cm4gdGhpcy50byhsb2NhbF9fY3JlYXRlTG9jYWwoKSwgd2l0aG91dFN1ZmZpeCk7XG4gICAgfVxuXG4gICAgLy8gSWYgcGFzc2VkIGEgbG9jYWxlIGtleSwgaXQgd2lsbCBzZXQgdGhlIGxvY2FsZSBmb3IgdGhpc1xuICAgIC8vIGluc3RhbmNlLiAgT3RoZXJ3aXNlLCBpdCB3aWxsIHJldHVybiB0aGUgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbiAgICAvLyB2YXJpYWJsZXMgZm9yIHRoaXMgaW5zdGFuY2UuXG4gICAgZnVuY3Rpb24gbG9jYWxlIChrZXkpIHtcbiAgICAgICAgdmFyIG5ld0xvY2FsZURhdGE7XG5cbiAgICAgICAgaWYgKGtleSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbG9jYWxlLl9hYmJyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbmV3TG9jYWxlRGF0YSA9IGxvY2FsZV9sb2NhbGVzX19nZXRMb2NhbGUoa2V5KTtcbiAgICAgICAgICAgIGlmIChuZXdMb2NhbGVEYXRhICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9sb2NhbGUgPSBuZXdMb2NhbGVEYXRhO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgbGFuZyA9IGRlcHJlY2F0ZShcbiAgICAgICAgJ21vbWVudCgpLmxhbmcoKSBpcyBkZXByZWNhdGVkLiBJbnN0ZWFkLCB1c2UgbW9tZW50KCkubG9jYWxlRGF0YSgpIHRvIGdldCB0aGUgbGFuZ3VhZ2UgY29uZmlndXJhdGlvbi4gVXNlIG1vbWVudCgpLmxvY2FsZSgpIHRvIGNoYW5nZSBsYW5ndWFnZXMuJyxcbiAgICAgICAgZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgaWYgKGtleSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGUoa2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICk7XG5cbiAgICBmdW5jdGlvbiBsb2NhbGVEYXRhICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xvY2FsZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzdGFydE9mICh1bml0cykge1xuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTtcbiAgICAgICAgLy8gdGhlIGZvbGxvd2luZyBzd2l0Y2ggaW50ZW50aW9uYWxseSBvbWl0cyBicmVhayBrZXl3b3Jkc1xuICAgICAgICAvLyB0byB1dGlsaXplIGZhbGxpbmcgdGhyb3VnaCB0aGUgY2FzZXMuXG4gICAgICAgIHN3aXRjaCAodW5pdHMpIHtcbiAgICAgICAgY2FzZSAneWVhcic6XG4gICAgICAgICAgICB0aGlzLm1vbnRoKDApO1xuICAgICAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgICBjYXNlICdxdWFydGVyJzpcbiAgICAgICAgY2FzZSAnbW9udGgnOlxuICAgICAgICAgICAgdGhpcy5kYXRlKDEpO1xuICAgICAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgICBjYXNlICd3ZWVrJzpcbiAgICAgICAgY2FzZSAnaXNvV2Vlayc6XG4gICAgICAgIGNhc2UgJ2RheSc6XG4gICAgICAgICAgICB0aGlzLmhvdXJzKDApO1xuICAgICAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgICBjYXNlICdob3VyJzpcbiAgICAgICAgICAgIHRoaXMubWludXRlcygwKTtcbiAgICAgICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgICAgY2FzZSAnbWludXRlJzpcbiAgICAgICAgICAgIHRoaXMuc2Vjb25kcygwKTtcbiAgICAgICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgICAgY2FzZSAnc2Vjb25kJzpcbiAgICAgICAgICAgIHRoaXMubWlsbGlzZWNvbmRzKDApO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gd2Vla3MgYXJlIGEgc3BlY2lhbCBjYXNlXG4gICAgICAgIGlmICh1bml0cyA9PT0gJ3dlZWsnKSB7XG4gICAgICAgICAgICB0aGlzLndlZWtkYXkoMCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHVuaXRzID09PSAnaXNvV2VlaycpIHtcbiAgICAgICAgICAgIHRoaXMuaXNvV2Vla2RheSgxKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHF1YXJ0ZXJzIGFyZSBhbHNvIHNwZWNpYWxcbiAgICAgICAgaWYgKHVuaXRzID09PSAncXVhcnRlcicpIHtcbiAgICAgICAgICAgIHRoaXMubW9udGgoTWF0aC5mbG9vcih0aGlzLm1vbnRoKCkgLyAzKSAqIDMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZW5kT2YgKHVuaXRzKSB7XG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuICAgICAgICBpZiAodW5pdHMgPT09IHVuZGVmaW5lZCB8fCB1bml0cyA9PT0gJ21pbGxpc2Vjb25kJykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhcnRPZih1bml0cykuYWRkKDEsICh1bml0cyA9PT0gJ2lzb1dlZWsnID8gJ3dlZWsnIDogdW5pdHMpKS5zdWJ0cmFjdCgxLCAnbXMnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b190eXBlX192YWx1ZU9mICgpIHtcbiAgICAgICAgcmV0dXJuICt0aGlzLl9kIC0gKCh0aGlzLl9vZmZzZXQgfHwgMCkgKiA2MDAwMCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdW5peCAoKSB7XG4gICAgICAgIHJldHVybiBNYXRoLmZsb29yKCt0aGlzIC8gMTAwMCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9EYXRlICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX29mZnNldCA/IG5ldyBEYXRlKCt0aGlzKSA6IHRoaXMuX2Q7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9BcnJheSAoKSB7XG4gICAgICAgIHZhciBtID0gdGhpcztcbiAgICAgICAgcmV0dXJuIFttLnllYXIoKSwgbS5tb250aCgpLCBtLmRhdGUoKSwgbS5ob3VyKCksIG0ubWludXRlKCksIG0uc2Vjb25kKCksIG0ubWlsbGlzZWNvbmQoKV07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9PYmplY3QgKCkge1xuICAgICAgICB2YXIgbSA9IHRoaXM7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB5ZWFyczogbS55ZWFyKCksXG4gICAgICAgICAgICBtb250aHM6IG0ubW9udGgoKSxcbiAgICAgICAgICAgIGRhdGU6IG0uZGF0ZSgpLFxuICAgICAgICAgICAgaG91cnM6IG0uaG91cnMoKSxcbiAgICAgICAgICAgIG1pbnV0ZXM6IG0ubWludXRlcygpLFxuICAgICAgICAgICAgc2Vjb25kczogbS5zZWNvbmRzKCksXG4gICAgICAgICAgICBtaWxsaXNlY29uZHM6IG0ubWlsbGlzZWNvbmRzKClcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b0pTT04gKCkge1xuICAgICAgICAvLyBKU09OLnN0cmluZ2lmeShuZXcgRGF0ZShOYU4pKSA9PT0gJ251bGwnXG4gICAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQoKSA/IHRoaXMudG9JU09TdHJpbmcoKSA6ICdudWxsJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb21lbnRfdmFsaWRfX2lzVmFsaWQgKCkge1xuICAgICAgICByZXR1cm4gdmFsaWRfX2lzVmFsaWQodGhpcyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2luZ0ZsYWdzICgpIHtcbiAgICAgICAgcmV0dXJuIGV4dGVuZCh7fSwgZ2V0UGFyc2luZ0ZsYWdzKHRoaXMpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnZhbGlkQXQgKCkge1xuICAgICAgICByZXR1cm4gZ2V0UGFyc2luZ0ZsYWdzKHRoaXMpLm92ZXJmbG93O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0aW9uRGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGlucHV0OiB0aGlzLl9pLFxuICAgICAgICAgICAgZm9ybWF0OiB0aGlzLl9mLFxuICAgICAgICAgICAgbG9jYWxlOiB0aGlzLl9sb2NhbGUsXG4gICAgICAgICAgICBpc1VUQzogdGhpcy5faXNVVEMsXG4gICAgICAgICAgICBzdHJpY3Q6IHRoaXMuX3N0cmljdFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnZ2cnLCAyXSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy53ZWVrWWVhcigpICUgMTAwO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydHRycsIDJdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzb1dlZWtZZWFyKCkgJSAxMDA7XG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiBhZGRXZWVrWWVhckZvcm1hdFRva2VuICh0b2tlbiwgZ2V0dGVyKSB7XG4gICAgICAgIGFkZEZvcm1hdFRva2VuKDAsIFt0b2tlbiwgdG9rZW4ubGVuZ3RoXSwgMCwgZ2V0dGVyKTtcbiAgICB9XG5cbiAgICBhZGRXZWVrWWVhckZvcm1hdFRva2VuKCdnZ2dnJywgICAgICd3ZWVrWWVhcicpO1xuICAgIGFkZFdlZWtZZWFyRm9ybWF0VG9rZW4oJ2dnZ2dnJywgICAgJ3dlZWtZZWFyJyk7XG4gICAgYWRkV2Vla1llYXJGb3JtYXRUb2tlbignR0dHRycsICAnaXNvV2Vla1llYXInKTtcbiAgICBhZGRXZWVrWWVhckZvcm1hdFRva2VuKCdHR0dHRycsICdpc29XZWVrWWVhcicpO1xuXG4gICAgLy8gQUxJQVNFU1xuXG4gICAgYWRkVW5pdEFsaWFzKCd3ZWVrWWVhcicsICdnZycpO1xuICAgIGFkZFVuaXRBbGlhcygnaXNvV2Vla1llYXInLCAnR0cnKTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ0cnLCAgICAgIG1hdGNoU2lnbmVkKTtcbiAgICBhZGRSZWdleFRva2VuKCdnJywgICAgICBtYXRjaFNpZ25lZCk7XG4gICAgYWRkUmVnZXhUb2tlbignR0cnLCAgICAgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2dnJywgICAgIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbiAgICBhZGRSZWdleFRva2VuKCdHR0dHJywgICBtYXRjaDF0bzQsIG1hdGNoNCk7XG4gICAgYWRkUmVnZXhUb2tlbignZ2dnZycsICAgbWF0Y2gxdG80LCBtYXRjaDQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0dHR0dHJywgIG1hdGNoMXRvNiwgbWF0Y2g2KTtcbiAgICBhZGRSZWdleFRva2VuKCdnZ2dnZycsICBtYXRjaDF0bzYsIG1hdGNoNik7XG5cbiAgICBhZGRXZWVrUGFyc2VUb2tlbihbJ2dnZ2cnLCAnZ2dnZ2cnLCAnR0dHRycsICdHR0dHRyddLCBmdW5jdGlvbiAoaW5wdXQsIHdlZWssIGNvbmZpZywgdG9rZW4pIHtcbiAgICAgICAgd2Vla1t0b2tlbi5zdWJzdHIoMCwgMildID0gdG9JbnQoaW5wdXQpO1xuICAgIH0pO1xuXG4gICAgYWRkV2Vla1BhcnNlVG9rZW4oWydnZycsICdHRyddLCBmdW5jdGlvbiAoaW5wdXQsIHdlZWssIGNvbmZpZywgdG9rZW4pIHtcbiAgICAgICAgd2Vla1t0b2tlbl0gPSB1dGlsc19ob29rc19faG9va3MucGFyc2VUd29EaWdpdFllYXIoaW5wdXQpO1xuICAgIH0pO1xuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgZnVuY3Rpb24gZ2V0U2V0V2Vla1llYXIgKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBnZXRTZXRXZWVrWWVhckhlbHBlci5jYWxsKHRoaXMsXG4gICAgICAgICAgICAgICAgaW5wdXQsXG4gICAgICAgICAgICAgICAgdGhpcy53ZWVrKCksXG4gICAgICAgICAgICAgICAgdGhpcy53ZWVrZGF5KCksXG4gICAgICAgICAgICAgICAgdGhpcy5sb2NhbGVEYXRhKCkuX3dlZWsuZG93LFxuICAgICAgICAgICAgICAgIHRoaXMubG9jYWxlRGF0YSgpLl93ZWVrLmRveSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U2V0SVNPV2Vla1llYXIgKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBnZXRTZXRXZWVrWWVhckhlbHBlci5jYWxsKHRoaXMsXG4gICAgICAgICAgICAgICAgaW5wdXQsIHRoaXMuaXNvV2VlaygpLCB0aGlzLmlzb1dlZWtkYXkoKSwgMSwgNCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0SVNPV2Vla3NJblllYXIgKCkge1xuICAgICAgICByZXR1cm4gd2Vla3NJblllYXIodGhpcy55ZWFyKCksIDEsIDQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFdlZWtzSW5ZZWFyICgpIHtcbiAgICAgICAgdmFyIHdlZWtJbmZvID0gdGhpcy5sb2NhbGVEYXRhKCkuX3dlZWs7XG4gICAgICAgIHJldHVybiB3ZWVrc0luWWVhcih0aGlzLnllYXIoKSwgd2Vla0luZm8uZG93LCB3ZWVrSW5mby5kb3kpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFNldFdlZWtZZWFySGVscGVyKGlucHV0LCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSkge1xuICAgICAgICB2YXIgd2Vla3NUYXJnZXQ7XG4gICAgICAgIGlmIChpbnB1dCA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gd2Vla09mWWVhcih0aGlzLCBkb3csIGRveSkueWVhcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHdlZWtzVGFyZ2V0ID0gd2Vla3NJblllYXIoaW5wdXQsIGRvdywgZG95KTtcbiAgICAgICAgICAgIGlmICh3ZWVrID4gd2Vla3NUYXJnZXQpIHtcbiAgICAgICAgICAgICAgICB3ZWVrID0gd2Vla3NUYXJnZXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc2V0V2Vla0FsbC5jYWxsKHRoaXMsIGlucHV0LCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRXZWVrQWxsKHdlZWtZZWFyLCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSkge1xuICAgICAgICB2YXIgZGF5T2ZZZWFyRGF0YSA9IGRheU9mWWVhckZyb21XZWVrcyh3ZWVrWWVhciwgd2Vlaywgd2Vla2RheSwgZG93LCBkb3kpLFxuICAgICAgICAgICAgZGF0ZSA9IGNyZWF0ZVVUQ0RhdGUoZGF5T2ZZZWFyRGF0YS55ZWFyLCAwLCBkYXlPZlllYXJEYXRhLmRheU9mWWVhcik7XG5cbiAgICAgICAgLy8gY29uc29sZS5sb2coXCJnb3RcIiwgd2Vla1llYXIsIHdlZWssIHdlZWtkYXksIFwic2V0XCIsIGRhdGUudG9JU09TdHJpbmcoKSk7XG4gICAgICAgIHRoaXMueWVhcihkYXRlLmdldFVUQ0Z1bGxZZWFyKCkpO1xuICAgICAgICB0aGlzLm1vbnRoKGRhdGUuZ2V0VVRDTW9udGgoKSk7XG4gICAgICAgIHRoaXMuZGF0ZShkYXRlLmdldFVUQ0RhdGUoKSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCdRJywgMCwgJ1FvJywgJ3F1YXJ0ZXInKTtcblxuICAgIC8vIEFMSUFTRVNcblxuICAgIGFkZFVuaXRBbGlhcygncXVhcnRlcicsICdRJyk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdRJywgbWF0Y2gxKTtcbiAgICBhZGRQYXJzZVRva2VuKCdRJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgICAgICBhcnJheVtNT05USF0gPSAodG9JbnQoaW5wdXQpIC0gMSkgKiAzO1xuICAgIH0pO1xuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgZnVuY3Rpb24gZ2V0U2V0UXVhcnRlciAoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0ID09IG51bGwgPyBNYXRoLmNlaWwoKHRoaXMubW9udGgoKSArIDEpIC8gMykgOiB0aGlzLm1vbnRoKChpbnB1dCAtIDEpICogMyArIHRoaXMubW9udGgoKSAlIDMpO1xuICAgIH1cblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCd3JywgWyd3dycsIDJdLCAnd28nLCAnd2VlaycpO1xuICAgIGFkZEZvcm1hdFRva2VuKCdXJywgWydXVycsIDJdLCAnV28nLCAnaXNvV2VlaycpO1xuXG4gICAgLy8gQUxJQVNFU1xuXG4gICAgYWRkVW5pdEFsaWFzKCd3ZWVrJywgJ3cnKTtcbiAgICBhZGRVbml0QWxpYXMoJ2lzb1dlZWsnLCAnVycpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbigndycsICBtYXRjaDF0bzIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ3d3JywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1cnLCAgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCdXVycsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcblxuICAgIGFkZFdlZWtQYXJzZVRva2VuKFsndycsICd3dycsICdXJywgJ1dXJ10sIGZ1bmN0aW9uIChpbnB1dCwgd2VlaywgY29uZmlnLCB0b2tlbikge1xuICAgICAgICB3ZWVrW3Rva2VuLnN1YnN0cigwLCAxKV0gPSB0b0ludChpbnB1dCk7XG4gICAgfSk7XG5cbiAgICAvLyBIRUxQRVJTXG5cbiAgICAvLyBMT0NBTEVTXG5cbiAgICBmdW5jdGlvbiBsb2NhbGVXZWVrIChtb20pIHtcbiAgICAgICAgcmV0dXJuIHdlZWtPZlllYXIobW9tLCB0aGlzLl93ZWVrLmRvdywgdGhpcy5fd2Vlay5kb3kpLndlZWs7XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRMb2NhbGVXZWVrID0ge1xuICAgICAgICBkb3cgOiAwLCAvLyBTdW5kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgZG95IDogNiAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gMXN0IGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBsb2NhbGVGaXJzdERheU9mV2VlayAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl93ZWVrLmRvdztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2NhbGVGaXJzdERheU9mWWVhciAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl93ZWVrLmRveTtcbiAgICB9XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICBmdW5jdGlvbiBnZXRTZXRXZWVrIChpbnB1dCkge1xuICAgICAgICB2YXIgd2VlayA9IHRoaXMubG9jYWxlRGF0YSgpLndlZWsodGhpcyk7XG4gICAgICAgIHJldHVybiBpbnB1dCA9PSBudWxsID8gd2VlayA6IHRoaXMuYWRkKChpbnB1dCAtIHdlZWspICogNywgJ2QnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTZXRJU09XZWVrIChpbnB1dCkge1xuICAgICAgICB2YXIgd2VlayA9IHdlZWtPZlllYXIodGhpcywgMSwgNCkud2VlaztcbiAgICAgICAgcmV0dXJuIGlucHV0ID09IG51bGwgPyB3ZWVrIDogdGhpcy5hZGQoKGlucHV0IC0gd2VlaykgKiA3LCAnZCcpO1xuICAgIH1cblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCdEJywgWydERCcsIDJdLCAnRG8nLCAnZGF0ZScpO1xuXG4gICAgLy8gQUxJQVNFU1xuXG4gICAgYWRkVW5pdEFsaWFzKCdkYXRlJywgJ0QnKTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ0QnLCAgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCdERCcsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbiAgICBhZGRSZWdleFRva2VuKCdEbycsIGZ1bmN0aW9uIChpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgICAgIHJldHVybiBpc1N0cmljdCA/IGxvY2FsZS5fb3JkaW5hbFBhcnNlIDogbG9jYWxlLl9vcmRpbmFsUGFyc2VMZW5pZW50O1xuICAgIH0pO1xuXG4gICAgYWRkUGFyc2VUb2tlbihbJ0QnLCAnREQnXSwgREFURSk7XG4gICAgYWRkUGFyc2VUb2tlbignRG8nLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgICAgIGFycmF5W0RBVEVdID0gdG9JbnQoaW5wdXQubWF0Y2gobWF0Y2gxdG8yKVswXSwgMTApO1xuICAgIH0pO1xuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgdmFyIGdldFNldERheU9mTW9udGggPSBtYWtlR2V0U2V0KCdEYXRlJywgdHJ1ZSk7XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbignZCcsIDAsICdkbycsICdkYXknKTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdkZCcsIDAsIDAsIGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLndlZWtkYXlzTWluKHRoaXMsIGZvcm1hdCk7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignZGRkJywgMCwgMCwgZnVuY3Rpb24gKGZvcm1hdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkud2Vla2RheXNTaG9ydCh0aGlzLCBmb3JtYXQpO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ2RkZGQnLCAwLCAwLCBmdW5jdGlvbiAoZm9ybWF0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS53ZWVrZGF5cyh0aGlzLCBmb3JtYXQpO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ2UnLCAwLCAwLCAnd2Vla2RheScpO1xuICAgIGFkZEZvcm1hdFRva2VuKCdFJywgMCwgMCwgJ2lzb1dlZWtkYXknKTtcblxuICAgIC8vIEFMSUFTRVNcblxuICAgIGFkZFVuaXRBbGlhcygnZGF5JywgJ2QnKTtcbiAgICBhZGRVbml0QWxpYXMoJ3dlZWtkYXknLCAnZScpO1xuICAgIGFkZFVuaXRBbGlhcygnaXNvV2Vla2RheScsICdFJyk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdkJywgICAgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCdlJywgICAgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCdFJywgICAgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCdkZCcsICAgbWF0Y2hXb3JkKTtcbiAgICBhZGRSZWdleFRva2VuKCdkZGQnLCAgbWF0Y2hXb3JkKTtcbiAgICBhZGRSZWdleFRva2VuKCdkZGRkJywgbWF0Y2hXb3JkKTtcblxuICAgIGFkZFdlZWtQYXJzZVRva2VuKFsnZGQnLCAnZGRkJywgJ2RkZGQnXSwgZnVuY3Rpb24gKGlucHV0LCB3ZWVrLCBjb25maWcsIHRva2VuKSB7XG4gICAgICAgIHZhciB3ZWVrZGF5ID0gY29uZmlnLl9sb2NhbGUud2Vla2RheXNQYXJzZShpbnB1dCwgdG9rZW4sIGNvbmZpZy5fc3RyaWN0KTtcbiAgICAgICAgLy8gaWYgd2UgZGlkbid0IGdldCBhIHdlZWtkYXkgbmFtZSwgbWFyayB0aGUgZGF0ZSBhcyBpbnZhbGlkXG4gICAgICAgIGlmICh3ZWVrZGF5ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHdlZWsuZCA9IHdlZWtkYXk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5pbnZhbGlkV2Vla2RheSA9IGlucHV0O1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBhZGRXZWVrUGFyc2VUb2tlbihbJ2QnLCAnZScsICdFJ10sIGZ1bmN0aW9uIChpbnB1dCwgd2VlaywgY29uZmlnLCB0b2tlbikge1xuICAgICAgICB3ZWVrW3Rva2VuXSA9IHRvSW50KGlucHV0KTtcbiAgICB9KTtcblxuICAgIC8vIEhFTFBFUlNcblxuICAgIGZ1bmN0aW9uIHBhcnNlV2Vla2RheShpbnB1dCwgbG9jYWxlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaW5wdXQgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWlzTmFOKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIHBhcnNlSW50KGlucHV0LCAxMCk7XG4gICAgICAgIH1cblxuICAgICAgICBpbnB1dCA9IGxvY2FsZS53ZWVrZGF5c1BhcnNlKGlucHV0KTtcbiAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIC8vIExPQ0FMRVNcblxuICAgIHZhciBkZWZhdWx0TG9jYWxlV2Vla2RheXMgPSAnU3VuZGF5X01vbmRheV9UdWVzZGF5X1dlZG5lc2RheV9UaHVyc2RheV9GcmlkYXlfU2F0dXJkYXknLnNwbGl0KCdfJyk7XG4gICAgZnVuY3Rpb24gbG9jYWxlV2Vla2RheXMgKG0sIGZvcm1hdCkge1xuICAgICAgICByZXR1cm4gaXNBcnJheSh0aGlzLl93ZWVrZGF5cykgPyB0aGlzLl93ZWVrZGF5c1ttLmRheSgpXSA6XG4gICAgICAgICAgICB0aGlzLl93ZWVrZGF5c1t0aGlzLl93ZWVrZGF5cy5pc0Zvcm1hdC50ZXN0KGZvcm1hdCkgPyAnZm9ybWF0JyA6ICdzdGFuZGFsb25lJ11bbS5kYXkoKV07XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRMb2NhbGVXZWVrZGF5c1Nob3J0ID0gJ1N1bl9Nb25fVHVlX1dlZF9UaHVfRnJpX1NhdCcuc3BsaXQoJ18nKTtcbiAgICBmdW5jdGlvbiBsb2NhbGVXZWVrZGF5c1Nob3J0IChtKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c1Nob3J0W20uZGF5KCldO1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0TG9jYWxlV2Vla2RheXNNaW4gPSAnU3VfTW9fVHVfV2VfVGhfRnJfU2EnLnNwbGl0KCdfJyk7XG4gICAgZnVuY3Rpb24gbG9jYWxlV2Vla2RheXNNaW4gKG0pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzTWluW20uZGF5KCldO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvY2FsZVdlZWtkYXlzUGFyc2UgKHdlZWtkYXlOYW1lLCBmb3JtYXQsIHN0cmljdCkge1xuICAgICAgICB2YXIgaSwgbW9tLCByZWdleDtcblxuICAgICAgICBpZiAoIXRoaXMuX3dlZWtkYXlzUGFyc2UpIHtcbiAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzUGFyc2UgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX21pbldlZWtkYXlzUGFyc2UgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fZnVsbFdlZWtkYXlzUGFyc2UgPSBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCA3OyBpKyspIHtcbiAgICAgICAgICAgIC8vIG1ha2UgdGhlIHJlZ2V4IGlmIHdlIGRvbid0IGhhdmUgaXQgYWxyZWFkeVxuXG4gICAgICAgICAgICBtb20gPSBsb2NhbF9fY3JlYXRlTG9jYWwoWzIwMDAsIDFdKS5kYXkoaSk7XG4gICAgICAgICAgICBpZiAoc3RyaWN0ICYmICF0aGlzLl9mdWxsV2Vla2RheXNQYXJzZVtpXSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2Z1bGxXZWVrZGF5c1BhcnNlW2ldID0gbmV3IFJlZ0V4cCgnXicgKyB0aGlzLndlZWtkYXlzKG1vbSwgJycpLnJlcGxhY2UoJy4nLCAnXFwuPycpICsgJyQnLCAnaScpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZVtpXSA9IG5ldyBSZWdFeHAoJ14nICsgdGhpcy53ZWVrZGF5c1Nob3J0KG1vbSwgJycpLnJlcGxhY2UoJy4nLCAnXFwuPycpICsgJyQnLCAnaScpO1xuICAgICAgICAgICAgICAgIHRoaXMuX21pbldlZWtkYXlzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKCdeJyArIHRoaXMud2Vla2RheXNNaW4obW9tLCAnJykucmVwbGFjZSgnLicsICdcXC4/JykgKyAnJCcsICdpJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXRoaXMuX3dlZWtkYXlzUGFyc2VbaV0pIHtcbiAgICAgICAgICAgICAgICByZWdleCA9ICdeJyArIHRoaXMud2Vla2RheXMobW9tLCAnJykgKyAnfF4nICsgdGhpcy53ZWVrZGF5c1Nob3J0KG1vbSwgJycpICsgJ3xeJyArIHRoaXMud2Vla2RheXNNaW4obW9tLCAnJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNQYXJzZVtpXSA9IG5ldyBSZWdFeHAocmVnZXgucmVwbGFjZSgnLicsICcnKSwgJ2knKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHRlc3QgdGhlIHJlZ2V4XG4gICAgICAgICAgICBpZiAoc3RyaWN0ICYmIGZvcm1hdCA9PT0gJ2RkZGQnICYmIHRoaXMuX2Z1bGxXZWVrZGF5c1BhcnNlW2ldLnRlc3Qod2Vla2RheU5hbWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHN0cmljdCAmJiBmb3JtYXQgPT09ICdkZGQnICYmIHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZVtpXS50ZXN0KHdlZWtkYXlOYW1lKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChzdHJpY3QgJiYgZm9ybWF0ID09PSAnZGQnICYmIHRoaXMuX21pbldlZWtkYXlzUGFyc2VbaV0udGVzdCh3ZWVrZGF5TmFtZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIXN0cmljdCAmJiB0aGlzLl93ZWVrZGF5c1BhcnNlW2ldLnRlc3Qod2Vla2RheU5hbWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICBmdW5jdGlvbiBnZXRTZXREYXlPZldlZWsgKGlucHV0KSB7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dCAhPSBudWxsID8gdGhpcyA6IE5hTjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZGF5ID0gdGhpcy5faXNVVEMgPyB0aGlzLl9kLmdldFVUQ0RheSgpIDogdGhpcy5fZC5nZXREYXkoKTtcbiAgICAgICAgaWYgKGlucHV0ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlucHV0ID0gcGFyc2VXZWVrZGF5KGlucHV0LCB0aGlzLmxvY2FsZURhdGEoKSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hZGQoaW5wdXQgLSBkYXksICdkJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZGF5O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U2V0TG9jYWxlRGF5T2ZXZWVrIChpbnB1dCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQgIT0gbnVsbCA/IHRoaXMgOiBOYU47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHdlZWtkYXkgPSAodGhpcy5kYXkoKSArIDcgLSB0aGlzLmxvY2FsZURhdGEoKS5fd2Vlay5kb3cpICUgNztcbiAgICAgICAgcmV0dXJuIGlucHV0ID09IG51bGwgPyB3ZWVrZGF5IDogdGhpcy5hZGQoaW5wdXQgLSB3ZWVrZGF5LCAnZCcpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFNldElTT0RheU9mV2VlayAoaW5wdXQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0ICE9IG51bGwgPyB0aGlzIDogTmFOO1xuICAgICAgICB9XG4gICAgICAgIC8vIGJlaGF2ZXMgdGhlIHNhbWUgYXMgbW9tZW50I2RheSBleGNlcHRcbiAgICAgICAgLy8gYXMgYSBnZXR0ZXIsIHJldHVybnMgNyBpbnN0ZWFkIG9mIDAgKDEtNyByYW5nZSBpbnN0ZWFkIG9mIDAtNilcbiAgICAgICAgLy8gYXMgYSBzZXR0ZXIsIHN1bmRheSBzaG91bGQgYmVsb25nIHRvIHRoZSBwcmV2aW91cyB3ZWVrLlxuICAgICAgICByZXR1cm4gaW5wdXQgPT0gbnVsbCA/IHRoaXMuZGF5KCkgfHwgNyA6IHRoaXMuZGF5KHRoaXMuZGF5KCkgJSA3ID8gaW5wdXQgOiBpbnB1dCAtIDcpO1xuICAgIH1cblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCdEREQnLCBbJ0REREQnLCAzXSwgJ0RERG8nLCAnZGF5T2ZZZWFyJyk7XG5cbiAgICAvLyBBTElBU0VTXG5cbiAgICBhZGRVbml0QWxpYXMoJ2RheU9mWWVhcicsICdEREQnKTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ0RERCcsICBtYXRjaDF0bzMpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0REREQnLCBtYXRjaDMpO1xuICAgIGFkZFBhcnNlVG9rZW4oWydEREQnLCAnRERERCddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgY29uZmlnLl9kYXlPZlllYXIgPSB0b0ludChpbnB1dCk7XG4gICAgfSk7XG5cbiAgICAvLyBIRUxQRVJTXG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICBmdW5jdGlvbiBnZXRTZXREYXlPZlllYXIgKGlucHV0KSB7XG4gICAgICAgIHZhciBkYXlPZlllYXIgPSBNYXRoLnJvdW5kKCh0aGlzLmNsb25lKCkuc3RhcnRPZignZGF5JykgLSB0aGlzLmNsb25lKCkuc3RhcnRPZigneWVhcicpKSAvIDg2NGU1KSArIDE7XG4gICAgICAgIHJldHVybiBpbnB1dCA9PSBudWxsID8gZGF5T2ZZZWFyIDogdGhpcy5hZGQoKGlucHV0IC0gZGF5T2ZZZWFyKSwgJ2QnKTtcbiAgICB9XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBmdW5jdGlvbiBoRm9ybWF0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ob3VycygpICUgMTIgfHwgMTI7XG4gICAgfVxuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ0gnLCBbJ0hIJywgMl0sIDAsICdob3VyJyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oJ2gnLCBbJ2hoJywgMl0sIDAsIGhGb3JtYXQpO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ2htbScsIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICcnICsgaEZvcm1hdC5hcHBseSh0aGlzKSArIHplcm9GaWxsKHRoaXMubWludXRlcygpLCAyKTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdobW1zcycsIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICcnICsgaEZvcm1hdC5hcHBseSh0aGlzKSArIHplcm9GaWxsKHRoaXMubWludXRlcygpLCAyKSArXG4gICAgICAgICAgICB6ZXJvRmlsbCh0aGlzLnNlY29uZHMoKSwgMik7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignSG1tJywgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gJycgKyB0aGlzLmhvdXJzKCkgKyB6ZXJvRmlsbCh0aGlzLm1pbnV0ZXMoKSwgMik7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignSG1tc3MnLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAnJyArIHRoaXMuaG91cnMoKSArIHplcm9GaWxsKHRoaXMubWludXRlcygpLCAyKSArXG4gICAgICAgICAgICB6ZXJvRmlsbCh0aGlzLnNlY29uZHMoKSwgMik7XG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiBtZXJpZGllbSAodG9rZW4sIGxvd2VyY2FzZSkge1xuICAgICAgICBhZGRGb3JtYXRUb2tlbih0b2tlbiwgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLm1lcmlkaWVtKHRoaXMuaG91cnMoKSwgdGhpcy5taW51dGVzKCksIGxvd2VyY2FzZSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIG1lcmlkaWVtKCdhJywgdHJ1ZSk7XG4gICAgbWVyaWRpZW0oJ0EnLCBmYWxzZSk7XG5cbiAgICAvLyBBTElBU0VTXG5cbiAgICBhZGRVbml0QWxpYXMoJ2hvdXInLCAnaCcpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgZnVuY3Rpb24gbWF0Y2hNZXJpZGllbSAoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLl9tZXJpZGllbVBhcnNlO1xuICAgIH1cblxuICAgIGFkZFJlZ2V4VG9rZW4oJ2EnLCAgbWF0Y2hNZXJpZGllbSk7XG4gICAgYWRkUmVnZXhUb2tlbignQScsICBtYXRjaE1lcmlkaWVtKTtcbiAgICBhZGRSZWdleFRva2VuKCdIJywgIG1hdGNoMXRvMik7XG4gICAgYWRkUmVnZXhUb2tlbignaCcsICBtYXRjaDF0bzIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0hIJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2hoJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuXG4gICAgYWRkUmVnZXhUb2tlbignaG1tJywgbWF0Y2gzdG80KTtcbiAgICBhZGRSZWdleFRva2VuKCdobW1zcycsIG1hdGNoNXRvNik7XG4gICAgYWRkUmVnZXhUb2tlbignSG1tJywgbWF0Y2gzdG80KTtcbiAgICBhZGRSZWdleFRva2VuKCdIbW1zcycsIG1hdGNoNXRvNik7XG5cbiAgICBhZGRQYXJzZVRva2VuKFsnSCcsICdISCddLCBIT1VSKTtcbiAgICBhZGRQYXJzZVRva2VuKFsnYScsICdBJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICBjb25maWcuX2lzUG0gPSBjb25maWcuX2xvY2FsZS5pc1BNKGlucHV0KTtcbiAgICAgICAgY29uZmlnLl9tZXJpZGllbSA9IGlucHV0O1xuICAgIH0pO1xuICAgIGFkZFBhcnNlVG9rZW4oWydoJywgJ2hoJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICBhcnJheVtIT1VSXSA9IHRvSW50KGlucHV0KTtcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuYmlnSG91ciA9IHRydWU7XG4gICAgfSk7XG4gICAgYWRkUGFyc2VUb2tlbignaG1tJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIHZhciBwb3MgPSBpbnB1dC5sZW5ndGggLSAyO1xuICAgICAgICBhcnJheVtIT1VSXSA9IHRvSW50KGlucHV0LnN1YnN0cigwLCBwb3MpKTtcbiAgICAgICAgYXJyYXlbTUlOVVRFXSA9IHRvSW50KGlucHV0LnN1YnN0cihwb3MpKTtcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuYmlnSG91ciA9IHRydWU7XG4gICAgfSk7XG4gICAgYWRkUGFyc2VUb2tlbignaG1tc3MnLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgdmFyIHBvczEgPSBpbnB1dC5sZW5ndGggLSA0O1xuICAgICAgICB2YXIgcG9zMiA9IGlucHV0Lmxlbmd0aCAtIDI7XG4gICAgICAgIGFycmF5W0hPVVJdID0gdG9JbnQoaW5wdXQuc3Vic3RyKDAsIHBvczEpKTtcbiAgICAgICAgYXJyYXlbTUlOVVRFXSA9IHRvSW50KGlucHV0LnN1YnN0cihwb3MxLCAyKSk7XG4gICAgICAgIGFycmF5W1NFQ09ORF0gPSB0b0ludChpbnB1dC5zdWJzdHIocG9zMikpO1xuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5iaWdIb3VyID0gdHJ1ZTtcbiAgICB9KTtcbiAgICBhZGRQYXJzZVRva2VuKCdIbW0nLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgdmFyIHBvcyA9IGlucHV0Lmxlbmd0aCAtIDI7XG4gICAgICAgIGFycmF5W0hPVVJdID0gdG9JbnQoaW5wdXQuc3Vic3RyKDAsIHBvcykpO1xuICAgICAgICBhcnJheVtNSU5VVEVdID0gdG9JbnQoaW5wdXQuc3Vic3RyKHBvcykpO1xuICAgIH0pO1xuICAgIGFkZFBhcnNlVG9rZW4oJ0htbXNzJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIHZhciBwb3MxID0gaW5wdXQubGVuZ3RoIC0gNDtcbiAgICAgICAgdmFyIHBvczIgPSBpbnB1dC5sZW5ndGggLSAyO1xuICAgICAgICBhcnJheVtIT1VSXSA9IHRvSW50KGlucHV0LnN1YnN0cigwLCBwb3MxKSk7XG4gICAgICAgIGFycmF5W01JTlVURV0gPSB0b0ludChpbnB1dC5zdWJzdHIocG9zMSwgMikpO1xuICAgICAgICBhcnJheVtTRUNPTkRdID0gdG9JbnQoaW5wdXQuc3Vic3RyKHBvczIpKTtcbiAgICB9KTtcblxuICAgIC8vIExPQ0FMRVNcblxuICAgIGZ1bmN0aW9uIGxvY2FsZUlzUE0gKGlucHV0KSB7XG4gICAgICAgIC8vIElFOCBRdWlya3MgTW9kZSAmIElFNyBTdGFuZGFyZHMgTW9kZSBkbyBub3QgYWxsb3cgYWNjZXNzaW5nIHN0cmluZ3MgbGlrZSBhcnJheXNcbiAgICAgICAgLy8gVXNpbmcgY2hhckF0IHNob3VsZCBiZSBtb3JlIGNvbXBhdGlibGUuXG4gICAgICAgIHJldHVybiAoKGlucHV0ICsgJycpLnRvTG93ZXJDYXNlKCkuY2hhckF0KDApID09PSAncCcpO1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0TG9jYWxlTWVyaWRpZW1QYXJzZSA9IC9bYXBdXFwuP20/XFwuPy9pO1xuICAgIGZ1bmN0aW9uIGxvY2FsZU1lcmlkaWVtIChob3VycywgbWludXRlcywgaXNMb3dlcikge1xuICAgICAgICBpZiAoaG91cnMgPiAxMSkge1xuICAgICAgICAgICAgcmV0dXJuIGlzTG93ZXIgPyAncG0nIDogJ1BNJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID8gJ2FtJyA6ICdBTSc7XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIC8vIE1PTUVOVFNcblxuICAgIC8vIFNldHRpbmcgdGhlIGhvdXIgc2hvdWxkIGtlZXAgdGhlIHRpbWUsIGJlY2F1c2UgdGhlIHVzZXIgZXhwbGljaXRseVxuICAgIC8vIHNwZWNpZmllZCB3aGljaCBob3VyIGhlIHdhbnRzLiBTbyB0cnlpbmcgdG8gbWFpbnRhaW4gdGhlIHNhbWUgaG91ciAoaW5cbiAgICAvLyBhIG5ldyB0aW1lem9uZSkgbWFrZXMgc2Vuc2UuIEFkZGluZy9zdWJ0cmFjdGluZyBob3VycyBkb2VzIG5vdCBmb2xsb3dcbiAgICAvLyB0aGlzIHJ1bGUuXG4gICAgdmFyIGdldFNldEhvdXIgPSBtYWtlR2V0U2V0KCdIb3VycycsIHRydWUpO1xuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ20nLCBbJ21tJywgMl0sIDAsICdtaW51dGUnKTtcblxuICAgIC8vIEFMSUFTRVNcblxuICAgIGFkZFVuaXRBbGlhcygnbWludXRlJywgJ20nKTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ20nLCAgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCdtbScsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbiAgICBhZGRQYXJzZVRva2VuKFsnbScsICdtbSddLCBNSU5VVEUpO1xuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgdmFyIGdldFNldE1pbnV0ZSA9IG1ha2VHZXRTZXQoJ01pbnV0ZXMnLCBmYWxzZSk7XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbigncycsIFsnc3MnLCAyXSwgMCwgJ3NlY29uZCcpO1xuXG4gICAgLy8gQUxJQVNFU1xuXG4gICAgYWRkVW5pdEFsaWFzKCdzZWNvbmQnLCAncycpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbigncycsICBtYXRjaDF0bzIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ3NzJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFBhcnNlVG9rZW4oWydzJywgJ3NzJ10sIFNFQ09ORCk7XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICB2YXIgZ2V0U2V0U2Vjb25kID0gbWFrZUdldFNldCgnU2Vjb25kcycsIGZhbHNlKTtcblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCdTJywgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gfn4odGhpcy5taWxsaXNlY29uZCgpIC8gMTAwKTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnU1MnLCAyXSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gfn4odGhpcy5taWxsaXNlY29uZCgpIC8gMTApO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydTU1MnLCAzXSwgMCwgJ21pbGxpc2Vjb25kJyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTJywgNF0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWlsbGlzZWNvbmQoKSAqIDEwO1xuICAgIH0pO1xuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnU1NTU1MnLCA1XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZCgpICogMTAwO1xuICAgIH0pO1xuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnU1NTU1NTJywgNl0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWlsbGlzZWNvbmQoKSAqIDEwMDA7XG4gICAgfSk7XG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTU1NTJywgN10sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWlsbGlzZWNvbmQoKSAqIDEwMDAwO1xuICAgIH0pO1xuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnU1NTU1NTU1MnLCA4XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZCgpICogMTAwMDAwO1xuICAgIH0pO1xuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnU1NTU1NTU1NTJywgOV0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWlsbGlzZWNvbmQoKSAqIDEwMDAwMDA7XG4gICAgfSk7XG5cblxuICAgIC8vIEFMSUFTRVNcblxuICAgIGFkZFVuaXRBbGlhcygnbWlsbGlzZWNvbmQnLCAnbXMnKTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ1MnLCAgICBtYXRjaDF0bzMsIG1hdGNoMSk7XG4gICAgYWRkUmVnZXhUb2tlbignU1MnLCAgIG1hdGNoMXRvMywgbWF0Y2gyKTtcbiAgICBhZGRSZWdleFRva2VuKCdTU1MnLCAgbWF0Y2gxdG8zLCBtYXRjaDMpO1xuXG4gICAgdmFyIHRva2VuO1xuICAgIGZvciAodG9rZW4gPSAnU1NTUyc7IHRva2VuLmxlbmd0aCA8PSA5OyB0b2tlbiArPSAnUycpIHtcbiAgICAgICAgYWRkUmVnZXhUb2tlbih0b2tlbiwgbWF0Y2hVbnNpZ25lZCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VNcyhpbnB1dCwgYXJyYXkpIHtcbiAgICAgICAgYXJyYXlbTUlMTElTRUNPTkRdID0gdG9JbnQoKCcwLicgKyBpbnB1dCkgKiAxMDAwKTtcbiAgICB9XG5cbiAgICBmb3IgKHRva2VuID0gJ1MnOyB0b2tlbi5sZW5ndGggPD0gOTsgdG9rZW4gKz0gJ1MnKSB7XG4gICAgICAgIGFkZFBhcnNlVG9rZW4odG9rZW4sIHBhcnNlTXMpO1xuICAgIH1cbiAgICAvLyBNT01FTlRTXG5cbiAgICB2YXIgZ2V0U2V0TWlsbGlzZWNvbmQgPSBtYWtlR2V0U2V0KCdNaWxsaXNlY29uZHMnLCBmYWxzZSk7XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbigneicsICAwLCAwLCAnem9uZUFiYnInKTtcbiAgICBhZGRGb3JtYXRUb2tlbignenonLCAwLCAwLCAnem9uZU5hbWUnKTtcblxuICAgIC8vIE1PTUVOVFNcblxuICAgIGZ1bmN0aW9uIGdldFpvbmVBYmJyICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzVVRDID8gJ1VUQycgOiAnJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRab25lTmFtZSAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc1VUQyA/ICdDb29yZGluYXRlZCBVbml2ZXJzYWwgVGltZScgOiAnJztcbiAgICB9XG5cbiAgICB2YXIgbW9tZW50UHJvdG90eXBlX19wcm90byA9IE1vbWVudC5wcm90b3R5cGU7XG5cbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLmFkZCAgICAgICAgICAgICAgID0gYWRkX3N1YnRyYWN0X19hZGQ7XG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by5jYWxlbmRhciAgICAgICAgICA9IG1vbWVudF9jYWxlbmRhcl9fY2FsZW5kYXI7XG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by5jbG9uZSAgICAgICAgICAgICA9IGNsb25lO1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8uZGlmZiAgICAgICAgICAgICAgPSBkaWZmO1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8uZW5kT2YgICAgICAgICAgICAgPSBlbmRPZjtcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLmZvcm1hdCAgICAgICAgICAgID0gZm9ybWF0O1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8uZnJvbSAgICAgICAgICAgICAgPSBmcm9tO1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8uZnJvbU5vdyAgICAgICAgICAgPSBmcm9tTm93O1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8udG8gICAgICAgICAgICAgICAgPSB0bztcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLnRvTm93ICAgICAgICAgICAgID0gdG9Ob3c7XG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by5nZXQgICAgICAgICAgICAgICA9IGdldFNldDtcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLmludmFsaWRBdCAgICAgICAgID0gaW52YWxpZEF0O1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8uaXNBZnRlciAgICAgICAgICAgPSBpc0FmdGVyO1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8uaXNCZWZvcmUgICAgICAgICAgPSBpc0JlZm9yZTtcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLmlzQmV0d2VlbiAgICAgICAgID0gaXNCZXR3ZWVuO1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8uaXNTYW1lICAgICAgICAgICAgPSBpc1NhbWU7XG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by5pc1NhbWVPckFmdGVyICAgICA9IGlzU2FtZU9yQWZ0ZXI7XG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by5pc1NhbWVPckJlZm9yZSAgICA9IGlzU2FtZU9yQmVmb3JlO1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8uaXNWYWxpZCAgICAgICAgICAgPSBtb21lbnRfdmFsaWRfX2lzVmFsaWQ7XG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by5sYW5nICAgICAgICAgICAgICA9IGxhbmc7XG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by5sb2NhbGUgICAgICAgICAgICA9IGxvY2FsZTtcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLmxvY2FsZURhdGEgICAgICAgID0gbG9jYWxlRGF0YTtcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLm1heCAgICAgICAgICAgICAgID0gcHJvdG90eXBlTWF4O1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8ubWluICAgICAgICAgICAgICAgPSBwcm90b3R5cGVNaW47XG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by5wYXJzaW5nRmxhZ3MgICAgICA9IHBhcnNpbmdGbGFncztcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLnNldCAgICAgICAgICAgICAgID0gZ2V0U2V0O1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8uc3RhcnRPZiAgICAgICAgICAgPSBzdGFydE9mO1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8uc3VidHJhY3QgICAgICAgICAgPSBhZGRfc3VidHJhY3RfX3N1YnRyYWN0O1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8udG9BcnJheSAgICAgICAgICAgPSB0b0FycmF5O1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8udG9PYmplY3QgICAgICAgICAgPSB0b09iamVjdDtcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLnRvRGF0ZSAgICAgICAgICAgID0gdG9EYXRlO1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8udG9JU09TdHJpbmcgICAgICAgPSBtb21lbnRfZm9ybWF0X190b0lTT1N0cmluZztcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLnRvSlNPTiAgICAgICAgICAgID0gdG9KU09OO1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8udG9TdHJpbmcgICAgICAgICAgPSB0b1N0cmluZztcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLnVuaXggICAgICAgICAgICAgID0gdW5peDtcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLnZhbHVlT2YgICAgICAgICAgID0gdG9fdHlwZV9fdmFsdWVPZjtcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLmNyZWF0aW9uRGF0YSAgICAgID0gY3JlYXRpb25EYXRhO1xuXG4gICAgLy8gWWVhclxuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8ueWVhciAgICAgICA9IGdldFNldFllYXI7XG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by5pc0xlYXBZZWFyID0gZ2V0SXNMZWFwWWVhcjtcblxuICAgIC8vIFdlZWsgWWVhclxuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8ud2Vla1llYXIgICAgPSBnZXRTZXRXZWVrWWVhcjtcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLmlzb1dlZWtZZWFyID0gZ2V0U2V0SVNPV2Vla1llYXI7XG5cbiAgICAvLyBRdWFydGVyXG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by5xdWFydGVyID0gbW9tZW50UHJvdG90eXBlX19wcm90by5xdWFydGVycyA9IGdldFNldFF1YXJ0ZXI7XG5cbiAgICAvLyBNb250aFxuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8ubW9udGggICAgICAgPSBnZXRTZXRNb250aDtcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLmRheXNJbk1vbnRoID0gZ2V0RGF5c0luTW9udGg7XG5cbiAgICAvLyBXZWVrXG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by53ZWVrICAgICAgICAgICA9IG1vbWVudFByb3RvdHlwZV9fcHJvdG8ud2Vla3MgICAgICAgID0gZ2V0U2V0V2VlaztcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLmlzb1dlZWsgICAgICAgID0gbW9tZW50UHJvdG90eXBlX19wcm90by5pc29XZWVrcyAgICAgPSBnZXRTZXRJU09XZWVrO1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8ud2Vla3NJblllYXIgICAgPSBnZXRXZWVrc0luWWVhcjtcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLmlzb1dlZWtzSW5ZZWFyID0gZ2V0SVNPV2Vla3NJblllYXI7XG5cbiAgICAvLyBEYXlcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLmRhdGUgICAgICAgPSBnZXRTZXREYXlPZk1vbnRoO1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8uZGF5ICAgICAgICA9IG1vbWVudFByb3RvdHlwZV9fcHJvdG8uZGF5cyAgICAgICAgICAgICA9IGdldFNldERheU9mV2VlaztcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLndlZWtkYXkgICAgPSBnZXRTZXRMb2NhbGVEYXlPZldlZWs7XG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by5pc29XZWVrZGF5ID0gZ2V0U2V0SVNPRGF5T2ZXZWVrO1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8uZGF5T2ZZZWFyICA9IGdldFNldERheU9mWWVhcjtcblxuICAgIC8vIEhvdXJcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLmhvdXIgPSBtb21lbnRQcm90b3R5cGVfX3Byb3RvLmhvdXJzID0gZ2V0U2V0SG91cjtcblxuICAgIC8vIE1pbnV0ZVxuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8ubWludXRlID0gbW9tZW50UHJvdG90eXBlX19wcm90by5taW51dGVzID0gZ2V0U2V0TWludXRlO1xuXG4gICAgLy8gU2Vjb25kXG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by5zZWNvbmQgPSBtb21lbnRQcm90b3R5cGVfX3Byb3RvLnNlY29uZHMgPSBnZXRTZXRTZWNvbmQ7XG5cbiAgICAvLyBNaWxsaXNlY29uZFxuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8ubWlsbGlzZWNvbmQgPSBtb21lbnRQcm90b3R5cGVfX3Byb3RvLm1pbGxpc2Vjb25kcyA9IGdldFNldE1pbGxpc2Vjb25kO1xuXG4gICAgLy8gT2Zmc2V0XG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by51dGNPZmZzZXQgICAgICAgICAgICA9IGdldFNldE9mZnNldDtcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLnV0YyAgICAgICAgICAgICAgICAgID0gc2V0T2Zmc2V0VG9VVEM7XG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by5sb2NhbCAgICAgICAgICAgICAgICA9IHNldE9mZnNldFRvTG9jYWw7XG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by5wYXJzZVpvbmUgICAgICAgICAgICA9IHNldE9mZnNldFRvUGFyc2VkT2Zmc2V0O1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8uaGFzQWxpZ25lZEhvdXJPZmZzZXQgPSBoYXNBbGlnbmVkSG91ck9mZnNldDtcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLmlzRFNUICAgICAgICAgICAgICAgID0gaXNEYXlsaWdodFNhdmluZ1RpbWU7XG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by5pc0RTVFNoaWZ0ZWQgICAgICAgICA9IGlzRGF5bGlnaHRTYXZpbmdUaW1lU2hpZnRlZDtcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLmlzTG9jYWwgICAgICAgICAgICAgID0gaXNMb2NhbDtcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLmlzVXRjT2Zmc2V0ICAgICAgICAgID0gaXNVdGNPZmZzZXQ7XG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by5pc1V0YyAgICAgICAgICAgICAgICA9IGlzVXRjO1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8uaXNVVEMgICAgICAgICAgICAgICAgPSBpc1V0YztcblxuICAgIC8vIFRpbWV6b25lXG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by56b25lQWJiciA9IGdldFpvbmVBYmJyO1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8uem9uZU5hbWUgPSBnZXRab25lTmFtZTtcblxuICAgIC8vIERlcHJlY2F0aW9uc1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8uZGF0ZXMgID0gZGVwcmVjYXRlKCdkYXRlcyBhY2Nlc3NvciBpcyBkZXByZWNhdGVkLiBVc2UgZGF0ZSBpbnN0ZWFkLicsIGdldFNldERheU9mTW9udGgpO1xuICAgIG1vbWVudFByb3RvdHlwZV9fcHJvdG8ubW9udGhzID0gZGVwcmVjYXRlKCdtb250aHMgYWNjZXNzb3IgaXMgZGVwcmVjYXRlZC4gVXNlIG1vbnRoIGluc3RlYWQnLCBnZXRTZXRNb250aCk7XG4gICAgbW9tZW50UHJvdG90eXBlX19wcm90by55ZWFycyAgPSBkZXByZWNhdGUoJ3llYXJzIGFjY2Vzc29yIGlzIGRlcHJlY2F0ZWQuIFVzZSB5ZWFyIGluc3RlYWQnLCBnZXRTZXRZZWFyKTtcbiAgICBtb21lbnRQcm90b3R5cGVfX3Byb3RvLnpvbmUgICA9IGRlcHJlY2F0ZSgnbW9tZW50KCkuem9uZSBpcyBkZXByZWNhdGVkLCB1c2UgbW9tZW50KCkudXRjT2Zmc2V0IGluc3RlYWQuIGh0dHBzOi8vZ2l0aHViLmNvbS9tb21lbnQvbW9tZW50L2lzc3Vlcy8xNzc5JywgZ2V0U2V0Wm9uZSk7XG5cbiAgICB2YXIgbW9tZW50UHJvdG90eXBlID0gbW9tZW50UHJvdG90eXBlX19wcm90bztcblxuICAgIGZ1bmN0aW9uIG1vbWVudF9fY3JlYXRlVW5peCAoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsX19jcmVhdGVMb2NhbChpbnB1dCAqIDEwMDApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1vbWVudF9fY3JlYXRlSW5ab25lICgpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsX19jcmVhdGVMb2NhbC5hcHBseShudWxsLCBhcmd1bWVudHMpLnBhcnNlWm9uZSgpO1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0Q2FsZW5kYXIgPSB7XG4gICAgICAgIHNhbWVEYXkgOiAnW1RvZGF5IGF0XSBMVCcsXG4gICAgICAgIG5leHREYXkgOiAnW1RvbW9ycm93IGF0XSBMVCcsXG4gICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW2F0XSBMVCcsXG4gICAgICAgIGxhc3REYXkgOiAnW1llc3RlcmRheSBhdF0gTFQnLFxuICAgICAgICBsYXN0V2VlayA6ICdbTGFzdF0gZGRkZCBbYXRdIExUJyxcbiAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gbG9jYWxlX2NhbGVuZGFyX19jYWxlbmRhciAoa2V5LCBtb20sIG5vdykge1xuICAgICAgICB2YXIgb3V0cHV0ID0gdGhpcy5fY2FsZW5kYXJba2V5XTtcbiAgICAgICAgcmV0dXJuIGlzRnVuY3Rpb24ob3V0cHV0KSA/IG91dHB1dC5jYWxsKG1vbSwgbm93KSA6IG91dHB1dDtcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdExvbmdEYXRlRm9ybWF0ID0ge1xuICAgICAgICBMVFMgIDogJ2g6bW06c3MgQScsXG4gICAgICAgIExUICAgOiAnaDptbSBBJyxcbiAgICAgICAgTCAgICA6ICdNTS9ERC9ZWVlZJyxcbiAgICAgICAgTEwgICA6ICdNTU1NIEQsIFlZWVknLFxuICAgICAgICBMTEwgIDogJ01NTU0gRCwgWVlZWSBoOm1tIEEnLFxuICAgICAgICBMTExMIDogJ2RkZGQsIE1NTU0gRCwgWVlZWSBoOm1tIEEnXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGxvbmdEYXRlRm9ybWF0IChrZXkpIHtcbiAgICAgICAgdmFyIGZvcm1hdCA9IHRoaXMuX2xvbmdEYXRlRm9ybWF0W2tleV0sXG4gICAgICAgICAgICBmb3JtYXRVcHBlciA9IHRoaXMuX2xvbmdEYXRlRm9ybWF0W2tleS50b1VwcGVyQ2FzZSgpXTtcblxuICAgICAgICBpZiAoZm9ybWF0IHx8ICFmb3JtYXRVcHBlcikge1xuICAgICAgICAgICAgcmV0dXJuIGZvcm1hdDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2xvbmdEYXRlRm9ybWF0W2tleV0gPSBmb3JtYXRVcHBlci5yZXBsYWNlKC9NTU1NfE1NfEREfGRkZGQvZywgZnVuY3Rpb24gKHZhbCkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbC5zbGljZSgxKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX2xvbmdEYXRlRm9ybWF0W2tleV07XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRJbnZhbGlkRGF0ZSA9ICdJbnZhbGlkIGRhdGUnO1xuXG4gICAgZnVuY3Rpb24gaW52YWxpZERhdGUgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faW52YWxpZERhdGU7XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRPcmRpbmFsID0gJyVkJztcbiAgICB2YXIgZGVmYXVsdE9yZGluYWxQYXJzZSA9IC9cXGR7MSwyfS87XG5cbiAgICBmdW5jdGlvbiBvcmRpbmFsIChudW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX29yZGluYWwucmVwbGFjZSgnJWQnLCBudW1iZXIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHByZVBhcnNlUG9zdEZvcm1hdCAoc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRSZWxhdGl2ZVRpbWUgPSB7XG4gICAgICAgIGZ1dHVyZSA6ICdpbiAlcycsXG4gICAgICAgIHBhc3QgICA6ICclcyBhZ28nLFxuICAgICAgICBzICA6ICdhIGZldyBzZWNvbmRzJyxcbiAgICAgICAgbSAgOiAnYSBtaW51dGUnLFxuICAgICAgICBtbSA6ICclZCBtaW51dGVzJyxcbiAgICAgICAgaCAgOiAnYW4gaG91cicsXG4gICAgICAgIGhoIDogJyVkIGhvdXJzJyxcbiAgICAgICAgZCAgOiAnYSBkYXknLFxuICAgICAgICBkZCA6ICclZCBkYXlzJyxcbiAgICAgICAgTSAgOiAnYSBtb250aCcsXG4gICAgICAgIE1NIDogJyVkIG1vbnRocycsXG4gICAgICAgIHkgIDogJ2EgeWVhcicsXG4gICAgICAgIHl5IDogJyVkIHllYXJzJ1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiByZWxhdGl2ZV9fcmVsYXRpdmVUaW1lIChudW1iZXIsIHdpdGhvdXRTdWZmaXgsIHN0cmluZywgaXNGdXR1cmUpIHtcbiAgICAgICAgdmFyIG91dHB1dCA9IHRoaXMuX3JlbGF0aXZlVGltZVtzdHJpbmddO1xuICAgICAgICByZXR1cm4gKGlzRnVuY3Rpb24ob3V0cHV0KSkgP1xuICAgICAgICAgICAgb3V0cHV0KG51bWJlciwgd2l0aG91dFN1ZmZpeCwgc3RyaW5nLCBpc0Z1dHVyZSkgOlxuICAgICAgICAgICAgb3V0cHV0LnJlcGxhY2UoLyVkL2ksIG51bWJlcik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFzdEZ1dHVyZSAoZGlmZiwgb3V0cHV0KSB7XG4gICAgICAgIHZhciBmb3JtYXQgPSB0aGlzLl9yZWxhdGl2ZVRpbWVbZGlmZiA+IDAgPyAnZnV0dXJlJyA6ICdwYXN0J107XG4gICAgICAgIHJldHVybiBpc0Z1bmN0aW9uKGZvcm1hdCkgPyBmb3JtYXQob3V0cHV0KSA6IGZvcm1hdC5yZXBsYWNlKC8lcy9pLCBvdXRwdXQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvY2FsZV9zZXRfX3NldCAoY29uZmlnKSB7XG4gICAgICAgIHZhciBwcm9wLCBpO1xuICAgICAgICBmb3IgKGkgaW4gY29uZmlnKSB7XG4gICAgICAgICAgICBwcm9wID0gY29uZmlnW2ldO1xuICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24ocHJvcCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzW2ldID0gcHJvcDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpc1snXycgKyBpXSA9IHByb3A7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gTGVuaWVudCBvcmRpbmFsIHBhcnNpbmcgYWNjZXB0cyBqdXN0IGEgbnVtYmVyIGluIGFkZGl0aW9uIHRvXG4gICAgICAgIC8vIG51bWJlciArIChwb3NzaWJseSkgc3R1ZmYgY29taW5nIGZyb20gX29yZGluYWxQYXJzZUxlbmllbnQuXG4gICAgICAgIHRoaXMuX29yZGluYWxQYXJzZUxlbmllbnQgPSBuZXcgUmVnRXhwKHRoaXMuX29yZGluYWxQYXJzZS5zb3VyY2UgKyAnfCcgKyAoL1xcZHsxLDJ9Lykuc291cmNlKTtcbiAgICB9XG5cbiAgICB2YXIgcHJvdG90eXBlX19wcm90byA9IExvY2FsZS5wcm90b3R5cGU7XG5cbiAgICBwcm90b3R5cGVfX3Byb3RvLl9jYWxlbmRhciAgICAgICA9IGRlZmF1bHRDYWxlbmRhcjtcbiAgICBwcm90b3R5cGVfX3Byb3RvLmNhbGVuZGFyICAgICAgICA9IGxvY2FsZV9jYWxlbmRhcl9fY2FsZW5kYXI7XG4gICAgcHJvdG90eXBlX19wcm90by5fbG9uZ0RhdGVGb3JtYXQgPSBkZWZhdWx0TG9uZ0RhdGVGb3JtYXQ7XG4gICAgcHJvdG90eXBlX19wcm90by5sb25nRGF0ZUZvcm1hdCAgPSBsb25nRGF0ZUZvcm1hdDtcbiAgICBwcm90b3R5cGVfX3Byb3RvLl9pbnZhbGlkRGF0ZSAgICA9IGRlZmF1bHRJbnZhbGlkRGF0ZTtcbiAgICBwcm90b3R5cGVfX3Byb3RvLmludmFsaWREYXRlICAgICA9IGludmFsaWREYXRlO1xuICAgIHByb3RvdHlwZV9fcHJvdG8uX29yZGluYWwgICAgICAgID0gZGVmYXVsdE9yZGluYWw7XG4gICAgcHJvdG90eXBlX19wcm90by5vcmRpbmFsICAgICAgICAgPSBvcmRpbmFsO1xuICAgIHByb3RvdHlwZV9fcHJvdG8uX29yZGluYWxQYXJzZSAgID0gZGVmYXVsdE9yZGluYWxQYXJzZTtcbiAgICBwcm90b3R5cGVfX3Byb3RvLnByZXBhcnNlICAgICAgICA9IHByZVBhcnNlUG9zdEZvcm1hdDtcbiAgICBwcm90b3R5cGVfX3Byb3RvLnBvc3Rmb3JtYXQgICAgICA9IHByZVBhcnNlUG9zdEZvcm1hdDtcbiAgICBwcm90b3R5cGVfX3Byb3RvLl9yZWxhdGl2ZVRpbWUgICA9IGRlZmF1bHRSZWxhdGl2ZVRpbWU7XG4gICAgcHJvdG90eXBlX19wcm90by5yZWxhdGl2ZVRpbWUgICAgPSByZWxhdGl2ZV9fcmVsYXRpdmVUaW1lO1xuICAgIHByb3RvdHlwZV9fcHJvdG8ucGFzdEZ1dHVyZSAgICAgID0gcGFzdEZ1dHVyZTtcbiAgICBwcm90b3R5cGVfX3Byb3RvLnNldCAgICAgICAgICAgICA9IGxvY2FsZV9zZXRfX3NldDtcblxuICAgIC8vIE1vbnRoXG4gICAgcHJvdG90eXBlX19wcm90by5tb250aHMgICAgICAgICAgICA9ICAgICAgICBsb2NhbGVNb250aHM7XG4gICAgcHJvdG90eXBlX19wcm90by5fbW9udGhzICAgICAgICAgICA9IGRlZmF1bHRMb2NhbGVNb250aHM7XG4gICAgcHJvdG90eXBlX19wcm90by5tb250aHNTaG9ydCAgICAgICA9ICAgICAgICBsb2NhbGVNb250aHNTaG9ydDtcbiAgICBwcm90b3R5cGVfX3Byb3RvLl9tb250aHNTaG9ydCAgICAgID0gZGVmYXVsdExvY2FsZU1vbnRoc1Nob3J0O1xuICAgIHByb3RvdHlwZV9fcHJvdG8ubW9udGhzUGFyc2UgICAgICAgPSAgICAgICAgbG9jYWxlTW9udGhzUGFyc2U7XG4gICAgcHJvdG90eXBlX19wcm90by5fbW9udGhzUmVnZXggICAgICA9IGRlZmF1bHRNb250aHNSZWdleDtcbiAgICBwcm90b3R5cGVfX3Byb3RvLm1vbnRoc1JlZ2V4ICAgICAgID0gbW9udGhzUmVnZXg7XG4gICAgcHJvdG90eXBlX19wcm90by5fbW9udGhzU2hvcnRSZWdleCA9IGRlZmF1bHRNb250aHNTaG9ydFJlZ2V4O1xuICAgIHByb3RvdHlwZV9fcHJvdG8ubW9udGhzU2hvcnRSZWdleCAgPSBtb250aHNTaG9ydFJlZ2V4O1xuXG4gICAgLy8gV2Vla1xuICAgIHByb3RvdHlwZV9fcHJvdG8ud2VlayA9IGxvY2FsZVdlZWs7XG4gICAgcHJvdG90eXBlX19wcm90by5fd2VlayA9IGRlZmF1bHRMb2NhbGVXZWVrO1xuICAgIHByb3RvdHlwZV9fcHJvdG8uZmlyc3REYXlPZlllYXIgPSBsb2NhbGVGaXJzdERheU9mWWVhcjtcbiAgICBwcm90b3R5cGVfX3Byb3RvLmZpcnN0RGF5T2ZXZWVrID0gbG9jYWxlRmlyc3REYXlPZldlZWs7XG5cbiAgICAvLyBEYXkgb2YgV2Vla1xuICAgIHByb3RvdHlwZV9fcHJvdG8ud2Vla2RheXMgICAgICAgPSAgICAgICAgbG9jYWxlV2Vla2RheXM7XG4gICAgcHJvdG90eXBlX19wcm90by5fd2Vla2RheXMgICAgICA9IGRlZmF1bHRMb2NhbGVXZWVrZGF5cztcbiAgICBwcm90b3R5cGVfX3Byb3RvLndlZWtkYXlzTWluICAgID0gICAgICAgIGxvY2FsZVdlZWtkYXlzTWluO1xuICAgIHByb3RvdHlwZV9fcHJvdG8uX3dlZWtkYXlzTWluICAgPSBkZWZhdWx0TG9jYWxlV2Vla2RheXNNaW47XG4gICAgcHJvdG90eXBlX19wcm90by53ZWVrZGF5c1Nob3J0ICA9ICAgICAgICBsb2NhbGVXZWVrZGF5c1Nob3J0O1xuICAgIHByb3RvdHlwZV9fcHJvdG8uX3dlZWtkYXlzU2hvcnQgPSBkZWZhdWx0TG9jYWxlV2Vla2RheXNTaG9ydDtcbiAgICBwcm90b3R5cGVfX3Byb3RvLndlZWtkYXlzUGFyc2UgID0gICAgICAgIGxvY2FsZVdlZWtkYXlzUGFyc2U7XG5cbiAgICAvLyBIb3Vyc1xuICAgIHByb3RvdHlwZV9fcHJvdG8uaXNQTSA9IGxvY2FsZUlzUE07XG4gICAgcHJvdG90eXBlX19wcm90by5fbWVyaWRpZW1QYXJzZSA9IGRlZmF1bHRMb2NhbGVNZXJpZGllbVBhcnNlO1xuICAgIHByb3RvdHlwZV9fcHJvdG8ubWVyaWRpZW0gPSBsb2NhbGVNZXJpZGllbTtcblxuICAgIGZ1bmN0aW9uIGxpc3RzX19nZXQgKGZvcm1hdCwgaW5kZXgsIGZpZWxkLCBzZXR0ZXIpIHtcbiAgICAgICAgdmFyIGxvY2FsZSA9IGxvY2FsZV9sb2NhbGVzX19nZXRMb2NhbGUoKTtcbiAgICAgICAgdmFyIHV0YyA9IGNyZWF0ZV91dGNfX2NyZWF0ZVVUQygpLnNldChzZXR0ZXIsIGluZGV4KTtcbiAgICAgICAgcmV0dXJuIGxvY2FsZVtmaWVsZF0odXRjLCBmb3JtYXQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpc3QgKGZvcm1hdCwgaW5kZXgsIGZpZWxkLCBjb3VudCwgc2V0dGVyKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZm9ybWF0ID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgaW5kZXggPSBmb3JtYXQ7XG4gICAgICAgICAgICBmb3JtYXQgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBmb3JtYXQgPSBmb3JtYXQgfHwgJyc7XG5cbiAgICAgICAgaWYgKGluZGV4ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBsaXN0c19fZ2V0KGZvcm1hdCwgaW5kZXgsIGZpZWxkLCBzZXR0ZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGk7XG4gICAgICAgIHZhciBvdXQgPSBbXTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcbiAgICAgICAgICAgIG91dFtpXSA9IGxpc3RzX19nZXQoZm9ybWF0LCBpLCBmaWVsZCwgc2V0dGVyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpc3RzX19saXN0TW9udGhzIChmb3JtYXQsIGluZGV4KSB7XG4gICAgICAgIHJldHVybiBsaXN0KGZvcm1hdCwgaW5kZXgsICdtb250aHMnLCAxMiwgJ21vbnRoJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGlzdHNfX2xpc3RNb250aHNTaG9ydCAoZm9ybWF0LCBpbmRleCkge1xuICAgICAgICByZXR1cm4gbGlzdChmb3JtYXQsIGluZGV4LCAnbW9udGhzU2hvcnQnLCAxMiwgJ21vbnRoJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGlzdHNfX2xpc3RXZWVrZGF5cyAoZm9ybWF0LCBpbmRleCkge1xuICAgICAgICByZXR1cm4gbGlzdChmb3JtYXQsIGluZGV4LCAnd2Vla2RheXMnLCA3LCAnZGF5Jyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGlzdHNfX2xpc3RXZWVrZGF5c1Nob3J0IChmb3JtYXQsIGluZGV4KSB7XG4gICAgICAgIHJldHVybiBsaXN0KGZvcm1hdCwgaW5kZXgsICd3ZWVrZGF5c1Nob3J0JywgNywgJ2RheScpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpc3RzX19saXN0V2Vla2RheXNNaW4gKGZvcm1hdCwgaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGxpc3QoZm9ybWF0LCBpbmRleCwgJ3dlZWtkYXlzTWluJywgNywgJ2RheScpO1xuICAgIH1cblxuICAgIGxvY2FsZV9sb2NhbGVzX19nZXRTZXRHbG9iYWxMb2NhbGUoJ2VuJywge1xuICAgICAgICBvcmRpbmFsUGFyc2U6IC9cXGR7MSwyfSh0aHxzdHxuZHxyZCkvLFxuICAgICAgICBvcmRpbmFsIDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgdmFyIGIgPSBudW1iZXIgJSAxMCxcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSAodG9JbnQobnVtYmVyICUgMTAwIC8gMTApID09PSAxKSA/ICd0aCcgOlxuICAgICAgICAgICAgICAgIChiID09PSAxKSA/ICdzdCcgOlxuICAgICAgICAgICAgICAgIChiID09PSAyKSA/ICduZCcgOlxuICAgICAgICAgICAgICAgIChiID09PSAzKSA/ICdyZCcgOiAndGgnO1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIG91dHB1dDtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gU2lkZSBlZmZlY3QgaW1wb3J0c1xuICAgIHV0aWxzX2hvb2tzX19ob29rcy5sYW5nID0gZGVwcmVjYXRlKCdtb21lbnQubGFuZyBpcyBkZXByZWNhdGVkLiBVc2UgbW9tZW50LmxvY2FsZSBpbnN0ZWFkLicsIGxvY2FsZV9sb2NhbGVzX19nZXRTZXRHbG9iYWxMb2NhbGUpO1xuICAgIHV0aWxzX2hvb2tzX19ob29rcy5sYW5nRGF0YSA9IGRlcHJlY2F0ZSgnbW9tZW50LmxhbmdEYXRhIGlzIGRlcHJlY2F0ZWQuIFVzZSBtb21lbnQubG9jYWxlRGF0YSBpbnN0ZWFkLicsIGxvY2FsZV9sb2NhbGVzX19nZXRMb2NhbGUpO1xuXG4gICAgdmFyIG1hdGhBYnMgPSBNYXRoLmFicztcblxuICAgIGZ1bmN0aW9uIGR1cmF0aW9uX2Fic19fYWJzICgpIHtcbiAgICAgICAgdmFyIGRhdGEgICAgICAgICAgID0gdGhpcy5fZGF0YTtcblxuICAgICAgICB0aGlzLl9taWxsaXNlY29uZHMgPSBtYXRoQWJzKHRoaXMuX21pbGxpc2Vjb25kcyk7XG4gICAgICAgIHRoaXMuX2RheXMgICAgICAgICA9IG1hdGhBYnModGhpcy5fZGF5cyk7XG4gICAgICAgIHRoaXMuX21vbnRocyAgICAgICA9IG1hdGhBYnModGhpcy5fbW9udGhzKTtcblxuICAgICAgICBkYXRhLm1pbGxpc2Vjb25kcyAgPSBtYXRoQWJzKGRhdGEubWlsbGlzZWNvbmRzKTtcbiAgICAgICAgZGF0YS5zZWNvbmRzICAgICAgID0gbWF0aEFicyhkYXRhLnNlY29uZHMpO1xuICAgICAgICBkYXRhLm1pbnV0ZXMgICAgICAgPSBtYXRoQWJzKGRhdGEubWludXRlcyk7XG4gICAgICAgIGRhdGEuaG91cnMgICAgICAgICA9IG1hdGhBYnMoZGF0YS5ob3Vycyk7XG4gICAgICAgIGRhdGEubW9udGhzICAgICAgICA9IG1hdGhBYnMoZGF0YS5tb250aHMpO1xuICAgICAgICBkYXRhLnllYXJzICAgICAgICAgPSBtYXRoQWJzKGRhdGEueWVhcnMpO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGR1cmF0aW9uX2FkZF9zdWJ0cmFjdF9fYWRkU3VidHJhY3QgKGR1cmF0aW9uLCBpbnB1dCwgdmFsdWUsIGRpcmVjdGlvbikge1xuICAgICAgICB2YXIgb3RoZXIgPSBjcmVhdGVfX2NyZWF0ZUR1cmF0aW9uKGlucHV0LCB2YWx1ZSk7XG5cbiAgICAgICAgZHVyYXRpb24uX21pbGxpc2Vjb25kcyArPSBkaXJlY3Rpb24gKiBvdGhlci5fbWlsbGlzZWNvbmRzO1xuICAgICAgICBkdXJhdGlvbi5fZGF5cyAgICAgICAgICs9IGRpcmVjdGlvbiAqIG90aGVyLl9kYXlzO1xuICAgICAgICBkdXJhdGlvbi5fbW9udGhzICAgICAgICs9IGRpcmVjdGlvbiAqIG90aGVyLl9tb250aHM7XG5cbiAgICAgICAgcmV0dXJuIGR1cmF0aW9uLl9idWJibGUoKTtcbiAgICB9XG5cbiAgICAvLyBzdXBwb3J0cyBvbmx5IDIuMC1zdHlsZSBhZGQoMSwgJ3MnKSBvciBhZGQoZHVyYXRpb24pXG4gICAgZnVuY3Rpb24gZHVyYXRpb25fYWRkX3N1YnRyYWN0X19hZGQgKGlucHV0LCB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gZHVyYXRpb25fYWRkX3N1YnRyYWN0X19hZGRTdWJ0cmFjdCh0aGlzLCBpbnB1dCwgdmFsdWUsIDEpO1xuICAgIH1cblxuICAgIC8vIHN1cHBvcnRzIG9ubHkgMi4wLXN0eWxlIHN1YnRyYWN0KDEsICdzJykgb3Igc3VidHJhY3QoZHVyYXRpb24pXG4gICAgZnVuY3Rpb24gZHVyYXRpb25fYWRkX3N1YnRyYWN0X19zdWJ0cmFjdCAoaW5wdXQsIHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBkdXJhdGlvbl9hZGRfc3VidHJhY3RfX2FkZFN1YnRyYWN0KHRoaXMsIGlucHV0LCB2YWx1ZSwgLTEpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFic0NlaWwgKG51bWJlcikge1xuICAgICAgICBpZiAobnVtYmVyIDwgMCkge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IobnVtYmVyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLmNlaWwobnVtYmVyKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGJ1YmJsZSAoKSB7XG4gICAgICAgIHZhciBtaWxsaXNlY29uZHMgPSB0aGlzLl9taWxsaXNlY29uZHM7XG4gICAgICAgIHZhciBkYXlzICAgICAgICAgPSB0aGlzLl9kYXlzO1xuICAgICAgICB2YXIgbW9udGhzICAgICAgID0gdGhpcy5fbW9udGhzO1xuICAgICAgICB2YXIgZGF0YSAgICAgICAgID0gdGhpcy5fZGF0YTtcbiAgICAgICAgdmFyIHNlY29uZHMsIG1pbnV0ZXMsIGhvdXJzLCB5ZWFycywgbW9udGhzRnJvbURheXM7XG5cbiAgICAgICAgLy8gaWYgd2UgaGF2ZSBhIG1peCBvZiBwb3NpdGl2ZSBhbmQgbmVnYXRpdmUgdmFsdWVzLCBidWJibGUgZG93biBmaXJzdFxuICAgICAgICAvLyBjaGVjazogaHR0cHM6Ly9naXRodWIuY29tL21vbWVudC9tb21lbnQvaXNzdWVzLzIxNjZcbiAgICAgICAgaWYgKCEoKG1pbGxpc2Vjb25kcyA+PSAwICYmIGRheXMgPj0gMCAmJiBtb250aHMgPj0gMCkgfHxcbiAgICAgICAgICAgICAgICAobWlsbGlzZWNvbmRzIDw9IDAgJiYgZGF5cyA8PSAwICYmIG1vbnRocyA8PSAwKSkpIHtcbiAgICAgICAgICAgIG1pbGxpc2Vjb25kcyArPSBhYnNDZWlsKG1vbnRoc1RvRGF5cyhtb250aHMpICsgZGF5cykgKiA4NjRlNTtcbiAgICAgICAgICAgIGRheXMgPSAwO1xuICAgICAgICAgICAgbW9udGhzID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRoZSBmb2xsb3dpbmcgY29kZSBidWJibGVzIHVwIHZhbHVlcywgc2VlIHRoZSB0ZXN0cyBmb3JcbiAgICAgICAgLy8gZXhhbXBsZXMgb2Ygd2hhdCB0aGF0IG1lYW5zLlxuICAgICAgICBkYXRhLm1pbGxpc2Vjb25kcyA9IG1pbGxpc2Vjb25kcyAlIDEwMDA7XG5cbiAgICAgICAgc2Vjb25kcyAgICAgICAgICAgPSBhYnNGbG9vcihtaWxsaXNlY29uZHMgLyAxMDAwKTtcbiAgICAgICAgZGF0YS5zZWNvbmRzICAgICAgPSBzZWNvbmRzICUgNjA7XG5cbiAgICAgICAgbWludXRlcyAgICAgICAgICAgPSBhYnNGbG9vcihzZWNvbmRzIC8gNjApO1xuICAgICAgICBkYXRhLm1pbnV0ZXMgICAgICA9IG1pbnV0ZXMgJSA2MDtcblxuICAgICAgICBob3VycyAgICAgICAgICAgICA9IGFic0Zsb29yKG1pbnV0ZXMgLyA2MCk7XG4gICAgICAgIGRhdGEuaG91cnMgICAgICAgID0gaG91cnMgJSAyNDtcblxuICAgICAgICBkYXlzICs9IGFic0Zsb29yKGhvdXJzIC8gMjQpO1xuXG4gICAgICAgIC8vIGNvbnZlcnQgZGF5cyB0byBtb250aHNcbiAgICAgICAgbW9udGhzRnJvbURheXMgPSBhYnNGbG9vcihkYXlzVG9Nb250aHMoZGF5cykpO1xuICAgICAgICBtb250aHMgKz0gbW9udGhzRnJvbURheXM7XG4gICAgICAgIGRheXMgLT0gYWJzQ2VpbChtb250aHNUb0RheXMobW9udGhzRnJvbURheXMpKTtcblxuICAgICAgICAvLyAxMiBtb250aHMgLT4gMSB5ZWFyXG4gICAgICAgIHllYXJzID0gYWJzRmxvb3IobW9udGhzIC8gMTIpO1xuICAgICAgICBtb250aHMgJT0gMTI7XG5cbiAgICAgICAgZGF0YS5kYXlzICAgPSBkYXlzO1xuICAgICAgICBkYXRhLm1vbnRocyA9IG1vbnRocztcbiAgICAgICAgZGF0YS55ZWFycyAgPSB5ZWFycztcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkYXlzVG9Nb250aHMgKGRheXMpIHtcbiAgICAgICAgLy8gNDAwIHllYXJzIGhhdmUgMTQ2MDk3IGRheXMgKHRha2luZyBpbnRvIGFjY291bnQgbGVhcCB5ZWFyIHJ1bGVzKVxuICAgICAgICAvLyA0MDAgeWVhcnMgaGF2ZSAxMiBtb250aHMgPT09IDQ4MDBcbiAgICAgICAgcmV0dXJuIGRheXMgKiA0ODAwIC8gMTQ2MDk3O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1vbnRoc1RvRGF5cyAobW9udGhzKSB7XG4gICAgICAgIC8vIHRoZSByZXZlcnNlIG9mIGRheXNUb01vbnRoc1xuICAgICAgICByZXR1cm4gbW9udGhzICogMTQ2MDk3IC8gNDgwMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhcyAodW5pdHMpIHtcbiAgICAgICAgdmFyIGRheXM7XG4gICAgICAgIHZhciBtb250aHM7XG4gICAgICAgIHZhciBtaWxsaXNlY29uZHMgPSB0aGlzLl9taWxsaXNlY29uZHM7XG5cbiAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cyk7XG5cbiAgICAgICAgaWYgKHVuaXRzID09PSAnbW9udGgnIHx8IHVuaXRzID09PSAneWVhcicpIHtcbiAgICAgICAgICAgIGRheXMgICA9IHRoaXMuX2RheXMgICArIG1pbGxpc2Vjb25kcyAvIDg2NGU1O1xuICAgICAgICAgICAgbW9udGhzID0gdGhpcy5fbW9udGhzICsgZGF5c1RvTW9udGhzKGRheXMpO1xuICAgICAgICAgICAgcmV0dXJuIHVuaXRzID09PSAnbW9udGgnID8gbW9udGhzIDogbW9udGhzIC8gMTI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBoYW5kbGUgbWlsbGlzZWNvbmRzIHNlcGFyYXRlbHkgYmVjYXVzZSBvZiBmbG9hdGluZyBwb2ludCBtYXRoIGVycm9ycyAoaXNzdWUgIzE4NjcpXG4gICAgICAgICAgICBkYXlzID0gdGhpcy5fZGF5cyArIE1hdGgucm91bmQobW9udGhzVG9EYXlzKHRoaXMuX21vbnRocykpO1xuICAgICAgICAgICAgc3dpdGNoICh1bml0cykge1xuICAgICAgICAgICAgICAgIGNhc2UgJ3dlZWsnICAgOiByZXR1cm4gZGF5cyAvIDcgICAgICsgbWlsbGlzZWNvbmRzIC8gNjA0OGU1O1xuICAgICAgICAgICAgICAgIGNhc2UgJ2RheScgICAgOiByZXR1cm4gZGF5cyAgICAgICAgICsgbWlsbGlzZWNvbmRzIC8gODY0ZTU7XG4gICAgICAgICAgICAgICAgY2FzZSAnaG91cicgICA6IHJldHVybiBkYXlzICogMjQgICAgKyBtaWxsaXNlY29uZHMgLyAzNmU1O1xuICAgICAgICAgICAgICAgIGNhc2UgJ21pbnV0ZScgOiByZXR1cm4gZGF5cyAqIDE0NDAgICsgbWlsbGlzZWNvbmRzIC8gNmU0O1xuICAgICAgICAgICAgICAgIGNhc2UgJ3NlY29uZCcgOiByZXR1cm4gZGF5cyAqIDg2NDAwICsgbWlsbGlzZWNvbmRzIC8gMTAwMDtcbiAgICAgICAgICAgICAgICAvLyBNYXRoLmZsb29yIHByZXZlbnRzIGZsb2F0aW5nIHBvaW50IG1hdGggZXJyb3JzIGhlcmVcbiAgICAgICAgICAgICAgICBjYXNlICdtaWxsaXNlY29uZCc6IHJldHVybiBNYXRoLmZsb29yKGRheXMgKiA4NjRlNSkgKyBtaWxsaXNlY29uZHM7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIHVuaXQgJyArIHVuaXRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIFRPRE86IFVzZSB0aGlzLmFzKCdtcycpP1xuICAgIGZ1bmN0aW9uIGR1cmF0aW9uX2FzX192YWx1ZU9mICgpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIHRoaXMuX21pbGxpc2Vjb25kcyArXG4gICAgICAgICAgICB0aGlzLl9kYXlzICogODY0ZTUgK1xuICAgICAgICAgICAgKHRoaXMuX21vbnRocyAlIDEyKSAqIDI1OTJlNiArXG4gICAgICAgICAgICB0b0ludCh0aGlzLl9tb250aHMgLyAxMikgKiAzMTUzNmU2XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWFrZUFzIChhbGlhcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXMoYWxpYXMpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIHZhciBhc01pbGxpc2Vjb25kcyA9IG1ha2VBcygnbXMnKTtcbiAgICB2YXIgYXNTZWNvbmRzICAgICAgPSBtYWtlQXMoJ3MnKTtcbiAgICB2YXIgYXNNaW51dGVzICAgICAgPSBtYWtlQXMoJ20nKTtcbiAgICB2YXIgYXNIb3VycyAgICAgICAgPSBtYWtlQXMoJ2gnKTtcbiAgICB2YXIgYXNEYXlzICAgICAgICAgPSBtYWtlQXMoJ2QnKTtcbiAgICB2YXIgYXNXZWVrcyAgICAgICAgPSBtYWtlQXMoJ3cnKTtcbiAgICB2YXIgYXNNb250aHMgICAgICAgPSBtYWtlQXMoJ00nKTtcbiAgICB2YXIgYXNZZWFycyAgICAgICAgPSBtYWtlQXMoJ3knKTtcblxuICAgIGZ1bmN0aW9uIGR1cmF0aW9uX2dldF9fZ2V0ICh1bml0cykge1xuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTtcbiAgICAgICAgcmV0dXJuIHRoaXNbdW5pdHMgKyAncyddKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWFrZUdldHRlcihuYW1lKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZGF0YVtuYW1lXTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgbWlsbGlzZWNvbmRzID0gbWFrZUdldHRlcignbWlsbGlzZWNvbmRzJyk7XG4gICAgdmFyIHNlY29uZHMgICAgICA9IG1ha2VHZXR0ZXIoJ3NlY29uZHMnKTtcbiAgICB2YXIgbWludXRlcyAgICAgID0gbWFrZUdldHRlcignbWludXRlcycpO1xuICAgIHZhciBob3VycyAgICAgICAgPSBtYWtlR2V0dGVyKCdob3VycycpO1xuICAgIHZhciBkYXlzICAgICAgICAgPSBtYWtlR2V0dGVyKCdkYXlzJyk7XG4gICAgdmFyIG1vbnRocyAgICAgICA9IG1ha2VHZXR0ZXIoJ21vbnRocycpO1xuICAgIHZhciB5ZWFycyAgICAgICAgPSBtYWtlR2V0dGVyKCd5ZWFycycpO1xuXG4gICAgZnVuY3Rpb24gd2Vla3MgKCkge1xuICAgICAgICByZXR1cm4gYWJzRmxvb3IodGhpcy5kYXlzKCkgLyA3KTtcbiAgICB9XG5cbiAgICB2YXIgcm91bmQgPSBNYXRoLnJvdW5kO1xuICAgIHZhciB0aHJlc2hvbGRzID0ge1xuICAgICAgICBzOiA0NSwgIC8vIHNlY29uZHMgdG8gbWludXRlXG4gICAgICAgIG06IDQ1LCAgLy8gbWludXRlcyB0byBob3VyXG4gICAgICAgIGg6IDIyLCAgLy8gaG91cnMgdG8gZGF5XG4gICAgICAgIGQ6IDI2LCAgLy8gZGF5cyB0byBtb250aFxuICAgICAgICBNOiAxMSAgIC8vIG1vbnRocyB0byB5ZWFyXG4gICAgfTtcblxuICAgIC8vIGhlbHBlciBmdW5jdGlvbiBmb3IgbW9tZW50LmZuLmZyb20sIG1vbWVudC5mbi5mcm9tTm93LCBhbmQgbW9tZW50LmR1cmF0aW9uLmZuLmh1bWFuaXplXG4gICAgZnVuY3Rpb24gc3Vic3RpdHV0ZVRpbWVBZ28oc3RyaW5nLCBudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGlzRnV0dXJlLCBsb2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS5yZWxhdGl2ZVRpbWUobnVtYmVyIHx8IDEsICEhd2l0aG91dFN1ZmZpeCwgc3RyaW5nLCBpc0Z1dHVyZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZHVyYXRpb25faHVtYW5pemVfX3JlbGF0aXZlVGltZSAocG9zTmVnRHVyYXRpb24sIHdpdGhvdXRTdWZmaXgsIGxvY2FsZSkge1xuICAgICAgICB2YXIgZHVyYXRpb24gPSBjcmVhdGVfX2NyZWF0ZUR1cmF0aW9uKHBvc05lZ0R1cmF0aW9uKS5hYnMoKTtcbiAgICAgICAgdmFyIHNlY29uZHMgID0gcm91bmQoZHVyYXRpb24uYXMoJ3MnKSk7XG4gICAgICAgIHZhciBtaW51dGVzICA9IHJvdW5kKGR1cmF0aW9uLmFzKCdtJykpO1xuICAgICAgICB2YXIgaG91cnMgICAgPSByb3VuZChkdXJhdGlvbi5hcygnaCcpKTtcbiAgICAgICAgdmFyIGRheXMgICAgID0gcm91bmQoZHVyYXRpb24uYXMoJ2QnKSk7XG4gICAgICAgIHZhciBtb250aHMgICA9IHJvdW5kKGR1cmF0aW9uLmFzKCdNJykpO1xuICAgICAgICB2YXIgeWVhcnMgICAgPSByb3VuZChkdXJhdGlvbi5hcygneScpKTtcblxuICAgICAgICB2YXIgYSA9IHNlY29uZHMgPCB0aHJlc2hvbGRzLnMgJiYgWydzJywgc2Vjb25kc10gIHx8XG4gICAgICAgICAgICAgICAgbWludXRlcyA8PSAxICAgICAgICAgICAmJiBbJ20nXSAgICAgICAgICAgfHxcbiAgICAgICAgICAgICAgICBtaW51dGVzIDwgdGhyZXNob2xkcy5tICYmIFsnbW0nLCBtaW51dGVzXSB8fFxuICAgICAgICAgICAgICAgIGhvdXJzICAgPD0gMSAgICAgICAgICAgJiYgWydoJ10gICAgICAgICAgIHx8XG4gICAgICAgICAgICAgICAgaG91cnMgICA8IHRocmVzaG9sZHMuaCAmJiBbJ2hoJywgaG91cnNdICAgfHxcbiAgICAgICAgICAgICAgICBkYXlzICAgIDw9IDEgICAgICAgICAgICYmIFsnZCddICAgICAgICAgICB8fFxuICAgICAgICAgICAgICAgIGRheXMgICAgPCB0aHJlc2hvbGRzLmQgJiYgWydkZCcsIGRheXNdICAgIHx8XG4gICAgICAgICAgICAgICAgbW9udGhzICA8PSAxICAgICAgICAgICAmJiBbJ00nXSAgICAgICAgICAgfHxcbiAgICAgICAgICAgICAgICBtb250aHMgIDwgdGhyZXNob2xkcy5NICYmIFsnTU0nLCBtb250aHNdICB8fFxuICAgICAgICAgICAgICAgIHllYXJzICAgPD0gMSAgICAgICAgICAgJiYgWyd5J10gICAgICAgICAgIHx8IFsneXknLCB5ZWFyc107XG5cbiAgICAgICAgYVsyXSA9IHdpdGhvdXRTdWZmaXg7XG4gICAgICAgIGFbM10gPSArcG9zTmVnRHVyYXRpb24gPiAwO1xuICAgICAgICBhWzRdID0gbG9jYWxlO1xuICAgICAgICByZXR1cm4gc3Vic3RpdHV0ZVRpbWVBZ28uYXBwbHkobnVsbCwgYSk7XG4gICAgfVxuXG4gICAgLy8gVGhpcyBmdW5jdGlvbiBhbGxvd3MgeW91IHRvIHNldCBhIHRocmVzaG9sZCBmb3IgcmVsYXRpdmUgdGltZSBzdHJpbmdzXG4gICAgZnVuY3Rpb24gZHVyYXRpb25faHVtYW5pemVfX2dldFNldFJlbGF0aXZlVGltZVRocmVzaG9sZCAodGhyZXNob2xkLCBsaW1pdCkge1xuICAgICAgICBpZiAodGhyZXNob2xkc1t0aHJlc2hvbGRdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobGltaXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRocmVzaG9sZHNbdGhyZXNob2xkXTtcbiAgICAgICAgfVxuICAgICAgICB0aHJlc2hvbGRzW3RocmVzaG9sZF0gPSBsaW1pdDtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaHVtYW5pemUgKHdpdGhTdWZmaXgpIHtcbiAgICAgICAgdmFyIGxvY2FsZSA9IHRoaXMubG9jYWxlRGF0YSgpO1xuICAgICAgICB2YXIgb3V0cHV0ID0gZHVyYXRpb25faHVtYW5pemVfX3JlbGF0aXZlVGltZSh0aGlzLCAhd2l0aFN1ZmZpeCwgbG9jYWxlKTtcblxuICAgICAgICBpZiAod2l0aFN1ZmZpeCkge1xuICAgICAgICAgICAgb3V0cHV0ID0gbG9jYWxlLnBhc3RGdXR1cmUoK3RoaXMsIG91dHB1dCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbG9jYWxlLnBvc3Rmb3JtYXQob3V0cHV0KTtcbiAgICB9XG5cbiAgICB2YXIgaXNvX3N0cmluZ19fYWJzID0gTWF0aC5hYnM7XG5cbiAgICBmdW5jdGlvbiBpc29fc3RyaW5nX190b0lTT1N0cmluZygpIHtcbiAgICAgICAgLy8gZm9yIElTTyBzdHJpbmdzIHdlIGRvIG5vdCB1c2UgdGhlIG5vcm1hbCBidWJibGluZyBydWxlczpcbiAgICAgICAgLy8gICogbWlsbGlzZWNvbmRzIGJ1YmJsZSB1cCB1bnRpbCB0aGV5IGJlY29tZSBob3Vyc1xuICAgICAgICAvLyAgKiBkYXlzIGRvIG5vdCBidWJibGUgYXQgYWxsXG4gICAgICAgIC8vICAqIG1vbnRocyBidWJibGUgdXAgdW50aWwgdGhleSBiZWNvbWUgeWVhcnNcbiAgICAgICAgLy8gVGhpcyBpcyBiZWNhdXNlIHRoZXJlIGlzIG5vIGNvbnRleHQtZnJlZSBjb252ZXJzaW9uIGJldHdlZW4gaG91cnMgYW5kIGRheXNcbiAgICAgICAgLy8gKHRoaW5rIG9mIGNsb2NrIGNoYW5nZXMpXG4gICAgICAgIC8vIGFuZCBhbHNvIG5vdCBiZXR3ZWVuIGRheXMgYW5kIG1vbnRocyAoMjgtMzEgZGF5cyBwZXIgbW9udGgpXG4gICAgICAgIHZhciBzZWNvbmRzID0gaXNvX3N0cmluZ19fYWJzKHRoaXMuX21pbGxpc2Vjb25kcykgLyAxMDAwO1xuICAgICAgICB2YXIgZGF5cyAgICAgICAgID0gaXNvX3N0cmluZ19fYWJzKHRoaXMuX2RheXMpO1xuICAgICAgICB2YXIgbW9udGhzICAgICAgID0gaXNvX3N0cmluZ19fYWJzKHRoaXMuX21vbnRocyk7XG4gICAgICAgIHZhciBtaW51dGVzLCBob3VycywgeWVhcnM7XG5cbiAgICAgICAgLy8gMzYwMCBzZWNvbmRzIC0+IDYwIG1pbnV0ZXMgLT4gMSBob3VyXG4gICAgICAgIG1pbnV0ZXMgICAgICAgICAgID0gYWJzRmxvb3Ioc2Vjb25kcyAvIDYwKTtcbiAgICAgICAgaG91cnMgICAgICAgICAgICAgPSBhYnNGbG9vcihtaW51dGVzIC8gNjApO1xuICAgICAgICBzZWNvbmRzICU9IDYwO1xuICAgICAgICBtaW51dGVzICU9IDYwO1xuXG4gICAgICAgIC8vIDEyIG1vbnRocyAtPiAxIHllYXJcbiAgICAgICAgeWVhcnMgID0gYWJzRmxvb3IobW9udGhzIC8gMTIpO1xuICAgICAgICBtb250aHMgJT0gMTI7XG5cblxuICAgICAgICAvLyBpbnNwaXJlZCBieSBodHRwczovL2dpdGh1Yi5jb20vZG9yZGlsbGUvbW9tZW50LWlzb2R1cmF0aW9uL2Jsb2IvbWFzdGVyL21vbWVudC5pc29kdXJhdGlvbi5qc1xuICAgICAgICB2YXIgWSA9IHllYXJzO1xuICAgICAgICB2YXIgTSA9IG1vbnRocztcbiAgICAgICAgdmFyIEQgPSBkYXlzO1xuICAgICAgICB2YXIgaCA9IGhvdXJzO1xuICAgICAgICB2YXIgbSA9IG1pbnV0ZXM7XG4gICAgICAgIHZhciBzID0gc2Vjb25kcztcbiAgICAgICAgdmFyIHRvdGFsID0gdGhpcy5hc1NlY29uZHMoKTtcblxuICAgICAgICBpZiAoIXRvdGFsKSB7XG4gICAgICAgICAgICAvLyB0aGlzIGlzIHRoZSBzYW1lIGFzIEMjJ3MgKE5vZGEpIGFuZCBweXRob24gKGlzb2RhdGUpLi4uXG4gICAgICAgICAgICAvLyBidXQgbm90IG90aGVyIEpTIChnb29nLmRhdGUpXG4gICAgICAgICAgICByZXR1cm4gJ1AwRCc7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gKHRvdGFsIDwgMCA/ICctJyA6ICcnKSArXG4gICAgICAgICAgICAnUCcgK1xuICAgICAgICAgICAgKFkgPyBZICsgJ1knIDogJycpICtcbiAgICAgICAgICAgIChNID8gTSArICdNJyA6ICcnKSArXG4gICAgICAgICAgICAoRCA/IEQgKyAnRCcgOiAnJykgK1xuICAgICAgICAgICAgKChoIHx8IG0gfHwgcykgPyAnVCcgOiAnJykgK1xuICAgICAgICAgICAgKGggPyBoICsgJ0gnIDogJycpICtcbiAgICAgICAgICAgIChtID8gbSArICdNJyA6ICcnKSArXG4gICAgICAgICAgICAocyA/IHMgKyAnUycgOiAnJyk7XG4gICAgfVxuXG4gICAgdmFyIGR1cmF0aW9uX3Byb3RvdHlwZV9fcHJvdG8gPSBEdXJhdGlvbi5wcm90b3R5cGU7XG5cbiAgICBkdXJhdGlvbl9wcm90b3R5cGVfX3Byb3RvLmFicyAgICAgICAgICAgID0gZHVyYXRpb25fYWJzX19hYnM7XG4gICAgZHVyYXRpb25fcHJvdG90eXBlX19wcm90by5hZGQgICAgICAgICAgICA9IGR1cmF0aW9uX2FkZF9zdWJ0cmFjdF9fYWRkO1xuICAgIGR1cmF0aW9uX3Byb3RvdHlwZV9fcHJvdG8uc3VidHJhY3QgICAgICAgPSBkdXJhdGlvbl9hZGRfc3VidHJhY3RfX3N1YnRyYWN0O1xuICAgIGR1cmF0aW9uX3Byb3RvdHlwZV9fcHJvdG8uYXMgICAgICAgICAgICAgPSBhcztcbiAgICBkdXJhdGlvbl9wcm90b3R5cGVfX3Byb3RvLmFzTWlsbGlzZWNvbmRzID0gYXNNaWxsaXNlY29uZHM7XG4gICAgZHVyYXRpb25fcHJvdG90eXBlX19wcm90by5hc1NlY29uZHMgICAgICA9IGFzU2Vjb25kcztcbiAgICBkdXJhdGlvbl9wcm90b3R5cGVfX3Byb3RvLmFzTWludXRlcyAgICAgID0gYXNNaW51dGVzO1xuICAgIGR1cmF0aW9uX3Byb3RvdHlwZV9fcHJvdG8uYXNIb3VycyAgICAgICAgPSBhc0hvdXJzO1xuICAgIGR1cmF0aW9uX3Byb3RvdHlwZV9fcHJvdG8uYXNEYXlzICAgICAgICAgPSBhc0RheXM7XG4gICAgZHVyYXRpb25fcHJvdG90eXBlX19wcm90by5hc1dlZWtzICAgICAgICA9IGFzV2Vla3M7XG4gICAgZHVyYXRpb25fcHJvdG90eXBlX19wcm90by5hc01vbnRocyAgICAgICA9IGFzTW9udGhzO1xuICAgIGR1cmF0aW9uX3Byb3RvdHlwZV9fcHJvdG8uYXNZZWFycyAgICAgICAgPSBhc1llYXJzO1xuICAgIGR1cmF0aW9uX3Byb3RvdHlwZV9fcHJvdG8udmFsdWVPZiAgICAgICAgPSBkdXJhdGlvbl9hc19fdmFsdWVPZjtcbiAgICBkdXJhdGlvbl9wcm90b3R5cGVfX3Byb3RvLl9idWJibGUgICAgICAgID0gYnViYmxlO1xuICAgIGR1cmF0aW9uX3Byb3RvdHlwZV9fcHJvdG8uZ2V0ICAgICAgICAgICAgPSBkdXJhdGlvbl9nZXRfX2dldDtcbiAgICBkdXJhdGlvbl9wcm90b3R5cGVfX3Byb3RvLm1pbGxpc2Vjb25kcyAgID0gbWlsbGlzZWNvbmRzO1xuICAgIGR1cmF0aW9uX3Byb3RvdHlwZV9fcHJvdG8uc2Vjb25kcyAgICAgICAgPSBzZWNvbmRzO1xuICAgIGR1cmF0aW9uX3Byb3RvdHlwZV9fcHJvdG8ubWludXRlcyAgICAgICAgPSBtaW51dGVzO1xuICAgIGR1cmF0aW9uX3Byb3RvdHlwZV9fcHJvdG8uaG91cnMgICAgICAgICAgPSBob3VycztcbiAgICBkdXJhdGlvbl9wcm90b3R5cGVfX3Byb3RvLmRheXMgICAgICAgICAgID0gZGF5cztcbiAgICBkdXJhdGlvbl9wcm90b3R5cGVfX3Byb3RvLndlZWtzICAgICAgICAgID0gd2Vla3M7XG4gICAgZHVyYXRpb25fcHJvdG90eXBlX19wcm90by5tb250aHMgICAgICAgICA9IG1vbnRocztcbiAgICBkdXJhdGlvbl9wcm90b3R5cGVfX3Byb3RvLnllYXJzICAgICAgICAgID0geWVhcnM7XG4gICAgZHVyYXRpb25fcHJvdG90eXBlX19wcm90by5odW1hbml6ZSAgICAgICA9IGh1bWFuaXplO1xuICAgIGR1cmF0aW9uX3Byb3RvdHlwZV9fcHJvdG8udG9JU09TdHJpbmcgICAgPSBpc29fc3RyaW5nX190b0lTT1N0cmluZztcbiAgICBkdXJhdGlvbl9wcm90b3R5cGVfX3Byb3RvLnRvU3RyaW5nICAgICAgID0gaXNvX3N0cmluZ19fdG9JU09TdHJpbmc7XG4gICAgZHVyYXRpb25fcHJvdG90eXBlX19wcm90by50b0pTT04gICAgICAgICA9IGlzb19zdHJpbmdfX3RvSVNPU3RyaW5nO1xuICAgIGR1cmF0aW9uX3Byb3RvdHlwZV9fcHJvdG8ubG9jYWxlICAgICAgICAgPSBsb2NhbGU7XG4gICAgZHVyYXRpb25fcHJvdG90eXBlX19wcm90by5sb2NhbGVEYXRhICAgICA9IGxvY2FsZURhdGE7XG5cbiAgICAvLyBEZXByZWNhdGlvbnNcbiAgICBkdXJhdGlvbl9wcm90b3R5cGVfX3Byb3RvLnRvSXNvU3RyaW5nID0gZGVwcmVjYXRlKCd0b0lzb1N0cmluZygpIGlzIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgdG9JU09TdHJpbmcoKSBpbnN0ZWFkIChub3RpY2UgdGhlIGNhcGl0YWxzKScsIGlzb19zdHJpbmdfX3RvSVNPU3RyaW5nKTtcbiAgICBkdXJhdGlvbl9wcm90b3R5cGVfX3Byb3RvLmxhbmcgPSBsYW5nO1xuXG4gICAgLy8gU2lkZSBlZmZlY3QgaW1wb3J0c1xuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ1gnLCAwLCAwLCAndW5peCcpO1xuICAgIGFkZEZvcm1hdFRva2VuKCd4JywgMCwgMCwgJ3ZhbHVlT2YnKTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ3gnLCBtYXRjaFNpZ25lZCk7XG4gICAgYWRkUmVnZXhUb2tlbignWCcsIG1hdGNoVGltZXN0YW1wKTtcbiAgICBhZGRQYXJzZVRva2VuKCdYJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKHBhcnNlRmxvYXQoaW5wdXQsIDEwKSAqIDEwMDApO1xuICAgIH0pO1xuICAgIGFkZFBhcnNlVG9rZW4oJ3gnLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUodG9JbnQoaW5wdXQpKTtcbiAgICB9KTtcblxuICAgIC8vIFNpZGUgZWZmZWN0IGltcG9ydHNcblxuXG4gICAgdXRpbHNfaG9va3NfX2hvb2tzLnZlcnNpb24gPSAnMi4xMS4xJztcblxuICAgIHNldEhvb2tDYWxsYmFjayhsb2NhbF9fY3JlYXRlTG9jYWwpO1xuXG4gICAgdXRpbHNfaG9va3NfX2hvb2tzLmZuICAgICAgICAgICAgICAgICAgICA9IG1vbWVudFByb3RvdHlwZTtcbiAgICB1dGlsc19ob29rc19faG9va3MubWluICAgICAgICAgICAgICAgICAgID0gbWluO1xuICAgIHV0aWxzX2hvb2tzX19ob29rcy5tYXggICAgICAgICAgICAgICAgICAgPSBtYXg7XG4gICAgdXRpbHNfaG9va3NfX2hvb2tzLm5vdyAgICAgICAgICAgICAgICAgICA9IG5vdztcbiAgICB1dGlsc19ob29rc19faG9va3MudXRjICAgICAgICAgICAgICAgICAgID0gY3JlYXRlX3V0Y19fY3JlYXRlVVRDO1xuICAgIHV0aWxzX2hvb2tzX19ob29rcy51bml4ICAgICAgICAgICAgICAgICAgPSBtb21lbnRfX2NyZWF0ZVVuaXg7XG4gICAgdXRpbHNfaG9va3NfX2hvb2tzLm1vbnRocyAgICAgICAgICAgICAgICA9IGxpc3RzX19saXN0TW9udGhzO1xuICAgIHV0aWxzX2hvb2tzX19ob29rcy5pc0RhdGUgICAgICAgICAgICAgICAgPSBpc0RhdGU7XG4gICAgdXRpbHNfaG9va3NfX2hvb2tzLmxvY2FsZSAgICAgICAgICAgICAgICA9IGxvY2FsZV9sb2NhbGVzX19nZXRTZXRHbG9iYWxMb2NhbGU7XG4gICAgdXRpbHNfaG9va3NfX2hvb2tzLmludmFsaWQgICAgICAgICAgICAgICA9IHZhbGlkX19jcmVhdGVJbnZhbGlkO1xuICAgIHV0aWxzX2hvb2tzX19ob29rcy5kdXJhdGlvbiAgICAgICAgICAgICAgPSBjcmVhdGVfX2NyZWF0ZUR1cmF0aW9uO1xuICAgIHV0aWxzX2hvb2tzX19ob29rcy5pc01vbWVudCAgICAgICAgICAgICAgPSBpc01vbWVudDtcbiAgICB1dGlsc19ob29rc19faG9va3Mud2Vla2RheXMgICAgICAgICAgICAgID0gbGlzdHNfX2xpc3RXZWVrZGF5cztcbiAgICB1dGlsc19ob29rc19faG9va3MucGFyc2Vab25lICAgICAgICAgICAgID0gbW9tZW50X19jcmVhdGVJblpvbmU7XG4gICAgdXRpbHNfaG9va3NfX2hvb2tzLmxvY2FsZURhdGEgICAgICAgICAgICA9IGxvY2FsZV9sb2NhbGVzX19nZXRMb2NhbGU7XG4gICAgdXRpbHNfaG9va3NfX2hvb2tzLmlzRHVyYXRpb24gICAgICAgICAgICA9IGlzRHVyYXRpb247XG4gICAgdXRpbHNfaG9va3NfX2hvb2tzLm1vbnRoc1Nob3J0ICAgICAgICAgICA9IGxpc3RzX19saXN0TW9udGhzU2hvcnQ7XG4gICAgdXRpbHNfaG9va3NfX2hvb2tzLndlZWtkYXlzTWluICAgICAgICAgICA9IGxpc3RzX19saXN0V2Vla2RheXNNaW47XG4gICAgdXRpbHNfaG9va3NfX2hvb2tzLmRlZmluZUxvY2FsZSAgICAgICAgICA9IGRlZmluZUxvY2FsZTtcbiAgICB1dGlsc19ob29rc19faG9va3Mud2Vla2RheXNTaG9ydCAgICAgICAgID0gbGlzdHNfX2xpc3RXZWVrZGF5c1Nob3J0O1xuICAgIHV0aWxzX2hvb2tzX19ob29rcy5ub3JtYWxpemVVbml0cyAgICAgICAgPSBub3JtYWxpemVVbml0cztcbiAgICB1dGlsc19ob29rc19faG9va3MucmVsYXRpdmVUaW1lVGhyZXNob2xkID0gZHVyYXRpb25faHVtYW5pemVfX2dldFNldFJlbGF0aXZlVGltZVRocmVzaG9sZDtcbiAgICB1dGlsc19ob29rc19faG9va3MucHJvdG90eXBlICAgICAgICAgICAgID0gbW9tZW50UHJvdG90eXBlO1xuXG4gICAgdmFyIF9tb21lbnQgPSB1dGlsc19ob29rc19faG9va3M7XG5cbiAgICByZXR1cm4gX21vbWVudDtcblxufSkpO1xuLyogZXhwb3J0ZWQgY29uZmlnICovXG5pZiAodHlwZW9mIGFuZ3VsYXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgYW5ndWxhci5tb2R1bGUoXCJyaXNldmlzaW9uLmNvbW1vbi5pMThuLmNvbmZpZ1wiLCBbXSlcbiAgICAuY29uc3RhbnQoXCJMT0NBTEVTX1BSRUZJWFwiLCBcImxvY2FsZXMvdHJhbnNsYXRpb25fXCIpXG4gICAgLmNvbnN0YW50KFwiTE9DQUxFU19TVUZJWFwiLCBcIi5qc29uXCIpO1xufVxuXG52YXIgY29uZmlnID0ge307XG5cbi8qIGdsb2JhbCBnYWRnZXRzLCBtb21lbnQgKi9cblxudmFyIFJpc2VWaXNpb24gPSBSaXNlVmlzaW9uIHx8IHt9O1xuUmlzZVZpc2lvbi5UaW1lRGF0ZSA9IHt9O1xuXG5SaXNlVmlzaW9uLlRpbWVEYXRlID0gKGZ1bmN0aW9uIChnYWRnZXRzKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBfcHJlZnMgPSBuZXcgZ2FkZ2V0cy5QcmVmcygpLFxuICAgIF9hZGRpdGlvbmFsUGFyYW1zID0gbnVsbDtcblxuICB2YXIgX21lc3NhZ2UgPSBudWxsO1xuICB2YXIgX3RpbWVvdXRJZDtcbiAgdmFyIF90aW1lQW5kRGF0ZUNvbnRhaW5lcjtcbiAgdmFyIF9mb3JtYXQ7XG4gIHZhciBfY29uZmlndXJhdGlvbkxvZ2dlZCA9IGZhbHNlO1xuXG4gIC8qXG4gICAqICBQcml2YXRlIE1ldGhvZHNcbiAgICovXG4gIGZ1bmN0aW9uIF9pbml0KCkge1xuXG4gICAgLy8gTG9hZCBmb250cy5cbiAgICB2YXIgZm9udFNldHRpbmdzID0gW1xuICAgICAge1xuICAgICAgICBcImNsYXNzXCI6IFwidGltZS1hbmQtZGF0ZVwiLFxuICAgICAgICBcImZvbnRTZXR0aW5nXCI6IF9hZGRpdGlvbmFsUGFyYW1zLmZvbnRTdHlsZVxuICAgICAgfVxuICAgIF07XG5cbiAgICBSaXNlVmlzaW9uLkNvbW1vbi5VdGlsaXRpZXMubG9hZEZvbnRzKGZvbnRTZXR0aW5ncyk7XG5cbiAgICBfZm9ybWF0ID0gKF9hZGRpdGlvbmFsUGFyYW1zLnNob3dUaW1lKSA/IF9hZGRpdGlvbmFsUGFyYW1zLnRpbWVGb3JtYXQgOiBcIlwiO1xuICAgIF9mb3JtYXQgKz0gKF9hZGRpdGlvbmFsUGFyYW1zLnNob3dUaW1lICYmIF9hZGRpdGlvbmFsUGFyYW1zLnNob3dEYXRlKT8gXCIgXCIgOiBcIlwiO1xuICAgIF9mb3JtYXQgKz0gKF9hZGRpdGlvbmFsUGFyYW1zLnNob3dEYXRlKSA/IF9hZGRpdGlvbmFsUGFyYW1zLmRhdGVGb3JtYXQgOiBcIlwiO1xuXG5cbiAgICBfdGltZUFuZERhdGVDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIF90aW1lQW5kRGF0ZUNvbnRhaW5lci5jbGFzc05hbWUgPSBcInRpbWUtYW5kLWRhdGVcIjtcblxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY29udGFpbmVyXCIpLmFwcGVuZENoaWxkKF90aW1lQW5kRGF0ZUNvbnRhaW5lcik7XG5cbiAgICBfcmVhZHkoKTtcbiAgfVxuXG4gIC8qXG4gICAqICBQcml2YXRlIE1ldGhvZHNcbiAgICovXG4gIGZ1bmN0aW9uIF9yZWFkeSgpIHtcbiAgICBnYWRnZXRzLnJwYy5jYWxsKFwiXCIsIFwicnNldmVudF9yZWFkeVwiLCBudWxsLCBfcHJlZnMuZ2V0U3RyaW5nKFwiaWRcIiksXG4gICAgICB0cnVlLCB0cnVlLCB0cnVlLCB0cnVlLCBmYWxzZSk7XG4gIH1cblxuICAvKlxuICAgKiAgUHVibGljIE1ldGhvZHNcbiAgICovXG5cbiAgZnVuY3Rpb24gc2V0QWRkaXRpb25hbFBhcmFtcyhhZGRpdGlvbmFsUGFyYW1zKSB7XG4gICAgX2FkZGl0aW9uYWxQYXJhbXMgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGFkZGl0aW9uYWxQYXJhbXMpKTtcblxuICAgIF9hZGRpdGlvbmFsUGFyYW1zLndpZHRoID0gX3ByZWZzLmdldEludChcInJzV1wiKTtcbiAgICBfYWRkaXRpb25hbFBhcmFtcy5oZWlnaHQgPSBfcHJlZnMuZ2V0SW50KFwicnNIXCIpO1xuXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjb250YWluZXJcIikuc3R5bGUud2lkdGggPSBfYWRkaXRpb25hbFBhcmFtcy53aWR0aCArIFwicHhcIjtcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNvbnRhaW5lclwiKS5zdHlsZS5oZWlnaHQgPSBfYWRkaXRpb25hbFBhcmFtcy5oZWlnaHQgKyBcInB4XCI7XG5cbiAgICBfbWVzc2FnZSA9IG5ldyBSaXNlVmlzaW9uLkNvbW1vbi5NZXNzYWdlKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY29udGFpbmVyXCIpLFxuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJtZXNzYWdlQ29udGFpbmVyXCIpKTtcblxuICAgIF9pbml0KCk7XG4gIH1cblxuICBmdW5jdGlvbiBfZHJhdygpIHtcblxuICAgIGlmIChfZm9ybWF0KSB7XG4gICAgICB2YXIgbm93ID0gbmV3IERhdGUoKTtcblxuICAgICAgX3RpbWVBbmREYXRlQ29udGFpbmVyLmlubmVySFRNTCA9IG1vbWVudChub3cpLmZvcm1hdChfZm9ybWF0KTtcblxuICAgICAgX3RpbWVvdXRJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIF9kcmF3KCk7XG4gICAgICB9LCAxMDAwKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwYXVzZSgpIHtcbiAgICBjbGVhclRpbWVvdXQoX3RpbWVvdXRJZCk7XG4gIH1cblxuICBmdW5jdGlvbiBwbGF5KCkge1xuXG4gICAgaWYgKCFfY29uZmlndXJhdGlvbkxvZ2dlZCkge1xuICAgICAgbG9nRXZlbnQoeyBcImV2ZW50XCI6IFwiY29uZmlndXJhdGlvblwiLCBcImV2ZW50X2RldGFpbHNcIjogSlNPTi5zdHJpbmdpZnkoX2FkZGl0aW9uYWxQYXJhbXMpfSk7XG4gICAgICBfY29uZmlndXJhdGlvbkxvZ2dlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgX2RyYXcoKTtcblxuICAgIGxvZ0V2ZW50KHsgXCJldmVudFwiOiBcInBsYXlcIiwgXCJldmVudF9kZXRhaWxzXCI6IF9mb3JtYXQgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBzdG9wKCkge1xuICAgIHBhdXNlKCk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRUYWJsZU5hbWUoKSB7XG4gICAgcmV0dXJuIFwidGltZV9kYXRlX2V2ZW50c1wiO1xuICB9XG5cbiAgZnVuY3Rpb24gbG9nRXZlbnQocGFyYW1zKSB7XG4gICAgUmlzZVZpc2lvbi5Db21tb24uTG9nZ2VyVXRpbHMubG9nRXZlbnQoZ2V0VGFibGVOYW1lKCksIHBhcmFtcyk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIFwicGF1c2VcIjogcGF1c2UsXG4gICAgXCJwbGF5XCI6IHBsYXksXG4gICAgXCJzZXRBZGRpdGlvbmFsUGFyYW1zXCI6IHNldEFkZGl0aW9uYWxQYXJhbXMsXG4gICAgXCJzdG9wXCI6IHN0b3AsXG4gICAgXCJsb2dFdmVudFwiOiBsb2dFdmVudCxcbiAgICBcImdldFRhYmxlTmFtZVwiOiBnZXRUYWJsZU5hbWVcbiAgfTtcbn0pKGdhZGdldHMpO1xuXG52YXIgUmlzZVZpc2lvbiA9IFJpc2VWaXNpb24gfHwge307XG5SaXNlVmlzaW9uLkNvbW1vbiA9IFJpc2VWaXNpb24uQ29tbW9uIHx8IHt9O1xuXG5SaXNlVmlzaW9uLkNvbW1vbi5NZXNzYWdlID0gZnVuY3Rpb24gKG1haW5Db250YWluZXIsIG1lc3NhZ2VDb250YWluZXIpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIF9hY3RpdmUgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBfaW5pdCgpIHtcbiAgICB0cnkge1xuICAgICAgbWVzc2FnZUNvbnRhaW5lci5zdHlsZS5oZWlnaHQgPSBtYWluQ29udGFpbmVyLnN0eWxlLmhlaWdodDtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zb2xlLndhcm4oXCJDYW4ndCBpbml0aWFsaXplIE1lc3NhZ2UgLSBcIiwgZS5tZXNzYWdlKTtcbiAgICB9XG4gIH1cblxuICAvKlxuICAgKiAgUHVibGljIE1ldGhvZHNcbiAgICovXG4gIGZ1bmN0aW9uIGhpZGUoKSB7XG4gICAgaWYgKF9hY3RpdmUpIHtcbiAgICAgIC8vIGNsZWFyIGNvbnRlbnQgb2YgbWVzc2FnZSBjb250YWluZXJcbiAgICAgIHdoaWxlIChtZXNzYWdlQ29udGFpbmVyLmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgbWVzc2FnZUNvbnRhaW5lci5yZW1vdmVDaGlsZChtZXNzYWdlQ29udGFpbmVyLmZpcnN0Q2hpbGQpO1xuICAgICAgfVxuXG4gICAgICAvLyBoaWRlIG1lc3NhZ2UgY29udGFpbmVyXG4gICAgICBtZXNzYWdlQ29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcblxuICAgICAgLy8gc2hvdyBtYWluIGNvbnRhaW5lclxuICAgICAgbWFpbkNvbnRhaW5lci5zdHlsZS52aXNpYmlsaXR5ID0gXCJ2aXNpYmxlXCI7XG5cbiAgICAgIF9hY3RpdmUgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzaG93KG1lc3NhZ2UpIHtcbiAgICB2YXIgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG4gICAgICBwO1xuXG4gICAgaWYgKCFfYWN0aXZlKSB7XG4gICAgICAvLyBoaWRlIG1haW4gY29udGFpbmVyXG4gICAgICBtYWluQ29udGFpbmVyLnN0eWxlLnZpc2liaWxpdHkgPSBcImhpZGRlblwiO1xuXG4gICAgICBtZXNzYWdlQ29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG5cbiAgICAgIC8vIGNyZWF0ZSBtZXNzYWdlIGVsZW1lbnRcbiAgICAgIHAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcbiAgICAgIHAuaW5uZXJIVE1MID0gbWVzc2FnZTtcbiAgICAgIHAuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgXCJtZXNzYWdlXCIpO1xuXG4gICAgICBmcmFnbWVudC5hcHBlbmRDaGlsZChwKTtcbiAgICAgIG1lc3NhZ2VDb250YWluZXIuYXBwZW5kQ2hpbGQoZnJhZ21lbnQpO1xuXG4gICAgICBfYWN0aXZlID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gbWVzc2FnZSBhbHJlYWR5IGJlaW5nIHNob3duLCB1cGRhdGUgbWVzc2FnZSB0ZXh0XG4gICAgICBwID0gbWVzc2FnZUNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKFwiLm1lc3NhZ2VcIik7XG4gICAgICBwLmlubmVySFRNTCA9IG1lc3NhZ2U7XG4gICAgfVxuICB9XG5cbiAgX2luaXQoKTtcblxuICByZXR1cm4ge1xuICAgIFwiaGlkZVwiOiBoaWRlLFxuICAgIFwic2hvd1wiOiBzaG93XG4gIH07XG59O1xuXG4vKiBnbG9iYWwgUmlzZVZpc2lvbiwgZ2FkZ2V0cyAqL1xuKGZ1bmN0aW9uICh3aW5kb3csIGRvY3VtZW50LCBnYWRnZXRzKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBpZCA9IG5ldyBnYWRnZXRzLlByZWZzKCkuZ2V0U3RyaW5nKFwiaWRcIik7XG5cbiAgd2luZG93Lm9uY29udGV4dG1lbnUgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG4gIGRvY3VtZW50LmJvZHkub25tb3VzZWRvd24gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG5cbiAgZnVuY3Rpb24gY29uZmlndXJlKG5hbWVzLCB2YWx1ZXMpIHtcbiAgICB2YXIgYWRkaXRpb25hbFBhcmFtcyxcbiAgICAgICAgY29tcGFueUlkID0gXCJcIixcbiAgICAgICAgZGlzcGxheUlkID0gXCJcIjtcblxuICAgIGlmIChBcnJheS5pc0FycmF5KG5hbWVzKSAmJiBuYW1lcy5sZW5ndGggPiAwICYmIEFycmF5LmlzQXJyYXkodmFsdWVzKSAmJiB2YWx1ZXMubGVuZ3RoID4gMCkge1xuICAgICAgLy8gY29tcGFueSBpZFxuICAgICAgaWYgKG5hbWVzWzBdID09PSBcImNvbXBhbnlJZFwiKSB7XG4gICAgICAgIGNvbXBhbnlJZCA9IHZhbHVlc1swXTtcbiAgICAgIH1cblxuICAgICAgLy8gZGlzcGxheSBpZFxuICAgICAgaWYgKG5hbWVzWzFdID09PSBcImRpc3BsYXlJZFwiKSB7XG4gICAgICAgIGlmICh2YWx1ZXNbMV0pIHtcbiAgICAgICAgICBkaXNwbGF5SWQgPSB2YWx1ZXNbMV07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgZGlzcGxheUlkID0gXCJwcmV2aWV3XCI7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gcHJvdmlkZSBMb2dnZXJVdGlscyB0aGUgaWRzIHRvIHVzZVxuICAgICAgUmlzZVZpc2lvbi5Db21tb24uTG9nZ2VyVXRpbHMuc2V0SWRzKGNvbXBhbnlJZCwgZGlzcGxheUlkKTtcblxuICAgICAgLy8gYWRkaXRpb25hbCBwYXJhbXNcbiAgICAgIGlmIChuYW1lc1syXSA9PT0gXCJhZGRpdGlvbmFsUGFyYW1zXCIpIHtcbiAgICAgICAgYWRkaXRpb25hbFBhcmFtcyA9IEpTT04ucGFyc2UodmFsdWVzWzJdKTtcblxuICAgICAgICBSaXNlVmlzaW9uLlRpbWVEYXRlLnNldEFkZGl0aW9uYWxQYXJhbXMoYWRkaXRpb25hbFBhcmFtcyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcGF1c2UoKSB7XG4gICAgUmlzZVZpc2lvbi5UaW1lRGF0ZS5wYXVzZSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gcGxheSgpIHtcbiAgICBSaXNlVmlzaW9uLlRpbWVEYXRlLnBsYXkoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgUmlzZVZpc2lvbi5UaW1lRGF0ZS5zdG9wKCk7XG4gIH1cblxuICBpZiAoaWQgJiYgaWQgIT09IFwiXCIpIHtcbiAgICBnYWRnZXRzLnJwYy5yZWdpc3RlcihcInJzY21kX3BsYXlfXCIgKyBpZCwgcGxheSk7XG4gICAgZ2FkZ2V0cy5ycGMucmVnaXN0ZXIoXCJyc2NtZF9wYXVzZV9cIiArIGlkLCBwYXVzZSk7XG4gICAgZ2FkZ2V0cy5ycGMucmVnaXN0ZXIoXCJyc2NtZF9zdG9wX1wiICsgaWQsIHN0b3ApO1xuICAgIGdhZGdldHMucnBjLnJlZ2lzdGVyKFwicnNwYXJhbV9zZXRfXCIgKyBpZCwgY29uZmlndXJlKTtcbiAgICBnYWRnZXRzLnJwYy5jYWxsKFwiXCIsIFwicnNwYXJhbV9nZXRcIiwgbnVsbCwgaWQsIFtcImNvbXBhbnlJZFwiLCBcImRpc3BsYXlJZFwiLCBcImFkZGl0aW9uYWxQYXJhbXNcIl0pO1xuICB9XG5cbn0pKHdpbmRvdywgZG9jdW1lbnQsIGdhZGdldHMpO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
